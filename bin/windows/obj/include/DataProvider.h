// Generated by Haxe 4.3.1
#ifndef INCLUDED_DataProvider
#define INCLUDED_DataProvider

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(DataProvider)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)



class HXCPP_CLASS_ATTRIBUTES DataProvider_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef DataProvider_obj OBJ_;
		DataProvider_obj();

	public:
		enum { _hx_ClassId = 0x4023dc5b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="DataProvider")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"DataProvider"); }

		inline static ::hx::ObjectPtr< DataProvider_obj > __new() {
			::hx::ObjectPtr< DataProvider_obj > __this = new DataProvider_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< DataProvider_obj > __alloc(::hx::Ctx *_hx_ctx) {
			DataProvider_obj *__this = (DataProvider_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DataProvider_obj), false, "DataProvider"));
			*(void **)__this = DataProvider_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~DataProvider_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DataProvider",9b,89,42,57); }

		static ::String PathForXml(::String className);
		static ::Dynamic PathForXml_dyn();

		static ::String PathForImg(::String imgName);
		static ::Dynamic PathForImg_dyn();

		static  ::Dynamic Load(::String className);
		static ::Dynamic Load_dyn();

		static void Save( ::Dynamic arr,::String className);
		static ::Dynamic Save_dyn();

		static  ::openfl::display::BitmapData LoadImg(::String imgName);
		static ::Dynamic LoadImg_dyn();

};


#endif /* INCLUDED_DataProvider */ 
