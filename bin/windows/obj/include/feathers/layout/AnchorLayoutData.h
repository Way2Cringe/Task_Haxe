// Generated by Haxe 4.3.1
#ifndef INCLUDED_feathers_layout_AnchorLayoutData
#define INCLUDED_feathers_layout_AnchorLayoutData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutData
#include <feathers/layout/ILayoutData.h>
#endif
HX_DECLARE_CLASS2(feathers,layout,Anchor)
HX_DECLARE_CLASS2(feathers,layout,AnchorLayoutData)
HX_DECLARE_CLASS2(feathers,layout,ILayoutData)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace feathers{
namespace layout{


class HXCPP_CLASS_ATTRIBUTES AnchorLayoutData_obj : public  ::openfl::events::EventDispatcher_obj
{
	public:
		typedef  ::openfl::events::EventDispatcher_obj super;
		typedef AnchorLayoutData_obj OBJ_;
		AnchorLayoutData_obj();

	public:
		enum { _hx_ClassId = 0x5678d743 };

		void __construct( ::feathers::layout::Anchor top, ::feathers::layout::Anchor right, ::feathers::layout::Anchor bottom, ::feathers::layout::Anchor left, ::Dynamic horizontalCenter, ::Dynamic verticalCenter);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.layout.AnchorLayoutData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.layout.AnchorLayoutData"); }
		static ::hx::ObjectPtr< AnchorLayoutData_obj > __new( ::feathers::layout::Anchor top, ::feathers::layout::Anchor right, ::feathers::layout::Anchor bottom, ::feathers::layout::Anchor left, ::Dynamic horizontalCenter, ::Dynamic verticalCenter);
		static ::hx::ObjectPtr< AnchorLayoutData_obj > __alloc(::hx::Ctx *_hx_ctx, ::feathers::layout::Anchor top, ::feathers::layout::Anchor right, ::feathers::layout::Anchor bottom, ::feathers::layout::Anchor left, ::Dynamic horizontalCenter, ::Dynamic verticalCenter);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AnchorLayoutData_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("AnchorLayoutData",e9,6c,53,ef); }

		static  ::feathers::layout::AnchorLayoutData center( ::Dynamic x, ::Dynamic y);
		static ::Dynamic center_dyn();

		static  ::feathers::layout::AnchorLayoutData fill(::hx::Null< Float >  padding);
		static ::Dynamic fill_dyn();

		static  ::feathers::layout::AnchorLayoutData fillHorizontal(::hx::Null< Float >  padding);
		static ::Dynamic fillHorizontal_dyn();

		static  ::feathers::layout::AnchorLayoutData fillVertical(::hx::Null< Float >  padding);
		static ::Dynamic fillVertical_dyn();

		static  ::feathers::layout::AnchorLayoutData topLeft(::hx::Null< Float >  top,::hx::Null< Float >  left);
		static ::Dynamic topLeft_dyn();

		static  ::feathers::layout::AnchorLayoutData topCenter(::hx::Null< Float >  top,::hx::Null< Float >  horizontalCenter);
		static ::Dynamic topCenter_dyn();

		static  ::feathers::layout::AnchorLayoutData topRight(::hx::Null< Float >  top,::hx::Null< Float >  right);
		static ::Dynamic topRight_dyn();

		static  ::feathers::layout::AnchorLayoutData middleLeft(::hx::Null< Float >  verticalCenter,::hx::Null< Float >  left);
		static ::Dynamic middleLeft_dyn();

		static  ::feathers::layout::AnchorLayoutData middleRight(::hx::Null< Float >  verticalCenter,::hx::Null< Float >  right);
		static ::Dynamic middleRight_dyn();

		static  ::feathers::layout::AnchorLayoutData bottomLeft(::hx::Null< Float >  bottom,::hx::Null< Float >  left);
		static ::Dynamic bottomLeft_dyn();

		static  ::feathers::layout::AnchorLayoutData bottomCenter(::hx::Null< Float >  bottom,::hx::Null< Float >  horizontalCenter);
		static ::Dynamic bottomCenter_dyn();

		static  ::feathers::layout::AnchorLayoutData bottomRight(::hx::Null< Float >  bottom,::hx::Null< Float >  right);
		static ::Dynamic bottomRight_dyn();

		 ::feathers::layout::Anchor _top;
		 ::feathers::layout::Anchor get_top();
		::Dynamic get_top_dyn();

		 ::feathers::layout::Anchor set_top( ::feathers::layout::Anchor value);
		::Dynamic set_top_dyn();

		 ::feathers::layout::Anchor _right;
		 ::feathers::layout::Anchor get_right();
		::Dynamic get_right_dyn();

		 ::feathers::layout::Anchor set_right( ::feathers::layout::Anchor value);
		::Dynamic set_right_dyn();

		 ::feathers::layout::Anchor _bottom;
		 ::feathers::layout::Anchor get_bottom();
		::Dynamic get_bottom_dyn();

		 ::feathers::layout::Anchor set_bottom( ::feathers::layout::Anchor value);
		::Dynamic set_bottom_dyn();

		 ::feathers::layout::Anchor _left;
		 ::feathers::layout::Anchor get_left();
		::Dynamic get_left_dyn();

		 ::feathers::layout::Anchor set_left( ::feathers::layout::Anchor value);
		::Dynamic set_left_dyn();

		 ::Dynamic _horizontalCenter;
		 ::Dynamic get_horizontalCenter();
		::Dynamic get_horizontalCenter_dyn();

		 ::Dynamic set_horizontalCenter( ::Dynamic value);
		::Dynamic set_horizontalCenter_dyn();

		 ::Dynamic _verticalCenter;
		 ::Dynamic get_verticalCenter();
		::Dynamic get_verticalCenter_dyn();

		 ::Dynamic set_verticalCenter( ::Dynamic value);
		::Dynamic set_verticalCenter_dyn();

		void anchorLayoutData_anchor_changeHandler( ::openfl::events::Event event);
		::Dynamic anchorLayoutData_anchor_changeHandler_dyn();

};

} // end namespace feathers
} // end namespace layout

#endif /* INCLUDED_feathers_layout_AnchorLayoutData */ 
