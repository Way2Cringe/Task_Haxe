// Generated by Haxe 4.3.1
#ifndef INCLUDED_feathers_layout_ResponsiveGridLayoutData
#define INCLUDED_feathers_layout_ResponsiveGridLayoutData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutData
#include <feathers/layout/ILayoutData.h>
#endif
HX_DECLARE_CLASS2(feathers,layout,Breakpoint)
HX_DECLARE_CLASS2(feathers,layout,ILayoutData)
HX_DECLARE_CLASS2(feathers,layout,ResponsiveGridLayoutData)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace feathers{
namespace layout{


class HXCPP_CLASS_ATTRIBUTES ResponsiveGridLayoutData_obj : public  ::openfl::events::EventDispatcher_obj
{
	public:
		typedef  ::openfl::events::EventDispatcher_obj super;
		typedef ResponsiveGridLayoutData_obj OBJ_;
		ResponsiveGridLayoutData_obj();

	public:
		enum { _hx_ClassId = 0x2db3c4e8 };

		void __construct(::hx::Null< int >  __o_span,::hx::Null< int >  __o_offset,::hx::Null< int >  __o_smSpan,::hx::Null< int >  __o_smOffset,::hx::Null< int >  __o_mdSpan,::hx::Null< int >  __o_mdOffset,::hx::Null< int >  __o_lgSpan,::hx::Null< int >  __o_lgOffset,::hx::Null< int >  __o_xlSpan,::hx::Null< int >  __o_xlOffset);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.layout.ResponsiveGridLayoutData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.layout.ResponsiveGridLayoutData"); }
		static ::hx::ObjectPtr< ResponsiveGridLayoutData_obj > __new(::hx::Null< int >  __o_span,::hx::Null< int >  __o_offset,::hx::Null< int >  __o_smSpan,::hx::Null< int >  __o_smOffset,::hx::Null< int >  __o_mdSpan,::hx::Null< int >  __o_mdOffset,::hx::Null< int >  __o_lgSpan,::hx::Null< int >  __o_lgOffset,::hx::Null< int >  __o_xlSpan,::hx::Null< int >  __o_xlOffset);
		static ::hx::ObjectPtr< ResponsiveGridLayoutData_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_span,::hx::Null< int >  __o_offset,::hx::Null< int >  __o_smSpan,::hx::Null< int >  __o_smOffset,::hx::Null< int >  __o_mdSpan,::hx::Null< int >  __o_mdOffset,::hx::Null< int >  __o_lgSpan,::hx::Null< int >  __o_lgOffset,::hx::Null< int >  __o_xlSpan,::hx::Null< int >  __o_xlOffset);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ResponsiveGridLayoutData_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("ResponsiveGridLayoutData",8e,70,35,7b); }

		int _span;
		int get_span();
		::Dynamic get_span_dyn();

		int set_span(int value);
		::Dynamic set_span_dyn();

		int _offset;
		int get_offset();
		::Dynamic get_offset_dyn();

		int set_offset(int value);
		::Dynamic set_offset_dyn();

		bool _display;
		bool get_display();
		::Dynamic get_display_dyn();

		bool set_display(bool value);
		::Dynamic set_display_dyn();

		int _smSpan;
		int get_smSpan();
		::Dynamic get_smSpan_dyn();

		int set_smSpan(int value);
		::Dynamic set_smSpan_dyn();

		int _smOffset;
		int get_smOffset();
		::Dynamic get_smOffset_dyn();

		int set_smOffset(int value);
		::Dynamic set_smOffset_dyn();

		 ::Dynamic _smDisplay;
		 ::Dynamic get_smDisplay();
		::Dynamic get_smDisplay_dyn();

		 ::Dynamic set_smDisplay( ::Dynamic value);
		::Dynamic set_smDisplay_dyn();

		int _mdSpan;
		int get_mdSpan();
		::Dynamic get_mdSpan_dyn();

		int set_mdSpan(int value);
		::Dynamic set_mdSpan_dyn();

		int _mdOffset;
		int get_mdOffset();
		::Dynamic get_mdOffset_dyn();

		int set_mdOffset(int value);
		::Dynamic set_mdOffset_dyn();

		 ::Dynamic _mdDisplay;
		 ::Dynamic get_mdDisplay();
		::Dynamic get_mdDisplay_dyn();

		 ::Dynamic set_mdDisplay( ::Dynamic value);
		::Dynamic set_mdDisplay_dyn();

		int _lgSpan;
		int get_lgSpan();
		::Dynamic get_lgSpan_dyn();

		int set_lgSpan(int value);
		::Dynamic set_lgSpan_dyn();

		int _lgOffset;
		int get_lgOffset();
		::Dynamic get_lgOffset_dyn();

		int set_lgOffset(int value);
		::Dynamic set_lgOffset_dyn();

		 ::Dynamic _lgDisplay;
		 ::Dynamic get_lgDisplay();
		::Dynamic get_lgDisplay_dyn();

		 ::Dynamic set_lgDisplay( ::Dynamic value);
		::Dynamic set_lgDisplay_dyn();

		int _xlSpan;
		int get_xlSpan();
		::Dynamic get_xlSpan_dyn();

		int set_xlSpan(int value);
		::Dynamic set_xlSpan_dyn();

		int _xlOffset;
		int get_xlOffset();
		::Dynamic get_xlOffset_dyn();

		int set_xlOffset(int value);
		::Dynamic set_xlOffset_dyn();

		 ::Dynamic _xlDisplay;
		 ::Dynamic get_xlDisplay();
		::Dynamic get_xlDisplay_dyn();

		 ::Dynamic set_xlDisplay( ::Dynamic value);
		::Dynamic set_xlDisplay_dyn();

		int _xxlSpan;
		int get_xxlSpan();
		::Dynamic get_xxlSpan_dyn();

		int set_xxlSpan(int value);
		::Dynamic set_xxlSpan_dyn();

		int _xxlOffset;
		int get_xxlOffset();
		::Dynamic get_xxlOffset_dyn();

		int set_xxlOffset(int value);
		::Dynamic set_xxlOffset_dyn();

		 ::Dynamic _xxlDisplay;
		 ::Dynamic get_xxlDisplay();
		::Dynamic get_xxlDisplay_dyn();

		 ::Dynamic set_xxlDisplay( ::Dynamic value);
		::Dynamic set_xxlDisplay_dyn();

		int getSpan( ::feathers::layout::Breakpoint breakpoint);
		::Dynamic getSpan_dyn();

		int getOffset( ::feathers::layout::Breakpoint breakpoint);
		::Dynamic getOffset_dyn();

		bool getDisplay( ::feathers::layout::Breakpoint breakpoint);
		::Dynamic getDisplay_dyn();

};

} // end namespace feathers
} // end namespace layout

#endif /* INCLUDED_feathers_layout_ResponsiveGridLayoutData */ 
