// Generated by Haxe 4.3.1
#ifndef INCLUDED_feathers_layout_VerticalListLayout
#define INCLUDED_feathers_layout_VerticalListLayout

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_feathers_layout_IKeyboardNavigationLayout
#include <feathers/layout/IKeyboardNavigationLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_IVirtualLayout
#include <feathers/layout/IVirtualLayout.h>
#endif
HX_DECLARE_CLASS2(feathers,layout,IKeyboardNavigationLayout)
HX_DECLARE_CLASS2(feathers,layout,ILayout)
HX_DECLARE_CLASS2(feathers,layout,IScrollLayout)
HX_DECLARE_CLASS2(feathers,layout,IVirtualLayout)
HX_DECLARE_CLASS2(feathers,layout,LayoutBoundsResult)
HX_DECLARE_CLASS2(feathers,layout,Measurements)
HX_DECLARE_CLASS2(feathers,layout,VerticalAlign)
HX_DECLARE_CLASS2(feathers,layout,VerticalListLayout)
HX_DECLARE_CLASS2(feathers,layout,VirtualLayoutRange)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,geom,Point)

namespace feathers{
namespace layout{


class HXCPP_CLASS_ATTRIBUTES VerticalListLayout_obj : public  ::openfl::events::EventDispatcher_obj
{
	public:
		typedef  ::openfl::events::EventDispatcher_obj super;
		typedef VerticalListLayout_obj OBJ_;
		VerticalListLayout_obj();

	public:
		enum { _hx_ClassId = 0x640862b8 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.layout.VerticalListLayout")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.layout.VerticalListLayout"); }
		static ::hx::ObjectPtr< VerticalListLayout_obj > __new();
		static ::hx::ObjectPtr< VerticalListLayout_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~VerticalListLayout_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("VerticalListLayout",de,2d,f0,d8); }

		Float _scrollX;
		Float get_scrollX();
		::Dynamic get_scrollX_dyn();

		Float set_scrollX(Float value);
		::Dynamic set_scrollX_dyn();

		Float _scrollY;
		Float get_scrollY();
		::Dynamic get_scrollY_dyn();

		Float set_scrollY(Float value);
		::Dynamic set_scrollY_dyn();

		::cpp::VirtualArray _virtualCache;
		::cpp::VirtualArray get_virtualCache();
		::Dynamic get_virtualCache_dyn();

		::cpp::VirtualArray set_virtualCache(::cpp::VirtualArray value);
		::Dynamic set_virtualCache_dyn();

		bool get_elasticTop();
		::Dynamic get_elasticTop_dyn();

		bool get_elasticRight();
		::Dynamic get_elasticRight_dyn();

		bool get_elasticBottom();
		::Dynamic get_elasticBottom_dyn();

		bool get_elasticLeft();
		::Dynamic get_elasticLeft_dyn();

		 ::Dynamic _requestedRowCount;
		 ::Dynamic get_requestedRowCount();
		::Dynamic get_requestedRowCount_dyn();

		 ::Dynamic set_requestedRowCount( ::Dynamic value);
		::Dynamic set_requestedRowCount_dyn();

		 ::Dynamic _requestedMinRowCount;
		 ::Dynamic get_requestedMinRowCount();
		::Dynamic get_requestedMinRowCount_dyn();

		 ::Dynamic set_requestedMinRowCount( ::Dynamic value);
		::Dynamic set_requestedMinRowCount_dyn();

		 ::Dynamic _requestedMaxRowCount;
		 ::Dynamic get_requestedMaxRowCount();
		::Dynamic get_requestedMaxRowCount_dyn();

		 ::Dynamic set_requestedMaxRowCount( ::Dynamic value);
		::Dynamic set_requestedMaxRowCount_dyn();

		Float _paddingTop;
		Float get_paddingTop();
		::Dynamic get_paddingTop_dyn();

		Float set_paddingTop(Float value);
		::Dynamic set_paddingTop_dyn();

		Float _paddingRight;
		Float get_paddingRight();
		::Dynamic get_paddingRight_dyn();

		Float set_paddingRight(Float value);
		::Dynamic set_paddingRight_dyn();

		Float _paddingBottom;
		Float get_paddingBottom();
		::Dynamic get_paddingBottom_dyn();

		Float set_paddingBottom(Float value);
		::Dynamic set_paddingBottom_dyn();

		Float _paddingLeft;
		Float get_paddingLeft();
		::Dynamic get_paddingLeft_dyn();

		Float set_paddingLeft(Float value);
		::Dynamic set_paddingLeft_dyn();

		Float _gap;
		Float get_gap();
		::Dynamic get_gap_dyn();

		Float set_gap(Float value);
		::Dynamic set_gap_dyn();

		Float _minGap;
		Float get_minGap();
		::Dynamic get_minGap_dyn();

		Float set_minGap(Float value);
		::Dynamic set_minGap_dyn();

		 ::feathers::layout::VerticalAlign _verticalAlign;
		 ::feathers::layout::VerticalAlign get_verticalAlign();
		::Dynamic get_verticalAlign_dyn();

		 ::feathers::layout::VerticalAlign set_verticalAlign( ::feathers::layout::VerticalAlign value);
		::Dynamic set_verticalAlign_dyn();

		bool _contentJustify;
		bool get_contentJustify();
		::Dynamic get_contentJustify_dyn();

		bool set_contentJustify(bool value);
		::Dynamic set_contentJustify_dyn();

		bool _widthResetEnabled;
		bool get_widthResetEnabled();
		::Dynamic get_widthResetEnabled_dyn();

		bool set_widthResetEnabled(bool value);
		::Dynamic set_widthResetEnabled_dyn();

		void setPadding(Float value);
		::Dynamic setPadding_dyn();

		 ::feathers::layout::LayoutBoundsResult layout(::Array< ::Dynamic> items, ::feathers::layout::Measurements measurements, ::feathers::layout::LayoutBoundsResult result);
		::Dynamic layout_dyn();

		Float calculateMaxItemWidth(::Array< ::Dynamic> items, ::feathers::layout::Measurements measurements);
		::Dynamic calculateMaxItemWidth_dyn();

		Float calculateViewPortWidth(Float maxItemWidth, ::feathers::layout::Measurements measurements);
		::Dynamic calculateViewPortWidth_dyn();

		Float calculateVirtualRowHeight(::Array< ::Dynamic> items,Float itemWidth);
		::Dynamic calculateVirtualRowHeight_dyn();

		 ::feathers::layout::VirtualLayoutRange getVisibleIndices(int itemCount,Float width,Float height, ::feathers::layout::VirtualLayoutRange result);
		::Dynamic getVisibleIndices_dyn();

		 ::openfl::geom::Point getNearestScrollPositionForIndex(int index,int itemCount,Float width,Float height, ::openfl::geom::Point result);
		::Dynamic getNearestScrollPositionForIndex_dyn();

		int findNextKeyboardIndex(int startIndex, ::openfl::events::KeyboardEvent event,bool wrapArrowKeys,::Array< ::Dynamic> items,::Array< int > indicesToSkip,Float viewPortWidth,Float viewPortHeight);
		::Dynamic findNextKeyboardIndex_dyn();

		void applyVerticalAlign(::Array< ::Dynamic> items,Float contentHeight,Float viewPortHeight);
		::Dynamic applyVerticalAlign_dyn();

};

} // end namespace feathers
} // end namespace layout

#endif /* INCLUDED_feathers_layout_VerticalListLayout */ 
