// Generated by Haxe 4.3.1
#ifndef INCLUDED_feathers_layout_Anchor
#define INCLUDED_feathers_layout_Anchor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
HX_DECLARE_CLASS2(feathers,layout,Anchor)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace feathers{
namespace layout{


class HXCPP_CLASS_ATTRIBUTES Anchor_obj : public  ::openfl::events::EventDispatcher_obj
{
	public:
		typedef  ::openfl::events::EventDispatcher_obj super;
		typedef Anchor_obj OBJ_;
		Anchor_obj();

	public:
		enum { _hx_ClassId = 0x3447846f };

		void __construct(Float value, ::openfl::display::DisplayObject relativeTo);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.layout.Anchor")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.layout.Anchor"); }
		static ::hx::ObjectPtr< Anchor_obj > __new(Float value, ::openfl::display::DisplayObject relativeTo);
		static ::hx::ObjectPtr< Anchor_obj > __alloc(::hx::Ctx *_hx_ctx,Float value, ::openfl::display::DisplayObject relativeTo);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Anchor_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Anchor",95,ae,05,95); }

		Float _value;
		Float get_value();
		::Dynamic get_value_dyn();

		Float set_value(Float newValue);
		::Dynamic set_value_dyn();

		 ::openfl::display::DisplayObject _relativeTo;
		 ::openfl::display::DisplayObject get_relativeTo();
		::Dynamic get_relativeTo_dyn();

		 ::openfl::display::DisplayObject set_relativeTo( ::openfl::display::DisplayObject value);
		::Dynamic set_relativeTo_dyn();

};

} // end namespace feathers
} // end namespace layout

#endif /* INCLUDED_feathers_layout_Anchor */ 
