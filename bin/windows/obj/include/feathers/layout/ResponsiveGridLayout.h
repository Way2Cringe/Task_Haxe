// Generated by Haxe 4.3.1
#ifndef INCLUDED_feathers_layout_ResponsiveGridLayout
#define INCLUDED_feathers_layout_ResponsiveGridLayout

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayout
#include <feathers/layout/ILayout.h>
#endif
HX_DECLARE_CLASS2(feathers,layout,Breakpoint)
HX_DECLARE_CLASS2(feathers,layout,ILayout)
HX_DECLARE_CLASS2(feathers,layout,LayoutBoundsResult)
HX_DECLARE_CLASS2(feathers,layout,Measurements)
HX_DECLARE_CLASS2(feathers,layout,ResponsiveGridLayout)
HX_DECLARE_CLASS2(feathers,layout,VerticalAlign)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace feathers{
namespace layout{


class HXCPP_CLASS_ATTRIBUTES ResponsiveGridLayout_obj : public  ::openfl::events::EventDispatcher_obj
{
	public:
		typedef  ::openfl::events::EventDispatcher_obj super;
		typedef ResponsiveGridLayout_obj OBJ_;
		ResponsiveGridLayout_obj();

	public:
		enum { _hx_ClassId = 0x1e7e1b9e };

		void __construct(::hx::Null< int >  __o_columnCount,::hx::Null< Float >  __o_sm,::hx::Null< Float >  __o_md,::hx::Null< Float >  __o_lg,::hx::Null< Float >  __o_xl,::hx::Null< Float >  __o_xxl);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.layout.ResponsiveGridLayout")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.layout.ResponsiveGridLayout"); }
		static ::hx::ObjectPtr< ResponsiveGridLayout_obj > __new(::hx::Null< int >  __o_columnCount,::hx::Null< Float >  __o_sm,::hx::Null< Float >  __o_md,::hx::Null< Float >  __o_lg,::hx::Null< Float >  __o_xl,::hx::Null< Float >  __o_xxl);
		static ::hx::ObjectPtr< ResponsiveGridLayout_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_columnCount,::hx::Null< Float >  __o_sm,::hx::Null< Float >  __o_md,::hx::Null< Float >  __o_lg,::hx::Null< Float >  __o_xl,::hx::Null< Float >  __o_xxl);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ResponsiveGridLayout_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("ResponsiveGridLayout",44,7c,4b,75); }

		int _columnCount;
		int get_columnCount();
		::Dynamic get_columnCount_dyn();

		int set_columnCount(int value);
		::Dynamic set_columnCount_dyn();

		Float _sm;
		Float get_sm();
		::Dynamic get_sm_dyn();

		Float set_sm(Float value);
		::Dynamic set_sm_dyn();

		Float _md;
		Float get_md();
		::Dynamic get_md_dyn();

		Float set_md(Float value);
		::Dynamic set_md_dyn();

		Float _lg;
		Float get_lg();
		::Dynamic get_lg_dyn();

		Float set_lg(Float value);
		::Dynamic set_lg_dyn();

		Float _xl;
		Float get_xl();
		::Dynamic get_xl_dyn();

		Float set_xl(Float value);
		::Dynamic set_xl_dyn();

		Float _xxl;
		Float get_xxl();
		::Dynamic get_xxl_dyn();

		Float set_xxl(Float value);
		::Dynamic set_xxl_dyn();

		Float _rowGap;
		Float get_rowGap();
		::Dynamic get_rowGap_dyn();

		Float set_rowGap(Float value);
		::Dynamic set_rowGap_dyn();

		Float _columnGap;
		Float get_columnGap();
		::Dynamic get_columnGap_dyn();

		Float set_columnGap(Float value);
		::Dynamic set_columnGap_dyn();

		Float _paddingTop;
		Float get_paddingTop();
		::Dynamic get_paddingTop_dyn();

		Float set_paddingTop(Float value);
		::Dynamic set_paddingTop_dyn();

		Float _paddingRight;
		Float get_paddingRight();
		::Dynamic get_paddingRight_dyn();

		Float set_paddingRight(Float value);
		::Dynamic set_paddingRight_dyn();

		Float _paddingBottom;
		Float get_paddingBottom();
		::Dynamic get_paddingBottom_dyn();

		Float set_paddingBottom(Float value);
		::Dynamic set_paddingBottom_dyn();

		Float _paddingLeft;
		Float get_paddingLeft();
		::Dynamic get_paddingLeft_dyn();

		Float set_paddingLeft(Float value);
		::Dynamic set_paddingLeft_dyn();

		 ::feathers::layout::VerticalAlign _rowVerticalAlign;
		 ::feathers::layout::VerticalAlign get_rowVerticalAlign();
		::Dynamic get_rowVerticalAlign_dyn();

		 ::feathers::layout::VerticalAlign set_rowVerticalAlign( ::feathers::layout::VerticalAlign value);
		::Dynamic set_rowVerticalAlign_dyn();

		bool _justifyResetEnabled;
		bool get_justifyResetEnabled();
		::Dynamic get_justifyResetEnabled_dyn();

		bool set_justifyResetEnabled(bool value);
		::Dynamic set_justifyResetEnabled_dyn();

		void setPadding(Float value);
		::Dynamic setPadding_dyn();

		void setGap(Float value);
		::Dynamic setGap_dyn();

		::Array< ::Dynamic> _rowItems;
		 ::feathers::layout::LayoutBoundsResult layout(::Array< ::Dynamic> items, ::feathers::layout::Measurements measurements, ::feathers::layout::LayoutBoundsResult result);
		::Dynamic layout_dyn();

		Float layoutItems(::Array< ::Dynamic> items,Float viewPortWidth);
		::Dynamic layoutItems_dyn();

		void alignRow(Float positionY,Float maxItemHeight);
		::Dynamic alignRow_dyn();

		void positionItem( ::openfl::display::DisplayObject item,int span,int offset,Float columnWidth,Float yPosition);
		::Dynamic positionItem_dyn();

		 ::feathers::layout::Breakpoint getBreakpoint(Float viewPortWidth);
		::Dynamic getBreakpoint_dyn();

		int getSpan( ::openfl::display::DisplayObject item, ::feathers::layout::Breakpoint breakpoint);
		::Dynamic getSpan_dyn();

		int getOffset( ::openfl::display::DisplayObject item,int span, ::feathers::layout::Breakpoint breakpoint);
		::Dynamic getOffset_dyn();

		bool getDisplay( ::openfl::display::DisplayObject item, ::feathers::layout::Breakpoint breakpoint);
		::Dynamic getDisplay_dyn();

};

} // end namespace feathers
} // end namespace layout

#endif /* INCLUDED_feathers_layout_ResponsiveGridLayout */ 
