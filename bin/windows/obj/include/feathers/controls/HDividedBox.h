// Generated by Haxe 4.3.1
#ifndef INCLUDED_feathers_controls_HDividedBox
#define INCLUDED_feathers_controls_HDividedBox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_feathers_controls_supportClasses_BaseDividedBox
#include <feathers/controls/supportClasses/BaseDividedBox.h>
#endif
HX_DECLARE_CLASS2(feathers,controls,HDividedBox)
HX_DECLARE_CLASS3(feathers,controls,supportClasses,BaseDividedBox)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,layout,HDividedBoxLayout)
HX_DECLARE_CLASS2(feathers,layout,ILayout)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace feathers{
namespace controls{


class HXCPP_CLASS_ATTRIBUTES HDividedBox_obj : public  ::feathers::controls::supportClasses::BaseDividedBox_obj
{
	public:
		typedef  ::feathers::controls::supportClasses::BaseDividedBox_obj super;
		typedef HDividedBox_obj OBJ_;
		HDividedBox_obj();

	public:
		enum { _hx_ClassId = 0x47eecb02 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.controls.HDividedBox")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.controls.HDividedBox"); }
		static ::hx::ObjectPtr< HDividedBox_obj > __new();
		static ::hx::ObjectPtr< HDividedBox_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~HDividedBox_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("HDividedBox",68,da,5c,a8); }

		 ::feathers::layout::HDividedBoxLayout _hDividedBoxLayout;
		::Array< ::Dynamic> _customItemWidths;
		int _fallbackFluidIndex;
		Float _resizeStartStageX;
		Float _resizeStartWidth1;
		Float _resizeStartWidth2;
		void initializeHDividedBoxTheme();
		::Dynamic initializeHDividedBoxTheme_dyn();

		 ::openfl::display::DisplayObject addItemAt( ::openfl::display::DisplayObject child,int index);

		 ::openfl::display::DisplayObject removeItem( ::openfl::display::DisplayObject child);

		void initialize();

		void handleLayout();

		void prepareResize(int dividerIndex,Float stageX,Float stageY);

		void commitResize(int dividerIndex,Float stageX,Float stageY,bool live);

};

} // end namespace feathers
} // end namespace controls

#endif /* INCLUDED_feathers_controls_HDividedBox */ 
