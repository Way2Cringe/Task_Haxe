// Generated by Haxe 4.3.1
#ifndef INCLUDED_feathers_controls_dataRenderers_ItemRenderer
#define INCLUDED_feathers_controls_dataRenderers_ItemRenderer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_feathers_controls_ToggleButton
#include <feathers/controls/ToggleButton.h>
#endif
#ifndef INCLUDED_feathers_core_IPointerDelegate
#include <feathers/core/IPointerDelegate.h>
#endif
#ifndef INCLUDED_feathers_controls_dataRenderers_IDataRenderer
#include <feathers/controls/dataRenderers/IDataRenderer.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutIndexObject
#include <feathers/layout/ILayoutIndexObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusContainer
#include <feathers/core/IFocusContainer.h>
#endif
HX_DECLARE_CLASS2(feathers,controls,BasicToggleButton)
HX_DECLARE_CLASS2(feathers,controls,IToggle)
HX_DECLARE_CLASS2(feathers,controls,ITriggerView)
HX_DECLARE_CLASS2(feathers,controls,ToggleButton)
HX_DECLARE_CLASS2(feathers,controls,ToggleButtonState)
HX_DECLARE_CLASS3(feathers,controls,dataRenderers,IDataRenderer)
HX_DECLARE_CLASS3(feathers,controls,dataRenderers,ItemRenderer)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IFocusContainer)
HX_DECLARE_CLASS2(feathers,core,IFocusManagerAware)
HX_DECLARE_CLASS2(feathers,core,IFocusObject)
HX_DECLARE_CLASS2(feathers,core,IHTMLTextControl)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IPointerDelegate)
HX_DECLARE_CLASS2(feathers,core,IStateContext)
HX_DECLARE_CLASS2(feathers,core,ITextControl)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,layout,ILayoutIndexObject)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,layout,Measurements)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS2(feathers,text,TextFormat)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,TextField)
HX_DECLARE_CLASS2(openfl,text,TextFormat)

namespace feathers{
namespace controls{
namespace dataRenderers{


class HXCPP_CLASS_ATTRIBUTES ItemRenderer_obj : public  ::feathers::controls::ToggleButton_obj
{
	public:
		typedef  ::feathers::controls::ToggleButton_obj super;
		typedef ItemRenderer_obj OBJ_;
		ItemRenderer_obj();

	public:
		enum { _hx_ClassId = 0x67cf6db6 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.controls.dataRenderers.ItemRenderer")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.controls.dataRenderers.ItemRenderer"); }
		static ::hx::ObjectPtr< ItemRenderer_obj > __new();
		static ::hx::ObjectPtr< ItemRenderer_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ItemRenderer_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("ItemRenderer",96,5d,17,5f); }

		static void __boot();
		static  ::Dynamic __meta__;
		 ::Dynamic _data;
		 ::Dynamic get_data();
		::Dynamic get_data_dyn();

		 ::Dynamic set_data( ::Dynamic value);
		::Dynamic set_data_dyn();

		 ::openfl::text::TextField secondaryTextField;
		Float _secondaryTextMeasuredWidth;
		Float _secondaryTextMeasuredHeight;
		::String _previousSecondaryText;
		::String _previousSecondaryHTMLText;
		 ::feathers::text::TextFormat _previousSecondaryTextFormat;
		 ::openfl::text::TextFormat _previousSecondarySimpleTextFormat;
		bool _updatedSecondaryTextStyles;
		::String _secondaryText;
		::String get_secondaryText();
		::Dynamic get_secondaryText_dyn();

		::String set_secondaryText(::String value);
		::Dynamic set_secondaryText_dyn();

		::String _secondaryHtmlText;
		::String get_secondaryHtmlText();
		::Dynamic get_secondaryHtmlText_dyn();

		::String set_secondaryHtmlText(::String value);
		::Dynamic set_secondaryHtmlText_dyn();

		bool _childFocusEnabled;
		bool get_childFocusEnabled();
		::Dynamic get_childFocusEnabled_dyn();

		bool set_childFocusEnabled(bool value);
		::Dynamic set_childFocusEnabled_dyn();

		int _layoutIndex;
		int get_layoutIndex();
		::Dynamic get_layoutIndex_dyn();

		int set_layoutIndex(int value);
		::Dynamic set_layoutIndex_dyn();

		 ::openfl::display::InteractiveObject _pointerTarget;
		 ::openfl::display::InteractiveObject get_pointerTarget();
		::Dynamic get_pointerTarget_dyn();

		 ::openfl::display::InteractiveObject set_pointerTarget( ::openfl::display::InteractiveObject value);
		::Dynamic set_pointerTarget_dyn();

		bool _ignoreAccessoryResizes;
		 ::feathers::layout::Measurements _accessoryViewMeasurements;
		 ::openfl::display::DisplayObject _currentAccessoryView;
		Float get_baseline();

		 ::haxe::ds::EnumValueMap _stateToSecondaryTextFormat;
		 ::feathers::text::TextFormat getSecondaryTextFormatForState( ::feathers::controls::ToggleButtonState state);
		::Dynamic getSecondaryTextFormatForState_dyn();

		void setSecondaryTextFormatForState( ::feathers::controls::ToggleButtonState state, ::feathers::text::TextFormat textFormat);
		::Dynamic setSecondaryTextFormatForState_dyn();

		void initializeItemRendererTheme();
		::Dynamic initializeItemRendererTheme_dyn();

		void initialize();

		void update();

		void refreshSecondaryTextField();
		::Dynamic refreshSecondaryTextField_dyn();

		void refreshSecondaryTextStyles();
		::Dynamic refreshSecondaryTextStyles_dyn();

		void refreshSecondaryText(bool forceMeasurement);
		::Dynamic refreshSecondaryText_dyn();

		 ::feathers::text::TextFormat getCurrentSecondaryTextFormat();
		::Dynamic getCurrentSecondaryTextFormat_dyn();

		void refreshAccessoryView();
		::Dynamic refreshAccessoryView_dyn();

		 ::openfl::display::DisplayObject getCurrentAccessoryView();
		::Dynamic getCurrentAccessoryView_dyn();

		void removeCurrentAccessoryView( ::openfl::display::DisplayObject view);
		::Dynamic removeCurrentAccessoryView_dyn();

		void addCurrentAccessoryView( ::openfl::display::DisplayObject view);
		::Dynamic addCurrentAccessoryView_dyn();

		bool customHitTest(Float stageX,Float stageY);
		::Dynamic customHitTest_dyn();

		void refreshTextFieldDimensions(bool forMeasurement);

		 ::Dynamic calculateExplicitWidthForTextMeasurement();

		Float measureContentWidth();

		Float measureContentHeight();

		Float measureContentMinWidth();

		Float measureContentMinHeight();

		bool hasAccessoryViewInLayout();
		::Dynamic hasAccessoryViewInLayout_dyn();

		 ::openfl::display::DisplayObject getCurrentBackgroundSkin();

		void layoutChildren();

		void itemRenderer_secondaryTextFormat_changeHandler( ::openfl::events::Event event);
		::Dynamic itemRenderer_secondaryTextFormat_changeHandler_dyn();

		void itemRenderer_accessoryView_resizeHandler( ::openfl::events::Event event);
		::Dynamic itemRenderer_accessoryView_resizeHandler_dyn();

		 ::feathers::text::TextFormat _hx___secondaryTextFormat;
		 ::feathers::text::TextFormat get_secondaryTextFormat();
		::Dynamic get_secondaryTextFormat_dyn();

		 ::feathers::text::TextFormat set_secondaryTextFormat( ::feathers::text::TextFormat value);
		::Dynamic set_secondaryTextFormat_dyn();

		 ::feathers::text::TextFormat clearStyle_secondaryTextFormat();
		::Dynamic clearStyle_secondaryTextFormat_dyn();

		 ::feathers::text::TextFormat _hx___disabledSecondaryTextFormat;
		 ::feathers::text::TextFormat get_disabledSecondaryTextFormat();
		::Dynamic get_disabledSecondaryTextFormat_dyn();

		 ::feathers::text::TextFormat set_disabledSecondaryTextFormat( ::feathers::text::TextFormat value);
		::Dynamic set_disabledSecondaryTextFormat_dyn();

		 ::feathers::text::TextFormat clearStyle_disabledSecondaryTextFormat();
		::Dynamic clearStyle_disabledSecondaryTextFormat_dyn();

		 ::feathers::text::TextFormat _hx___selectedSecondaryTextFormat;
		 ::feathers::text::TextFormat get_selectedSecondaryTextFormat();
		::Dynamic get_selectedSecondaryTextFormat_dyn();

		 ::feathers::text::TextFormat set_selectedSecondaryTextFormat( ::feathers::text::TextFormat value);
		::Dynamic set_selectedSecondaryTextFormat_dyn();

		 ::feathers::text::TextFormat clearStyle_selectedSecondaryTextFormat();
		::Dynamic clearStyle_selectedSecondaryTextFormat_dyn();

		 ::openfl::display::DisplayObject _hx___alternateBackgroundSkin;
		 ::openfl::display::DisplayObject get_alternateBackgroundSkin();
		::Dynamic get_alternateBackgroundSkin_dyn();

		 ::openfl::display::DisplayObject set_alternateBackgroundSkin( ::openfl::display::DisplayObject value);
		::Dynamic set_alternateBackgroundSkin_dyn();

		 ::openfl::display::DisplayObject clearStyle_alternateBackgroundSkin();
		::Dynamic clearStyle_alternateBackgroundSkin_dyn();

		bool _hx___showSecondaryText;
		bool get_showSecondaryText();
		::Dynamic get_showSecondaryText_dyn();

		bool set_showSecondaryText(bool value);
		::Dynamic set_showSecondaryText_dyn();

		bool clearStyle_showSecondaryText();
		::Dynamic clearStyle_showSecondaryText_dyn();

		 ::openfl::display::DisplayObject _hx___accessoryView;
		 ::openfl::display::DisplayObject get_accessoryView();
		::Dynamic get_accessoryView_dyn();

		 ::openfl::display::DisplayObject set_accessoryView( ::openfl::display::DisplayObject value);
		::Dynamic set_accessoryView_dyn();

		 ::openfl::display::DisplayObject clearStyle_accessoryView();
		::Dynamic clearStyle_accessoryView_dyn();

		::hx::Class get_styleContext();

};

} // end namespace feathers
} // end namespace controls
} // end namespace dataRenderers

#endif /* INCLUDED_feathers_controls_dataRenderers_ItemRenderer */ 
