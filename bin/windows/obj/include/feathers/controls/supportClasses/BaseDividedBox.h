// Generated by Haxe 4.3.1
#ifndef INCLUDED_feathers_controls_supportClasses_BaseDividedBox
#define INCLUDED_feathers_controls_supportClasses_BaseDividedBox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
HX_DECLARE_CLASS3(feathers,controls,supportClasses,BaseDividedBox)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,layout,AutoSizeMode)
HX_DECLARE_CLASS2(feathers,layout,ILayout)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,layout,LayoutBoundsResult)
HX_DECLARE_CLASS2(feathers,layout,Measurements)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS2(feathers,utils,DisplayObjectFactory)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,events,TouchEvent)

namespace feathers{
namespace controls{
namespace supportClasses{


class HXCPP_CLASS_ATTRIBUTES BaseDividedBox_obj : public  ::feathers::core::FeathersControl_obj
{
	public:
		typedef  ::feathers::core::FeathersControl_obj super;
		typedef BaseDividedBox_obj OBJ_;
		BaseDividedBox_obj();

	public:
		enum { _hx_ClassId = 0x28751316 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="feathers.controls.supportClasses.BaseDividedBox")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"feathers.controls.supportClasses.BaseDividedBox"); }
		static ::hx::ObjectPtr< BaseDividedBox_obj > __new();
		static ::hx::ObjectPtr< BaseDividedBox_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BaseDividedBox_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BaseDividedBox",91,4b,2c,69); }

		static void __boot();
		static  ::Dynamic __meta__;
		static int POINTER_ID_MOUSE;
		static  ::feathers::utils::DisplayObjectFactory defaultDividerFactory;
		::String resizeCursor;
		::String _oldDividerMouseCursor;
		 ::Dynamic _resizingTouchPointID;
		bool _resizingTouchPointIsMouse;
		int _resizingDividerIndex;
		 ::feathers::layout::AutoSizeMode _autoSizeMode;
		 ::feathers::layout::AutoSizeMode get_autoSizeMode();
		::Dynamic get_autoSizeMode_dyn();

		 ::feathers::layout::AutoSizeMode set_autoSizeMode( ::feathers::layout::AutoSizeMode value);
		::Dynamic set_autoSizeMode_dyn();

		 ::openfl::display::DisplayObject _currentBackgroundSkin;
		 ::feathers::layout::Measurements _backgroundSkinMeasurements;
		 ::openfl::display::DisplayObject _currentResizeDraggingSkin;
		bool liveDragging;
		 ::feathers::utils::DisplayObjectFactory _dividerFactory;
		 ::feathers::utils::DisplayObjectFactory get_dividerFactory();
		::Dynamic get_dividerFactory_dyn();

		 ::feathers::utils::DisplayObjectFactory set_dividerFactory( ::feathers::utils::DisplayObjectFactory value);
		::Dynamic set_dividerFactory_dyn();

		::Array< ::Dynamic> items;
		::Array< ::Dynamic> dividers;
		::Array< ::Dynamic> _layoutItems;
		bool _displayListBypassEnabled;
		bool _ignoreChildChanges;
		 ::feathers::layout::Measurements _layoutMeasurements;
		 ::feathers::layout::LayoutBoundsResult _layoutResult;
		::Dynamic layout;
		::Array< ::Dynamic> _xmlContent;
		::Array< ::Dynamic> get_xmlContent();
		::Dynamic get_xmlContent_dyn();

		::Array< ::Dynamic> set_xmlContent(::Array< ::Dynamic> value);
		::Dynamic set_xmlContent_dyn();

		int get_numRawChildren();
		::Dynamic get_numRawChildren_dyn();

		int get_numChildren();

		 ::openfl::display::DisplayObject addChild( ::openfl::display::DisplayObject child);

		 ::openfl::display::DisplayObject addChildAt( ::openfl::display::DisplayObject child,int index);

		 ::openfl::display::DisplayObject removeChild( ::openfl::display::DisplayObject child);

		 ::openfl::display::DisplayObject removeChildAt(int index);

		 ::openfl::display::DisplayObject getChildAt(int index);

		int getChildIndex( ::openfl::display::DisplayObject child);

		void setChildIndex( ::openfl::display::DisplayObject child,int index);

		 ::openfl::display::DisplayObject getChildByName(::String name);

		void removeChildren(::hx::Null< int >  beginIndex,::hx::Null< int >  endIndex);

		 ::openfl::display::DisplayObject addRawChild( ::openfl::display::DisplayObject child);
		::Dynamic addRawChild_dyn();

		 ::openfl::display::DisplayObject addRawChildAt( ::openfl::display::DisplayObject child,int index);
		::Dynamic addRawChildAt_dyn();

		 ::openfl::display::DisplayObject removeRawChild( ::openfl::display::DisplayObject child);
		::Dynamic removeRawChild_dyn();

		 ::openfl::display::DisplayObject removeRawChildAt(int index);
		::Dynamic removeRawChildAt_dyn();

		 ::openfl::display::DisplayObject getRawChildByName(::String name);
		::Dynamic getRawChildByName_dyn();

		 ::openfl::display::DisplayObject getRawChildAt(int index);
		::Dynamic getRawChildAt_dyn();

		int getRawChildIndex( ::openfl::display::DisplayObject child);
		::Dynamic getRawChildIndex_dyn();

		void setRawChildIndex( ::openfl::display::DisplayObject child,int index);
		::Dynamic setRawChildIndex_dyn();

		void removeRawChildren(::hx::Null< int >  beginIndex,::hx::Null< int >  endIndex);
		::Dynamic removeRawChildren_dyn();

		virtual  ::openfl::display::DisplayObject addItemAt( ::openfl::display::DisplayObject child,int index);
		::Dynamic addItemAt_dyn();

		virtual  ::openfl::display::DisplayObject removeItem( ::openfl::display::DisplayObject child);
		::Dynamic removeItem_dyn();

		void update();

		void refreshBackgroundSkin();
		::Dynamic refreshBackgroundSkin_dyn();

		 ::openfl::display::DisplayObject getCurrentBackgroundSkin();
		::Dynamic getCurrentBackgroundSkin_dyn();

		void addCurrentBackgroundSkin( ::openfl::display::DisplayObject skin);
		::Dynamic addCurrentBackgroundSkin_dyn();

		void removeCurrentBackgroundSkin( ::openfl::display::DisplayObject skin);
		::Dynamic removeCurrentBackgroundSkin_dyn();

		void refreshResizeDraggingSkin();
		::Dynamic refreshResizeDraggingSkin_dyn();

		 ::openfl::display::DisplayObject getCurrentResizeDraggingSkin();
		::Dynamic getCurrentResizeDraggingSkin_dyn();

		void removeCurrentResizeDraggingSkin( ::openfl::display::DisplayObject skin);
		::Dynamic removeCurrentResizeDraggingSkin_dyn();

		 ::openfl::display::InteractiveObject createDivider();
		::Dynamic createDivider_dyn();

		void destroyDivider( ::openfl::display::InteractiveObject divider, ::feathers::utils::DisplayObjectFactory factory);
		::Dynamic destroyDivider_dyn();

		void refreshViewPortBounds();
		::Dynamic refreshViewPortBounds_dyn();

		virtual void handleLayout();
		::Dynamic handleLayout_dyn();

		void handleLayoutResult();
		::Dynamic handleLayoutResult_dyn();

		void refreshBackgroundLayout();
		::Dynamic refreshBackgroundLayout_dyn();

		void validateChildren();
		::Dynamic validateChildren_dyn();

		virtual void prepareResize(int dividerIndex,Float stageX,Float stageY);
		::Dynamic prepareResize_dyn();

		virtual void commitResize(int dividerIndex,Float stageX,Float stageY,bool live);
		::Dynamic commitResize_dyn();

		void resizeTouchBegin(int touchPointID,bool isMouse, ::openfl::display::InteractiveObject divider,Float stageX,Float stageY);
		::Dynamic resizeTouchBegin_dyn();

		void resizeTouchMove(int touchPointID,bool isMouse,Float stageX,Float stageY);
		::Dynamic resizeTouchMove_dyn();

		void resizeTouchEnd(int touchPointID,bool isMouse,Float stageX,Float stageY);
		::Dynamic resizeTouchEnd_dyn();

		void baseDividedBox_child_resizeHandler( ::openfl::events::Event event);
		::Dynamic baseDividedBox_child_resizeHandler_dyn();

		void baseDividedBox_addedToStageHandler( ::openfl::events::Event event);
		::Dynamic baseDividedBox_addedToStageHandler_dyn();

		void baseDividedBox_removedFromStageHandler( ::openfl::events::Event event);
		::Dynamic baseDividedBox_removedFromStageHandler_dyn();

		void baseDividedBox_stage_resizeHandler( ::openfl::events::Event event);
		::Dynamic baseDividedBox_stage_resizeHandler_dyn();

		void baseDividedBox_divider_rollOverHandler( ::openfl::events::MouseEvent event);
		::Dynamic baseDividedBox_divider_rollOverHandler_dyn();

		void baseDividedBox_divider_rollOutHandler( ::openfl::events::MouseEvent event);
		::Dynamic baseDividedBox_divider_rollOutHandler_dyn();

		void baseDividedBox_divider_mouseDownHandler( ::openfl::events::MouseEvent event);
		::Dynamic baseDividedBox_divider_mouseDownHandler_dyn();

		void baseDividedBox_divider_stage_mouseMoveHandler( ::openfl::events::MouseEvent event);
		::Dynamic baseDividedBox_divider_stage_mouseMoveHandler_dyn();

		void baseDividedBox_divider_stage_mouseUpHandler( ::openfl::events::MouseEvent event);
		::Dynamic baseDividedBox_divider_stage_mouseUpHandler_dyn();

		void baseDividedBox_divider_touchBeginHandler( ::openfl::events::TouchEvent event);
		::Dynamic baseDividedBox_divider_touchBeginHandler_dyn();

		void baseDividedBox_divider_stage_touchMoveHandler( ::openfl::events::TouchEvent event);
		::Dynamic baseDividedBox_divider_stage_touchMoveHandler_dyn();

		void baseDividedBox_divider_stage_touchEndHandler( ::openfl::events::TouchEvent event);
		::Dynamic baseDividedBox_divider_stage_touchEndHandler_dyn();

		 ::openfl::display::DisplayObject _hx___backgroundSkin;
		 ::openfl::display::DisplayObject get_backgroundSkin();
		::Dynamic get_backgroundSkin_dyn();

		 ::openfl::display::DisplayObject set_backgroundSkin( ::openfl::display::DisplayObject value);
		::Dynamic set_backgroundSkin_dyn();

		 ::openfl::display::DisplayObject clearStyle_backgroundSkin();
		::Dynamic clearStyle_backgroundSkin_dyn();

		 ::openfl::display::DisplayObject _hx___disabledBackgroundSkin;
		 ::openfl::display::DisplayObject get_disabledBackgroundSkin();
		::Dynamic get_disabledBackgroundSkin_dyn();

		 ::openfl::display::DisplayObject set_disabledBackgroundSkin( ::openfl::display::DisplayObject value);
		::Dynamic set_disabledBackgroundSkin_dyn();

		 ::openfl::display::DisplayObject clearStyle_disabledBackgroundSkin();
		::Dynamic clearStyle_disabledBackgroundSkin_dyn();

		 ::openfl::display::DisplayObject _hx___resizeDraggingSkin;
		 ::openfl::display::DisplayObject get_resizeDraggingSkin();
		::Dynamic get_resizeDraggingSkin_dyn();

		 ::openfl::display::DisplayObject set_resizeDraggingSkin( ::openfl::display::DisplayObject value);
		::Dynamic set_resizeDraggingSkin_dyn();

		 ::openfl::display::DisplayObject clearStyle_resizeDraggingSkin();
		::Dynamic clearStyle_resizeDraggingSkin_dyn();

};

} // end namespace feathers
} // end namespace controls
} // end namespace supportClasses

#endif /* INCLUDED_feathers_controls_supportClasses_BaseDividedBox */ 
