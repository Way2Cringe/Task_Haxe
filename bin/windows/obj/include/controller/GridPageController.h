// Generated by Haxe 4.3.1
#ifndef INCLUDED_controller_GridPageController
#define INCLUDED_controller_GridPageController

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(controller,GridPageController)
HX_DECLARE_CLASS1(model,GridPageModel)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(view,GridPageView)

namespace controller{


class HXCPP_CLASS_ATTRIBUTES GridPageController_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef GridPageController_obj OBJ_;
		GridPageController_obj();

	public:
		enum { _hx_ClassId = 0x02e2a16d };

		void __construct(int Id, ::openfl::display::DisplayObjectContainer display);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="controller.GridPageController")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"controller.GridPageController"); }
		static ::hx::ObjectPtr< GridPageController_obj > __new(int Id, ::openfl::display::DisplayObjectContainer display);
		static ::hx::ObjectPtr< GridPageController_obj > __alloc(::hx::Ctx *_hx_ctx,int Id, ::openfl::display::DisplayObjectContainer display);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GridPageController_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GridPageController",51,ad,a4,da); }

		 ::model::GridPageModel model;
		 ::view::GridPageView view;
		::Array< ::Dynamic> listeners;
		void onGridButtonClick(int id);
		::Dynamic onGridButtonClick_dyn();

		void addGridButtonClickEventListener( ::Dynamic listener);
		::Dynamic addGridButtonClickEventListener_dyn();

		void removeGridButtonClickEventListener( ::Dynamic listener);
		::Dynamic removeGridButtonClickEventListener_dyn();

};

} // end namespace controller

#endif /* INCLUDED_controller_GridPageController */ 
