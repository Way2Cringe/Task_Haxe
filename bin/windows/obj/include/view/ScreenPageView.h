// Generated by Haxe 4.3.1
#ifndef INCLUDED_view_ScreenPageView
#define INCLUDED_view_ScreenPageView

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(feathers,controls,Label)
HX_DECLARE_CLASS2(feathers,controls,ScrollContainer)
HX_DECLARE_CLASS3(feathers,controls,supportClasses,BaseScrollContainer)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IFocusContainer)
HX_DECLARE_CLASS2(feathers,core,IFocusManagerAware)
HX_DECLARE_CLASS2(feathers,core,IFocusObject)
HX_DECLARE_CLASS2(feathers,core,IHTMLTextControl)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IStageFocusDelegate)
HX_DECLARE_CLASS2(feathers,core,ITextControl)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS1(model,ScreenPageModel)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(view,ScreenPageView)

namespace view{


class HXCPP_CLASS_ATTRIBUTES ScreenPageView_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ScreenPageView_obj OBJ_;
		ScreenPageView_obj();

	public:
		enum { _hx_ClassId = 0x12365cad };

		void __construct( ::model::ScreenPageModel model, ::openfl::display::DisplayObjectContainer display);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="view.ScreenPageView")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"view.ScreenPageView"); }
		static ::hx::ObjectPtr< ScreenPageView_obj > __new( ::model::ScreenPageModel model, ::openfl::display::DisplayObjectContainer display);
		static ::hx::ObjectPtr< ScreenPageView_obj > __alloc(::hx::Ctx *_hx_ctx, ::model::ScreenPageModel model, ::openfl::display::DisplayObjectContainer display);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ScreenPageView_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ScreenPageView",00,e4,86,e8); }

		 ::model::ScreenPageModel model;
		 ::openfl::display::DisplayObjectContainer display;
		 ::feathers::controls::ScrollContainer scrollContainer;
		 ::feathers::controls::Label title;
		 ::feathers::controls::Label content;
		void Draw();
		::Dynamic Draw_dyn();

		void onStageResize( ::openfl::events::Event event);
		::Dynamic onStageResize_dyn();

};

} // end namespace view

#endif /* INCLUDED_view_ScreenPageView */ 
