// Generated by Haxe 4.3.1
#ifndef INCLUDED_view_GridPageView
#define INCLUDED_view_GridPageView

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(feathers,controls,BasicButton)
HX_DECLARE_CLASS2(feathers,controls,Button)
HX_DECLARE_CLASS2(feathers,controls,ITriggerView)
HX_DECLARE_CLASS2(feathers,controls,ScrollContainer)
HX_DECLARE_CLASS3(feathers,controls,supportClasses,BaseScrollContainer)
HX_DECLARE_CLASS2(feathers,core,FeathersControl)
HX_DECLARE_CLASS2(feathers,core,IDisplayObject)
HX_DECLARE_CLASS2(feathers,core,IFocusContainer)
HX_DECLARE_CLASS2(feathers,core,IFocusManagerAware)
HX_DECLARE_CLASS2(feathers,core,IFocusObject)
HX_DECLARE_CLASS2(feathers,core,IHTMLTextControl)
HX_DECLARE_CLASS2(feathers,core,IMeasureObject)
HX_DECLARE_CLASS2(feathers,core,IStateContext)
HX_DECLARE_CLASS2(feathers,core,ITextControl)
HX_DECLARE_CLASS2(feathers,core,IUIControl)
HX_DECLARE_CLASS2(feathers,core,IValidating)
HX_DECLARE_CLASS2(feathers,core,MeasureSprite)
HX_DECLARE_CLASS2(feathers,core,ValidatingSprite)
HX_DECLARE_CLASS2(feathers,layout,ILayoutObject)
HX_DECLARE_CLASS2(feathers,style,IStyleObject)
HX_DECLARE_CLASS2(feathers,style,IVariantStyleObject)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(model,GridPageModel)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS1(view,GridPageView)

namespace view{


class HXCPP_CLASS_ATTRIBUTES GridPageView_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef GridPageView_obj OBJ_;
		GridPageView_obj();

	public:
		enum { _hx_ClassId = 0x5c720fff };

		void __construct( ::model::GridPageModel model, ::openfl::display::DisplayObjectContainer display);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="view.GridPageView")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"view.GridPageView"); }
		static ::hx::ObjectPtr< GridPageView_obj > __new( ::model::GridPageModel model, ::openfl::display::DisplayObjectContainer display);
		static ::hx::ObjectPtr< GridPageView_obj > __alloc(::hx::Ctx *_hx_ctx, ::model::GridPageModel model, ::openfl::display::DisplayObjectContainer display);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GridPageView_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GridPageView",5a,21,c4,14); }

		static void __boot();
		static Float layoutGap;
		static Float buttonHeight;
		 ::model::GridPageModel model;
		 ::openfl::display::DisplayObjectContainer display;
		 ::feathers::controls::ScrollContainer scrollContainer;
		 ::haxe::ds::StringMap listeners;
		::Array< ::Dynamic> buttons;
		void Draw();
		::Dynamic Draw_dyn();

		void onStageResize( ::openfl::events::Event event);
		::Dynamic onStageResize_dyn();

		void resize();
		::Dynamic resize_dyn();

		void onButtonClick( ::openfl::events::Event event);
		::Dynamic onButtonClick_dyn();

		void addEventListener(::String eventType, ::Dynamic listener);
		::Dynamic addEventListener_dyn();

};

} // end namespace view

#endif /* INCLUDED_view_GridPageView */ 
