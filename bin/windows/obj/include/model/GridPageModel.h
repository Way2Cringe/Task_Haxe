// Generated by Haxe 4.3.1
#ifndef INCLUDED_model_GridPageModel
#define INCLUDED_model_GridPageModel

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(model,GridButtonModel)
HX_DECLARE_CLASS1(model,GridPageModel)

namespace model{


class HXCPP_CLASS_ATTRIBUTES GridPageModel_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef GridPageModel_obj OBJ_;
		GridPageModel_obj();

	public:
		enum { _hx_ClassId = 0x2e1fd58b };

		void __construct(int id,::Array< ::Dynamic> buttons);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="model.GridPageModel")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"model.GridPageModel"); }
		static ::hx::ObjectPtr< GridPageModel_obj > __new(int id,::Array< ::Dynamic> buttons);
		static ::hx::ObjectPtr< GridPageModel_obj > __alloc(::hx::Ctx *_hx_ctx,int id,::Array< ::Dynamic> buttons);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GridPageModel_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GridPageModel",14,4b,34,ec); }

		int id;
		::Array< ::Dynamic> buttons;
};

} // end namespace model

#endif /* INCLUDED_model_GridPageModel */ 
