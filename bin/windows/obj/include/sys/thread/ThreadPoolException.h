// Generated by Haxe 4.3.1
#ifndef INCLUDED_sys_thread_ThreadPoolException
#define INCLUDED_sys_thread_ThreadPoolException

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_a775eff7ecb8cf70_5_new)
HX_DECLARE_CLASS1(haxe,Exception)
HX_DECLARE_CLASS2(sys,thread,ThreadPoolException)

namespace sys{
namespace thread{


class HXCPP_CLASS_ATTRIBUTES ThreadPoolException_obj : public  ::haxe::Exception_obj
{
	public:
		typedef  ::haxe::Exception_obj super;
		typedef ThreadPoolException_obj OBJ_;
		ThreadPoolException_obj();

	public:
		enum { _hx_ClassId = 0x15d515be };

		void __construct(::String message, ::haxe::Exception previous, ::Dynamic native);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="sys.thread.ThreadPoolException")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"sys.thread.ThreadPoolException"); }

		inline static ::hx::ObjectPtr< ThreadPoolException_obj > __new(::String message, ::haxe::Exception previous, ::Dynamic native) {
			::hx::ObjectPtr< ThreadPoolException_obj > __this = new ThreadPoolException_obj();
			__this->__construct(message,previous,native);
			return __this;
		}

		inline static ::hx::ObjectPtr< ThreadPoolException_obj > __alloc(::hx::Ctx *_hx_ctx,::String message, ::haxe::Exception previous, ::Dynamic native) {
			ThreadPoolException_obj *__this = (ThreadPoolException_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ThreadPoolException_obj), true, "sys.thread.ThreadPoolException"));
			*(void **)__this = ThreadPoolException_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_a775eff7ecb8cf70_5_new)
HXDLIN(   5)		__this->super::__construct(message,previous,native);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ThreadPoolException_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ThreadPoolException",89,4a,f3,bf); }

};

} // end namespace sys
} // end namespace thread

#endif /* INCLUDED_sys_thread_ThreadPoolException */ 
