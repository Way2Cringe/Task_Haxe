// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_events_FeathersEvent
#include <feathers/events/FeathersEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_HorizontalAlign
#include <feathers/layout/HorizontalAlign.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayout
#include <feathers/layout/ILayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutData
#include <feathers/layout/ILayoutData.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_LayoutBoundsResult
#include <feathers/layout/LayoutBoundsResult.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalAlign
#include <feathers/layout/VerticalAlign.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalLayout
#include <feathers/layout/VerticalLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalLayoutData
#include <feathers/layout/VerticalLayoutData.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5975719ac55134c6_31_new,"feathers.layout.VerticalLayout","new",0x7288d718,"feathers.layout.VerticalLayout.new","feathers/layout/VerticalLayout.hx",31,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_61_get_paddingTop,"feathers.layout.VerticalLayout","get_paddingTop",0xee0f09d5,"feathers.layout.VerticalLayout.get_paddingTop","feathers/layout/VerticalLayout.hx",61,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_64_set_paddingTop,"feathers.layout.VerticalLayout","set_paddingTop",0x0e2ef249,"feathers.layout.VerticalLayout.set_paddingTop","feathers/layout/VerticalLayout.hx",64,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_93_get_paddingRight,"feathers.layout.VerticalLayout","get_paddingRight",0xac79ff1c,"feathers.layout.VerticalLayout.get_paddingRight","feathers/layout/VerticalLayout.hx",93,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_96_set_paddingRight,"feathers.layout.VerticalLayout","set_paddingRight",0x02bbec90,"feathers.layout.VerticalLayout.set_paddingRight","feathers/layout/VerticalLayout.hx",96,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_125_get_paddingBottom,"feathers.layout.VerticalLayout","get_paddingBottom",0x5597cbab,"feathers.layout.VerticalLayout.get_paddingBottom","feathers/layout/VerticalLayout.hx",125,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_128_set_paddingBottom,"feathers.layout.VerticalLayout","set_paddingBottom",0x7905a3b7,"feathers.layout.VerticalLayout.set_paddingBottom","feathers/layout/VerticalLayout.hx",128,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_157_get_paddingLeft,"feathers.layout.VerticalLayout","get_paddingLeft",0x59c83cc7,"feathers.layout.VerticalLayout.get_paddingLeft","feathers/layout/VerticalLayout.hx",157,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_160_set_paddingLeft,"feathers.layout.VerticalLayout","set_paddingLeft",0x5593b9d3,"feathers.layout.VerticalLayout.set_paddingLeft","feathers/layout/VerticalLayout.hx",160,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_195_get_gap,"feathers.layout.VerticalLayout","get_gap",0xb0ae0865,"feathers.layout.VerticalLayout.get_gap","feathers/layout/VerticalLayout.hx",195,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_198_set_gap,"feathers.layout.VerticalLayout","set_gap",0xa3af9971,"feathers.layout.VerticalLayout.set_gap","feathers/layout/VerticalLayout.hx",198,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_230_get_minGap,"feathers.layout.VerticalLayout","get_minGap",0xfcc61ab5,"feathers.layout.VerticalLayout.get_minGap","feathers/layout/VerticalLayout.hx",230,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_233_set_minGap,"feathers.layout.VerticalLayout","set_minGap",0x0043b929,"feathers.layout.VerticalLayout.set_minGap","feathers/layout/VerticalLayout.hx",233,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_267_get_horizontalAlign,"feathers.layout.VerticalLayout","get_horizontalAlign",0x41d25510,"feathers.layout.VerticalLayout.get_horizontalAlign","feathers/layout/VerticalLayout.hx",267,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_270_set_horizontalAlign,"feathers.layout.VerticalLayout","set_horizontalAlign",0x7e6f481c,"feathers.layout.VerticalLayout.set_horizontalAlign","feathers/layout/VerticalLayout.hx",270,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_308_get_verticalAlign,"feathers.layout.VerticalLayout","get_verticalAlign",0xea7a827e,"feathers.layout.VerticalLayout.get_verticalAlign","feathers/layout/VerticalLayout.hx",308,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_311_set_verticalAlign,"feathers.layout.VerticalLayout","set_verticalAlign",0x0de85a8a,"feathers.layout.VerticalLayout.set_verticalAlign","feathers/layout/VerticalLayout.hx",311,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_335_get_justifyResetEnabled,"feathers.layout.VerticalLayout","get_justifyResetEnabled",0x5b748731,"feathers.layout.VerticalLayout.get_justifyResetEnabled","feathers/layout/VerticalLayout.hx",335,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_338_set_justifyResetEnabled,"feathers.layout.VerticalLayout","set_justifyResetEnabled",0x5dd5f03d,"feathers.layout.VerticalLayout.set_justifyResetEnabled","feathers/layout/VerticalLayout.hx",338,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_366_get_percentWidthResetEnabled,"feathers.layout.VerticalLayout","get_percentWidthResetEnabled",0x9ffe6d64,"feathers.layout.VerticalLayout.get_percentWidthResetEnabled","feathers/layout/VerticalLayout.hx",366,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_369_set_percentWidthResetEnabled,"feathers.layout.VerticalLayout","set_percentWidthResetEnabled",0xa328b8d8,"feathers.layout.VerticalLayout.set_percentWidthResetEnabled","feathers/layout/VerticalLayout.hx",369,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_397_get_percentHeightResetEnabled,"feathers.layout.VerticalLayout","get_percentHeightResetEnabled",0x8038ffad,"feathers.layout.VerticalLayout.get_percentHeightResetEnabled","feathers/layout/VerticalLayout.hx",397,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_400_set_percentHeightResetEnabled,"feathers.layout.VerticalLayout","set_percentHeightResetEnabled",0x4210b9b9,"feathers.layout.VerticalLayout.set_percentHeightResetEnabled","feathers/layout/VerticalLayout.hx",400,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_419_setPadding,"feathers.layout.VerticalLayout","setPadding",0xdcb63e97,"feathers.layout.VerticalLayout.setPadding","feathers/layout/VerticalLayout.hx",419,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_429_layout,"feathers.layout.VerticalLayout","layout",0xe68aaaf2,"feathers.layout.VerticalLayout.layout","feathers/layout/VerticalLayout.hx",429,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_517_validateItems,"feathers.layout.VerticalLayout","validateItems",0xeae20842,"feathers.layout.VerticalLayout.validateItems","feathers/layout/VerticalLayout.hx",517,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_578_applyHorizontalAlign,"feathers.layout.VerticalLayout","applyHorizontalAlign",0x18bf47bb,"feathers.layout.VerticalLayout.applyHorizontalAlign","feathers/layout/VerticalLayout.hx",578,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_602_applyVerticalAlign,"feathers.layout.VerticalLayout","applyVerticalAlign",0x0f1ae469,"feathers.layout.VerticalLayout.applyVerticalAlign","feathers/layout/VerticalLayout.hx",602,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_644_applyPercentWidth,"feathers.layout.VerticalLayout","applyPercentWidth",0xd060e847,"feathers.layout.VerticalLayout.applyPercentWidth","feathers/layout/VerticalLayout.hx",644,0xd5e7bd38)
HX_LOCAL_STACK_FRAME(_hx_pos_5975719ac55134c6_691_applyPercentHeight,"feathers.layout.VerticalLayout","applyPercentHeight",0x3ab9ce86,"feathers.layout.VerticalLayout.applyPercentHeight","feathers/layout/VerticalLayout.hx",691,0xd5e7bd38)
namespace feathers{
namespace layout{

void VerticalLayout_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_31_new)
HXLINE( 378)		this->_percentHeightResetEnabled = false;
HXLINE( 347)		this->_percentWidthResetEnabled = false;
HXLINE( 320)		this->_justifyResetEnabled = false;
HXLINE( 279)		this->_verticalAlign = ::feathers::layout::VerticalAlign_obj::TOP_dyn();
HXLINE( 242)		this->_horizontalAlign = ::feathers::layout::HorizontalAlign_obj::LEFT_dyn();
HXLINE( 207)		this->_minGap = ((Float)0.0);
HXLINE( 169)		this->_gap = ((Float)0.0);
HXLINE( 137)		this->_paddingLeft = ((Float)0.0);
HXLINE( 105)		this->_paddingBottom = ((Float)0.0);
HXLINE(  73)		this->_paddingRight = ((Float)0.0);
HXLINE(  41)		this->_paddingTop = ((Float)0.0);
HXLINE(  38)		super::__construct(null());
            	}

Dynamic VerticalLayout_obj::__CreateEmpty() { return new VerticalLayout_obj; }

void *VerticalLayout_obj::_hx_vtable = 0;

Dynamic VerticalLayout_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VerticalLayout_obj > _hx_result = new VerticalLayout_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VerticalLayout_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x253843e6;
	}
}

static ::openfl::events::IEventDispatcher_obj _hx_feathers_layout_VerticalLayout__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::VerticalLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::VerticalLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::VerticalLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalLayout_obj::willTrigger,
};

static ::feathers::layout::ILayout_obj _hx_feathers_layout_VerticalLayout__hx_feathers_layout_ILayout= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::VerticalLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::VerticalLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::VerticalLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalLayout_obj::willTrigger,
	(  ::feathers::layout::LayoutBoundsResult (::hx::Object::*)(::Array< ::Dynamic>, ::feathers::layout::Measurements, ::feathers::layout::LayoutBoundsResult))&::feathers::layout::VerticalLayout_obj::layout,
};

void *VerticalLayout_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x87530281: return &_hx_feathers_layout_VerticalLayout__hx_openfl_events_IEventDispatcher;
		case (int)0x3e135379: return &_hx_feathers_layout_VerticalLayout__hx_feathers_layout_ILayout;
	}
	return super::_hx_getInterface(inHash);
}

Float VerticalLayout_obj::get_paddingTop(){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_61_get_paddingTop)
HXDLIN(  61)		return this->_paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalLayout_obj,get_paddingTop,return )

Float VerticalLayout_obj::set_paddingTop(Float value){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_64_set_paddingTop)
HXLINE(  65)		if ((this->_paddingTop == value)) {
HXLINE(  66)			return this->_paddingTop;
            		}
HXLINE(  68)		this->_paddingTop = value;
HXLINE(  69)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE(  70)		return this->_paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalLayout_obj,set_paddingTop,return )

Float VerticalLayout_obj::get_paddingRight(){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_93_get_paddingRight)
HXDLIN(  93)		return this->_paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalLayout_obj,get_paddingRight,return )

Float VerticalLayout_obj::set_paddingRight(Float value){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_96_set_paddingRight)
HXLINE(  97)		if ((this->_paddingRight == value)) {
HXLINE(  98)			return this->_paddingRight;
            		}
HXLINE( 100)		this->_paddingRight = value;
HXLINE( 101)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 102)		return this->_paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalLayout_obj,set_paddingRight,return )

Float VerticalLayout_obj::get_paddingBottom(){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_125_get_paddingBottom)
HXDLIN( 125)		return this->_paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalLayout_obj,get_paddingBottom,return )

Float VerticalLayout_obj::set_paddingBottom(Float value){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_128_set_paddingBottom)
HXLINE( 129)		if ((this->_paddingBottom == value)) {
HXLINE( 130)			return this->_paddingBottom;
            		}
HXLINE( 132)		this->_paddingBottom = value;
HXLINE( 133)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 134)		return this->_paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalLayout_obj,set_paddingBottom,return )

Float VerticalLayout_obj::get_paddingLeft(){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_157_get_paddingLeft)
HXDLIN( 157)		return this->_paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalLayout_obj,get_paddingLeft,return )

Float VerticalLayout_obj::set_paddingLeft(Float value){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_160_set_paddingLeft)
HXLINE( 161)		if ((this->_paddingLeft == value)) {
HXLINE( 162)			return this->_paddingLeft;
            		}
HXLINE( 164)		this->_paddingLeft = value;
HXLINE( 165)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 166)		return this->_paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalLayout_obj,set_paddingLeft,return )

Float VerticalLayout_obj::get_gap(){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_195_get_gap)
HXDLIN( 195)		return this->_gap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalLayout_obj,get_gap,return )

Float VerticalLayout_obj::set_gap(Float value){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_198_set_gap)
HXLINE( 199)		if ((this->_gap == value)) {
HXLINE( 200)			return this->_gap;
            		}
HXLINE( 202)		this->_gap = value;
HXLINE( 203)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 204)		return this->_gap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalLayout_obj,set_gap,return )

Float VerticalLayout_obj::get_minGap(){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_230_get_minGap)
HXDLIN( 230)		return this->_minGap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalLayout_obj,get_minGap,return )

Float VerticalLayout_obj::set_minGap(Float value){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_233_set_minGap)
HXLINE( 234)		if ((this->_minGap == value)) {
HXLINE( 235)			return this->_minGap;
            		}
HXLINE( 237)		this->_minGap = value;
HXLINE( 238)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 239)		return this->_minGap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalLayout_obj,set_minGap,return )

 ::feathers::layout::HorizontalAlign VerticalLayout_obj::get_horizontalAlign(){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_267_get_horizontalAlign)
HXDLIN( 267)		return this->_horizontalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalLayout_obj,get_horizontalAlign,return )

 ::feathers::layout::HorizontalAlign VerticalLayout_obj::set_horizontalAlign( ::feathers::layout::HorizontalAlign value){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_270_set_horizontalAlign)
HXLINE( 271)		if (::hx::IsPointerEq( this->_horizontalAlign,value )) {
HXLINE( 272)			return this->_horizontalAlign;
            		}
HXLINE( 274)		this->_horizontalAlign = value;
HXLINE( 275)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 276)		return this->_horizontalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalLayout_obj,set_horizontalAlign,return )

 ::feathers::layout::VerticalAlign VerticalLayout_obj::get_verticalAlign(){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_308_get_verticalAlign)
HXDLIN( 308)		return this->_verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalLayout_obj,get_verticalAlign,return )

 ::feathers::layout::VerticalAlign VerticalLayout_obj::set_verticalAlign( ::feathers::layout::VerticalAlign value){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_311_set_verticalAlign)
HXLINE( 312)		if (::hx::IsPointerEq( this->_verticalAlign,value )) {
HXLINE( 313)			return this->_verticalAlign;
            		}
HXLINE( 315)		this->_verticalAlign = value;
HXLINE( 316)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 317)		return this->_verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalLayout_obj,set_verticalAlign,return )

bool VerticalLayout_obj::get_justifyResetEnabled(){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_335_get_justifyResetEnabled)
HXDLIN( 335)		return this->_justifyResetEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalLayout_obj,get_justifyResetEnabled,return )

bool VerticalLayout_obj::set_justifyResetEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_338_set_justifyResetEnabled)
HXLINE( 339)		if ((this->_justifyResetEnabled == value)) {
HXLINE( 340)			return this->_justifyResetEnabled;
            		}
HXLINE( 342)		this->_justifyResetEnabled = value;
HXLINE( 343)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 344)		return this->_justifyResetEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalLayout_obj,set_justifyResetEnabled,return )

bool VerticalLayout_obj::get_percentWidthResetEnabled(){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_366_get_percentWidthResetEnabled)
HXDLIN( 366)		return this->_percentWidthResetEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalLayout_obj,get_percentWidthResetEnabled,return )

bool VerticalLayout_obj::set_percentWidthResetEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_369_set_percentWidthResetEnabled)
HXLINE( 370)		if ((this->_percentWidthResetEnabled == value)) {
HXLINE( 371)			return this->_percentWidthResetEnabled;
            		}
HXLINE( 373)		this->_percentWidthResetEnabled = value;
HXLINE( 374)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 375)		return this->_percentWidthResetEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalLayout_obj,set_percentWidthResetEnabled,return )

bool VerticalLayout_obj::get_percentHeightResetEnabled(){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_397_get_percentHeightResetEnabled)
HXDLIN( 397)		return this->_percentHeightResetEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalLayout_obj,get_percentHeightResetEnabled,return )

bool VerticalLayout_obj::set_percentHeightResetEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_400_set_percentHeightResetEnabled)
HXLINE( 401)		if ((this->_percentHeightResetEnabled == value)) {
HXLINE( 402)			return this->_percentHeightResetEnabled;
            		}
HXLINE( 404)		this->_percentHeightResetEnabled = value;
HXLINE( 405)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 406)		return this->_percentHeightResetEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalLayout_obj,set_percentHeightResetEnabled,return )

void VerticalLayout_obj::setPadding(Float value){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_419_setPadding)
HXLINE( 420)		this->set_paddingTop(value);
HXLINE( 421)		this->set_paddingRight(value);
HXLINE( 422)		this->set_paddingBottom(value);
HXLINE( 423)		this->set_paddingLeft(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalLayout_obj,setPadding,(void))

 ::feathers::layout::LayoutBoundsResult VerticalLayout_obj::layout(::Array< ::Dynamic> items, ::feathers::layout::Measurements measurements, ::feathers::layout::LayoutBoundsResult result){
            	HX_GC_STACKFRAME(&_hx_pos_5975719ac55134c6_429_layout)
HXLINE( 430)		Float adjustedGap = this->_gap;
HXLINE( 431)		bool hasFlexGap = (this->_gap == ::hx::DivByZero(((Float)1.0)));
HXLINE( 432)		if (hasFlexGap) {
HXLINE( 433)			adjustedGap = this->_minGap;
            		}
HXLINE( 436)		{
HXLINE( 436)			bool isJustified = ::hx::IsPointerEq( this->_horizontalAlign,::feathers::layout::HorizontalAlign_obj::JUSTIFY_dyn() );
HXDLIN( 436)			 ::Dynamic explicitContentWidth = measurements->width;
HXDLIN( 436)			if (::hx::IsNotNull( explicitContentWidth )) {
HXLINE( 436)				explicitContentWidth = (explicitContentWidth - (this->_paddingLeft + this->_paddingRight));
            			}
HXDLIN( 436)			 ::Dynamic explicitContentHeight = measurements->height;
HXDLIN( 436)			if (::hx::IsNotNull( explicitContentHeight )) {
HXLINE( 436)				explicitContentHeight = (explicitContentHeight - (this->_paddingTop + this->_paddingBottom));
            			}
HXDLIN( 436)			{
HXLINE( 436)				int _g = 0;
HXDLIN( 436)				while((_g < items->length)){
HXLINE( 436)					 ::openfl::display::DisplayObject item = items->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 436)					_g = (_g + 1);
HXDLIN( 436)					 ::Dynamic percentWidth = null();
HXDLIN( 436)					 ::Dynamic percentHeight = null();
HXDLIN( 436)					if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 436)						::Dynamic layoutItem =  ::hx::interface_check(item,0xf54ca718);
HXDLIN( 436)						if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutItem))) {
HXLINE( 436)							continue;
            						}
HXDLIN( 436)						 ::feathers::layout::VerticalLayoutData layoutData = ( ( ::feathers::layout::VerticalLayoutData)(::Std_obj::downcast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutItem),::hx::ClassOf< ::feathers::layout::VerticalLayoutData >())) );
HXDLIN( 436)						if (::hx::IsNotNull( layoutData )) {
HXLINE( 436)							percentWidth = layoutData->get_percentWidth();
HXDLIN( 436)							percentHeight = layoutData->get_percentHeight();
            						}
            					}
HXDLIN( 436)					if (isJustified) {
HXLINE( 436)						if (::hx::IsNotNull( explicitContentWidth )) {
HXLINE( 436)							item->set_width(( (Float)(explicitContentWidth) ));
            						}
            						else {
HXLINE( 436)							bool _hx_tmp;
HXDLIN( 436)							if (this->_justifyResetEnabled) {
HXLINE( 436)								_hx_tmp = ::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IMeasureObject >());
            							}
            							else {
HXLINE( 436)								_hx_tmp = false;
            							}
HXDLIN( 436)							if (_hx_tmp) {
HXLINE( 436)								::feathers::core::IMeasureObject_obj::resetWidth( ::hx::interface_check(item,0xcfc32883));
            							}
            						}
            					}
            					else {
HXLINE( 436)						if (::hx::IsNotNull( explicitContentWidth )) {
HXLINE( 436)							if (::hx::IsNotNull( percentWidth )) {
HXLINE( 436)								if (::hx::IsLess( percentWidth,((Float)0.0) )) {
HXLINE( 436)									percentWidth = ((Float)0.0);
            								}
            								else {
HXLINE( 436)									if (::hx::IsGreater( percentWidth,((Float)100.0) )) {
HXLINE( 436)										percentWidth = ((Float)100.0);
            									}
            								}
HXDLIN( 436)								item->set_width((( (Float)(explicitContentWidth) ) * (( (Float)(percentWidth) ) / ((Float)100.0))));
            							}
            						}
            						else {
HXLINE( 436)							bool _hx_tmp1;
HXDLIN( 436)							bool _hx_tmp2;
HXDLIN( 436)							if (::hx::IsNotNull( percentWidth )) {
HXLINE( 436)								_hx_tmp2 = this->_percentWidthResetEnabled;
            							}
            							else {
HXLINE( 436)								_hx_tmp2 = false;
            							}
HXDLIN( 436)							if (_hx_tmp2) {
HXLINE( 436)								_hx_tmp1 = ::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IMeasureObject >());
            							}
            							else {
HXLINE( 436)								_hx_tmp1 = false;
            							}
HXDLIN( 436)							if (_hx_tmp1) {
HXLINE( 436)								::feathers::core::IMeasureObject_obj::resetWidth( ::hx::interface_check(item,0xcfc32883));
            							}
            						}
            					}
HXDLIN( 436)					bool _hx_tmp3;
HXDLIN( 436)					bool _hx_tmp4;
HXDLIN( 436)					bool _hx_tmp5;
HXDLIN( 436)					if (::hx::IsNotNull( percentHeight )) {
HXLINE( 436)						_hx_tmp5 = this->_percentHeightResetEnabled;
            					}
            					else {
HXLINE( 436)						_hx_tmp5 = false;
            					}
HXDLIN( 436)					if (_hx_tmp5) {
HXLINE( 436)						_hx_tmp4 = ::hx::IsNull( explicitContentHeight );
            					}
            					else {
HXLINE( 436)						_hx_tmp4 = false;
            					}
HXDLIN( 436)					if (_hx_tmp4) {
HXLINE( 436)						_hx_tmp3 = ::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IMeasureObject >());
            					}
            					else {
HXLINE( 436)						_hx_tmp3 = false;
            					}
HXDLIN( 436)					if (_hx_tmp3) {
HXLINE( 436)						::feathers::core::IMeasureObject_obj::resetHeight( ::hx::interface_check(item,0xcfc32883));
            					}
HXDLIN( 436)					if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 436)						::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            					}
HXDLIN( 436)					bool _hx_tmp6;
HXDLIN( 436)					bool _hx_tmp7;
HXDLIN( 436)					if (isJustified) {
HXLINE( 436)						_hx_tmp7 = ::hx::IsNull( explicitContentWidth );
            					}
            					else {
HXLINE( 436)						_hx_tmp7 = false;
            					}
HXDLIN( 436)					if (_hx_tmp7) {
HXLINE( 436)						_hx_tmp6 = ::hx::IsNotNull( measurements->maxWidth );
            					}
            					else {
HXLINE( 436)						_hx_tmp6 = false;
            					}
HXDLIN( 436)					if (_hx_tmp6) {
HXLINE( 436)						Float maxExplicitContentWidth = ((( (Float)(measurements->maxWidth) ) - this->_paddingLeft) - this->_paddingRight);
HXDLIN( 436)						if ((item->get_width() > maxExplicitContentWidth)) {
HXLINE( 436)							item->set_width(maxExplicitContentWidth);
HXDLIN( 436)							if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 436)								::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 437)		this->applyPercentHeight(items,measurements->height,measurements->minHeight,measurements->maxHeight,adjustedGap);
HXLINE( 439)		Float contentWidth = ((Float)0.0);
HXLINE( 440)		Float contentHeight = this->_paddingTop;
HXLINE( 441)		{
HXLINE( 441)			int _g1 = 0;
HXDLIN( 441)			while((_g1 < items->length)){
HXLINE( 441)				 ::openfl::display::DisplayObject item1 = items->__get(_g1).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 441)				_g1 = (_g1 + 1);
HXLINE( 442)				 ::feathers::layout::VerticalLayoutData layoutData1 = null();
HXLINE( 443)				::Dynamic layoutObject = null();
HXLINE( 444)				if (::Std_obj::isOfType(item1,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 445)					layoutObject =  ::hx::interface_check(item1,0xf54ca718);
HXLINE( 446)					if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutObject))) {
HXLINE( 447)						continue;
            					}
HXLINE( 449)					layoutData1 = ( ( ::feathers::layout::VerticalLayoutData)(::Std_obj::downcast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutObject),::hx::ClassOf< ::feathers::layout::VerticalLayoutData >())) );
            				}
HXLINE( 451)				if (::Std_obj::isOfType(item1,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 452)					::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item1,0x64d4b3cd));
            				}
HXLINE( 454)				if ((contentWidth < item1->get_width())) {
HXLINE( 455)					contentWidth = item1->get_width();
            				}
HXLINE( 457)				bool _hx_tmp8;
HXDLIN( 457)				if (::hx::IsNotNull( layoutData1 )) {
HXLINE( 457)					_hx_tmp8 = ::hx::IsNotNull( layoutData1->get_marginTop() );
            				}
            				else {
HXLINE( 457)					_hx_tmp8 = false;
            				}
HXDLIN( 457)				if (_hx_tmp8) {
HXLINE( 458)					contentHeight = (contentHeight + layoutData1->get_marginTop());
            				}
HXLINE( 460)				item1->set_y(contentHeight);
HXLINE( 461)				contentHeight = (contentHeight + (item1->get_height() + adjustedGap));
HXLINE( 462)				bool _hx_tmp9;
HXDLIN( 462)				if (::hx::IsNotNull( layoutData1 )) {
HXLINE( 462)					_hx_tmp9 = ::hx::IsNotNull( layoutData1->get_marginBottom() );
            				}
            				else {
HXLINE( 462)					_hx_tmp9 = false;
            				}
HXDLIN( 462)				if (_hx_tmp9) {
HXLINE( 463)					contentHeight = (contentHeight + layoutData1->get_marginBottom());
            				}
            			}
            		}
HXLINE( 466)		Float maxItemWidth = contentWidth;
HXLINE( 467)		contentWidth = (contentWidth + (this->_paddingLeft + this->_paddingRight));
HXLINE( 468)		contentHeight = (contentHeight + this->_paddingBottom);
HXLINE( 469)		if ((items->length > 0)) {
HXLINE( 470)			contentHeight = (contentHeight - adjustedGap);
            		}
HXLINE( 473)		Float viewPortWidth = contentWidth;
HXLINE( 474)		if (::hx::IsNotNull( measurements->width )) {
HXLINE( 475)			viewPortWidth = ( (Float)(measurements->width) );
            		}
            		else {
HXLINE( 477)			bool _hx_tmp10;
HXDLIN( 477)			if (::hx::IsNotNull( measurements->minWidth )) {
HXLINE( 477)				_hx_tmp10 = ::hx::IsLess( viewPortWidth,measurements->minWidth );
            			}
            			else {
HXLINE( 477)				_hx_tmp10 = false;
            			}
HXDLIN( 477)			if (_hx_tmp10) {
HXLINE( 478)				viewPortWidth = ( (Float)(measurements->minWidth) );
            			}
            			else {
HXLINE( 479)				bool _hx_tmp11;
HXDLIN( 479)				if (::hx::IsNotNull( measurements->maxWidth )) {
HXLINE( 479)					_hx_tmp11 = ::hx::IsGreater( viewPortWidth,measurements->maxWidth );
            				}
            				else {
HXLINE( 479)					_hx_tmp11 = false;
            				}
HXDLIN( 479)				if (_hx_tmp11) {
HXLINE( 480)					viewPortWidth = ( (Float)(measurements->maxWidth) );
            				}
            			}
            		}
HXLINE( 483)		Float viewPortHeight = contentHeight;
HXLINE( 484)		if (::hx::IsNotNull( measurements->height )) {
HXLINE( 485)			viewPortHeight = ( (Float)(measurements->height) );
            		}
            		else {
HXLINE( 487)			bool _hx_tmp12;
HXDLIN( 487)			if (::hx::IsNotNull( measurements->minHeight )) {
HXLINE( 487)				_hx_tmp12 = ::hx::IsLess( viewPortHeight,measurements->minHeight );
            			}
            			else {
HXLINE( 487)				_hx_tmp12 = false;
            			}
HXDLIN( 487)			if (_hx_tmp12) {
HXLINE( 488)				viewPortHeight = ( (Float)(measurements->minHeight) );
            			}
            			else {
HXLINE( 489)				bool _hx_tmp13;
HXDLIN( 489)				if (::hx::IsNotNull( measurements->maxHeight )) {
HXLINE( 489)					_hx_tmp13 = ::hx::IsGreater( viewPortHeight,measurements->maxHeight );
            				}
            				else {
HXLINE( 489)					_hx_tmp13 = false;
            				}
HXDLIN( 489)				if (_hx_tmp13) {
HXLINE( 490)					viewPortHeight = ( (Float)(measurements->maxHeight) );
            				}
            			}
            		}
HXLINE( 494)		this->applyPercentWidth(items,viewPortWidth);
HXLINE( 495)		{
HXLINE( 495)			int _g2 = 0;
HXDLIN( 495)			while((_g2 < items->length)){
HXLINE( 495)				 ::openfl::display::DisplayObject item2 = items->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 495)				_g2 = (_g2 + 1);
HXDLIN( 495)				::Dynamic layoutObject1 = null();
HXDLIN( 495)				if (::Std_obj::isOfType(item2,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 495)					layoutObject1 =  ::hx::interface_check(item2,0xf54ca718);
HXDLIN( 495)					if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutObject1))) {
HXLINE( 495)						continue;
            					}
            				}
HXDLIN( 495)				switch((int)(this->_horizontalAlign->_hx_getIndex())){
            					case (int)0: {
HXLINE( 495)						item2->set_x(this->_paddingLeft);
            					}
            					break;
            					case (int)1: {
HXLINE( 495)						Float _hx_tmp14 = this->_paddingLeft;
HXDLIN( 495)						Float _hx_tmp15 = this->_paddingLeft;
HXDLIN( 495)						Float _hx_tmp16 = ((viewPortWidth - this->_paddingLeft) - this->_paddingRight);
HXDLIN( 495)						item2->set_x(::Math_obj::max(_hx_tmp14,(_hx_tmp15 + ((_hx_tmp16 - item2->get_width()) / ((Float)2.0)))));
            					}
            					break;
            					case (int)2: {
HXLINE( 495)						Float _hx_tmp17 = this->_paddingLeft;
HXDLIN( 495)						Float _hx_tmp18 = (this->_paddingLeft + ((viewPortWidth - this->_paddingLeft) - this->_paddingRight));
HXDLIN( 495)						item2->set_x(::Math_obj::max(_hx_tmp17,(_hx_tmp18 - item2->get_width())));
            					}
            					break;
            					case (int)3: {
HXLINE( 495)						item2->set_x(this->_paddingLeft);
HXDLIN( 495)						item2->set_width(((viewPortWidth - this->_paddingLeft) - this->_paddingRight));
            					}
            					break;
            				}
            			}
            		}
HXLINE( 496)		{
HXLINE( 496)			Float contentHeight1 = ((contentHeight - this->_paddingTop) - this->_paddingBottom);
HXDLIN( 496)			Float alignOffset = ((Float)0.0);
HXDLIN( 496)			Float gapOffset = ((Float)0.0);
HXDLIN( 496)			Float maxAlignmentHeight = ((viewPortHeight - this->_paddingTop) - this->_paddingBottom);
HXDLIN( 496)			Float adjustedGap1 = this->_gap;
HXDLIN( 496)			bool hasFlexGap1 = (this->_gap == ::hx::DivByZero(((Float)1.0)));
HXDLIN( 496)			if (hasFlexGap1) {
HXLINE( 496)				adjustedGap1 = this->_minGap;
HXDLIN( 496)				bool _hx_tmp19;
HXDLIN( 496)				if ((items->length > 1)) {
HXLINE( 496)					_hx_tmp19 = (maxAlignmentHeight > contentHeight1);
            				}
            				else {
HXLINE( 496)					_hx_tmp19 = false;
            				}
HXDLIN( 496)				if (_hx_tmp19) {
HXLINE( 496)					adjustedGap1 = (adjustedGap1 + ((maxAlignmentHeight - contentHeight1) / ( (Float)((items->length - 1)) )));
            				}
HXDLIN( 496)				gapOffset = (adjustedGap1 - this->_minGap);
            			}
            			else {
HXLINE( 496)				switch((int)(this->_verticalAlign->_hx_getIndex())){
            					case (int)0: {
HXLINE( 496)						alignOffset = ((Float)0.0);
            					}
            					break;
            					case (int)1: {
HXLINE( 496)						alignOffset = ((maxAlignmentHeight - contentHeight1) / ((Float)2.0));
            					}
            					break;
            					case (int)2: {
HXLINE( 496)						alignOffset = (maxAlignmentHeight - contentHeight1);
            					}
            					break;
            					default:{
HXLINE( 496)						HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Unknown vertical align: ",77,68,f9,89) + ::Std_obj::string(this->_verticalAlign))));
            					}
            				}
HXDLIN( 496)				if ((alignOffset < ((Float)0.0))) {
HXLINE( 496)					alignOffset = ((Float)0.0);
            				}
            			}
HXDLIN( 496)			bool _hx_tmp20;
HXDLIN( 496)			if ((alignOffset == ((Float)0.0))) {
HXLINE( 496)				_hx_tmp20 = (gapOffset == ((Float)0.0));
            			}
            			else {
HXLINE( 496)				_hx_tmp20 = false;
            			}
HXDLIN( 496)			if (!(_hx_tmp20)) {
HXLINE( 496)				Float totalOffset = alignOffset;
HXDLIN( 496)				{
HXLINE( 496)					int _g3 = 0;
HXDLIN( 496)					while((_g3 < items->length)){
HXLINE( 496)						 ::openfl::display::DisplayObject item3 = items->__get(_g3).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 496)						_g3 = (_g3 + 1);
HXDLIN( 496)						::Dynamic layoutObject2 = null();
HXDLIN( 496)						if (::Std_obj::isOfType(item3,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 496)							layoutObject2 =  ::hx::interface_check(item3,0xf54ca718);
HXDLIN( 496)							if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutObject2))) {
HXLINE( 496)								continue;
            							}
            						}
HXDLIN( 496)						Float _hx_tmp21 = this->_paddingTop;
HXDLIN( 496)						item3->set_y(::Math_obj::max(_hx_tmp21,(item3->get_y() + totalOffset)));
HXDLIN( 496)						totalOffset = (totalOffset + gapOffset);
            					}
            				}
            			}
            		}
HXLINE( 498)		if ((contentWidth < viewPortWidth)) {
HXLINE( 499)			contentWidth = viewPortWidth;
            		}
HXLINE( 501)		if ((contentHeight < viewPortHeight)) {
HXLINE( 502)			contentHeight = viewPortHeight;
            		}
HXLINE( 505)		if (::hx::IsNull( result )) {
HXLINE( 506)			result =  ::feathers::layout::LayoutBoundsResult_obj::__alloc( HX_CTX );
            		}
HXLINE( 508)		result->contentX = ((Float)0.0);
HXLINE( 509)		result->contentY = ((Float)0.0);
HXLINE( 510)		result->contentWidth = contentWidth;
HXLINE( 511)		result->contentHeight = contentHeight;
HXLINE( 512)		result->viewPortWidth = viewPortWidth;
HXLINE( 513)		result->viewPortHeight = viewPortHeight;
HXLINE( 514)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC3(VerticalLayout_obj,layout,return )

void VerticalLayout_obj::validateItems(::Array< ::Dynamic> items, ::feathers::layout::Measurements measurements){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_517_validateItems)
HXLINE( 518)		bool isJustified = ::hx::IsPointerEq( this->_horizontalAlign,::feathers::layout::HorizontalAlign_obj::JUSTIFY_dyn() );
HXLINE( 519)		 ::Dynamic explicitContentWidth = measurements->width;
HXLINE( 520)		if (::hx::IsNotNull( explicitContentWidth )) {
HXLINE( 521)			explicitContentWidth = (explicitContentWidth - (this->_paddingLeft + this->_paddingRight));
            		}
HXLINE( 523)		 ::Dynamic explicitContentHeight = measurements->height;
HXLINE( 524)		if (::hx::IsNotNull( explicitContentHeight )) {
HXLINE( 525)			explicitContentHeight = (explicitContentHeight - (this->_paddingTop + this->_paddingBottom));
            		}
HXLINE( 527)		{
HXLINE( 527)			int _g = 0;
HXDLIN( 527)			while((_g < items->length)){
HXLINE( 527)				 ::openfl::display::DisplayObject item = items->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 527)				_g = (_g + 1);
HXLINE( 528)				 ::Dynamic percentWidth = null();
HXLINE( 529)				 ::Dynamic percentHeight = null();
HXLINE( 530)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 531)					::Dynamic layoutItem =  ::hx::interface_check(item,0xf54ca718);
HXLINE( 532)					if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutItem))) {
HXLINE( 533)						continue;
            					}
HXLINE( 535)					 ::feathers::layout::VerticalLayoutData layoutData = ( ( ::feathers::layout::VerticalLayoutData)(::Std_obj::downcast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutItem),::hx::ClassOf< ::feathers::layout::VerticalLayoutData >())) );
HXLINE( 536)					if (::hx::IsNotNull( layoutData )) {
HXLINE( 537)						percentWidth = layoutData->get_percentWidth();
HXLINE( 538)						percentHeight = layoutData->get_percentHeight();
            					}
            				}
HXLINE( 541)				if (isJustified) {
HXLINE( 542)					if (::hx::IsNotNull( explicitContentWidth )) {
HXLINE( 543)						item->set_width(( (Float)(explicitContentWidth) ));
            					}
            					else {
HXLINE( 544)						bool _hx_tmp;
HXDLIN( 544)						if (this->_justifyResetEnabled) {
HXLINE( 544)							_hx_tmp = ::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IMeasureObject >());
            						}
            						else {
HXLINE( 544)							_hx_tmp = false;
            						}
HXDLIN( 544)						if (_hx_tmp) {
HXLINE( 545)							::feathers::core::IMeasureObject_obj::resetWidth( ::hx::interface_check(item,0xcfc32883));
            						}
            					}
            				}
            				else {
HXLINE( 547)					if (::hx::IsNotNull( explicitContentWidth )) {
HXLINE( 548)						if (::hx::IsNotNull( percentWidth )) {
HXLINE( 549)							if (::hx::IsLess( percentWidth,((Float)0.0) )) {
HXLINE( 550)								percentWidth = ((Float)0.0);
            							}
            							else {
HXLINE( 551)								if (::hx::IsGreater( percentWidth,((Float)100.0) )) {
HXLINE( 552)									percentWidth = ((Float)100.0);
            								}
            							}
HXLINE( 554)							item->set_width((( (Float)(explicitContentWidth) ) * (( (Float)(percentWidth) ) / ((Float)100.0))));
            						}
            					}
            					else {
HXLINE( 556)						bool _hx_tmp1;
HXDLIN( 556)						bool _hx_tmp2;
HXDLIN( 556)						if (::hx::IsNotNull( percentWidth )) {
HXLINE( 556)							_hx_tmp2 = this->_percentWidthResetEnabled;
            						}
            						else {
HXLINE( 556)							_hx_tmp2 = false;
            						}
HXDLIN( 556)						if (_hx_tmp2) {
HXLINE( 556)							_hx_tmp1 = ::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IMeasureObject >());
            						}
            						else {
HXLINE( 556)							_hx_tmp1 = false;
            						}
HXDLIN( 556)						if (_hx_tmp1) {
HXLINE( 557)							::feathers::core::IMeasureObject_obj::resetWidth( ::hx::interface_check(item,0xcfc32883));
            						}
            					}
            				}
HXLINE( 559)				bool _hx_tmp3;
HXDLIN( 559)				bool _hx_tmp4;
HXDLIN( 559)				bool _hx_tmp5;
HXDLIN( 559)				if (::hx::IsNotNull( percentHeight )) {
HXLINE( 559)					_hx_tmp5 = this->_percentHeightResetEnabled;
            				}
            				else {
HXLINE( 559)					_hx_tmp5 = false;
            				}
HXDLIN( 559)				if (_hx_tmp5) {
HXLINE( 559)					_hx_tmp4 = ::hx::IsNull( explicitContentHeight );
            				}
            				else {
HXLINE( 559)					_hx_tmp4 = false;
            				}
HXDLIN( 559)				if (_hx_tmp4) {
HXLINE( 559)					_hx_tmp3 = ::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IMeasureObject >());
            				}
            				else {
HXLINE( 559)					_hx_tmp3 = false;
            				}
HXDLIN( 559)				if (_hx_tmp3) {
HXLINE( 560)					::feathers::core::IMeasureObject_obj::resetHeight( ::hx::interface_check(item,0xcfc32883));
            				}
HXLINE( 562)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 563)					::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            				}
HXLINE( 565)				bool _hx_tmp6;
HXDLIN( 565)				bool _hx_tmp7;
HXDLIN( 565)				if (isJustified) {
HXLINE( 565)					_hx_tmp7 = ::hx::IsNull( explicitContentWidth );
            				}
            				else {
HXLINE( 565)					_hx_tmp7 = false;
            				}
HXDLIN( 565)				if (_hx_tmp7) {
HXLINE( 565)					_hx_tmp6 = ::hx::IsNotNull( measurements->maxWidth );
            				}
            				else {
HXLINE( 565)					_hx_tmp6 = false;
            				}
HXDLIN( 565)				if (_hx_tmp6) {
HXLINE( 566)					Float maxExplicitContentWidth = ((( (Float)(measurements->maxWidth) ) - this->_paddingLeft) - this->_paddingRight);
HXLINE( 567)					if ((item->get_width() > maxExplicitContentWidth)) {
HXLINE( 568)						item->set_width(maxExplicitContentWidth);
HXLINE( 569)						if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 570)							::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(VerticalLayout_obj,validateItems,(void))

void VerticalLayout_obj::applyHorizontalAlign(::Array< ::Dynamic> items,Float maxItemWidth,Float viewPortWidth){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_578_applyHorizontalAlign)
HXDLIN( 578)		int _g = 0;
HXDLIN( 578)		while((_g < items->length)){
HXDLIN( 578)			 ::openfl::display::DisplayObject item = items->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 578)			_g = (_g + 1);
HXLINE( 579)			::Dynamic layoutObject = null();
HXLINE( 580)			if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 581)				layoutObject =  ::hx::interface_check(item,0xf54ca718);
HXLINE( 582)				if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutObject))) {
HXLINE( 583)					continue;
            				}
            			}
HXLINE( 586)			switch((int)(this->_horizontalAlign->_hx_getIndex())){
            				case (int)0: {
HXLINE( 592)					item->set_x(this->_paddingLeft);
            				}
            				break;
            				case (int)1: {
HXLINE( 590)					Float _hx_tmp = this->_paddingLeft;
HXDLIN( 590)					Float _hx_tmp1 = this->_paddingLeft;
HXDLIN( 590)					Float _hx_tmp2 = ((viewPortWidth - this->_paddingLeft) - this->_paddingRight);
HXDLIN( 590)					item->set_x(::Math_obj::max(_hx_tmp,(_hx_tmp1 + ((_hx_tmp2 - item->get_width()) / ((Float)2.0)))));
            				}
            				break;
            				case (int)2: {
HXLINE( 588)					Float _hx_tmp3 = this->_paddingLeft;
HXDLIN( 588)					Float _hx_tmp4 = (this->_paddingLeft + ((viewPortWidth - this->_paddingLeft) - this->_paddingRight));
HXDLIN( 588)					item->set_x(::Math_obj::max(_hx_tmp3,(_hx_tmp4 - item->get_width())));
            				}
            				break;
            				case (int)3: {
HXLINE( 594)					item->set_x(this->_paddingLeft);
HXLINE( 595)					item->set_width(((viewPortWidth - this->_paddingLeft) - this->_paddingRight));
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(VerticalLayout_obj,applyHorizontalAlign,(void))

void VerticalLayout_obj::applyVerticalAlign(::Array< ::Dynamic> items,Float contentHeight,Float viewPortHeight){
            	HX_GC_STACKFRAME(&_hx_pos_5975719ac55134c6_602_applyVerticalAlign)
HXLINE( 603)		Float alignOffset = ((Float)0.0);
HXLINE( 604)		Float gapOffset = ((Float)0.0);
HXLINE( 605)		Float maxAlignmentHeight = ((viewPortHeight - this->_paddingTop) - this->_paddingBottom);
HXLINE( 606)		Float adjustedGap = this->_gap;
HXLINE( 607)		bool hasFlexGap = (this->_gap == ::hx::DivByZero(((Float)1.0)));
HXLINE( 608)		if (hasFlexGap) {
HXLINE( 609)			adjustedGap = this->_minGap;
HXLINE( 610)			bool _hx_tmp;
HXDLIN( 610)			if ((items->length > 1)) {
HXLINE( 610)				_hx_tmp = (maxAlignmentHeight > contentHeight);
            			}
            			else {
HXLINE( 610)				_hx_tmp = false;
            			}
HXDLIN( 610)			if (_hx_tmp) {
HXLINE( 611)				adjustedGap = (adjustedGap + ((maxAlignmentHeight - contentHeight) / ( (Float)((items->length - 1)) )));
            			}
HXLINE( 613)			gapOffset = (adjustedGap - this->_minGap);
            		}
            		else {
HXLINE( 615)			switch((int)(this->_verticalAlign->_hx_getIndex())){
            				case (int)0: {
HXLINE( 616)					alignOffset = ((Float)0.0);
            				}
            				break;
            				case (int)1: {
HXLINE( 618)					alignOffset = ((maxAlignmentHeight - contentHeight) / ((Float)2.0));
            				}
            				break;
            				case (int)2: {
HXLINE( 617)					alignOffset = (maxAlignmentHeight - contentHeight);
            				}
            				break;
            				default:{
HXLINE( 620)					HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Unknown vertical align: ",77,68,f9,89) + ::Std_obj::string(this->_verticalAlign))));
            				}
            			}
HXLINE( 622)			if ((alignOffset < ((Float)0.0))) {
HXLINE( 623)				alignOffset = ((Float)0.0);
            			}
            		}
HXLINE( 626)		bool _hx_tmp1;
HXDLIN( 626)		if ((alignOffset == ((Float)0.0))) {
HXLINE( 626)			_hx_tmp1 = (gapOffset == ((Float)0.0));
            		}
            		else {
HXLINE( 626)			_hx_tmp1 = false;
            		}
HXDLIN( 626)		if (_hx_tmp1) {
HXLINE( 627)			return;
            		}
HXLINE( 630)		Float totalOffset = alignOffset;
HXLINE( 631)		{
HXLINE( 631)			int _g = 0;
HXDLIN( 631)			while((_g < items->length)){
HXLINE( 631)				 ::openfl::display::DisplayObject item = items->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 631)				_g = (_g + 1);
HXLINE( 632)				::Dynamic layoutObject = null();
HXLINE( 633)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 634)					layoutObject =  ::hx::interface_check(item,0xf54ca718);
HXLINE( 635)					if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutObject))) {
HXLINE( 636)						continue;
            					}
            				}
HXLINE( 639)				Float _hx_tmp2 = this->_paddingTop;
HXDLIN( 639)				item->set_y(::Math_obj::max(_hx_tmp2,(item->get_y() + totalOffset)));
HXLINE( 640)				totalOffset = (totalOffset + gapOffset);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(VerticalLayout_obj,applyVerticalAlign,(void))

void VerticalLayout_obj::applyPercentWidth(::Array< ::Dynamic> items,Float viewPortWidth){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_644_applyPercentWidth)
HXLINE( 645)		Float availableWidth = ((viewPortWidth - this->_paddingLeft) - this->_paddingRight);
HXLINE( 646)		{
HXLINE( 646)			int _g = 0;
HXDLIN( 646)			while((_g < items->length)){
HXLINE( 646)				 ::openfl::display::DisplayObject item = items->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 646)				_g = (_g + 1);
HXLINE( 647)				if (!(::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >()))) {
HXLINE( 648)					continue;
            				}
HXLINE( 650)				::Dynamic layoutItem =  ::hx::interface_check(item,0xf54ca718);
HXLINE( 651)				if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutItem))) {
HXLINE( 652)					continue;
            				}
HXLINE( 654)				 ::feathers::layout::VerticalLayoutData layoutData = ( ( ::feathers::layout::VerticalLayoutData)(::Std_obj::downcast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutItem),::hx::ClassOf< ::feathers::layout::VerticalLayoutData >())) );
HXLINE( 655)				if (::hx::IsNull( layoutData )) {
HXLINE( 656)					continue;
            				}
HXLINE( 658)				 ::Dynamic percentWidth = layoutData->get_percentWidth();
HXLINE( 659)				if (::hx::IsNull( percentWidth )) {
HXLINE( 660)					continue;
            				}
HXLINE( 662)				if (::hx::IsLess( percentWidth,((Float)0.0) )) {
HXLINE( 663)					percentWidth = ((Float)0.0);
            				}
            				else {
HXLINE( 664)					if (::hx::IsGreater( percentWidth,((Float)100.0) )) {
HXLINE( 665)						percentWidth = ((Float)100.0);
            					}
            				}
HXLINE( 667)				Float itemWidth = ((availableWidth * ( (Float)(percentWidth) )) / ((Float)100.0));
HXLINE( 668)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IMeasureObject >())) {
HXLINE( 669)					::Dynamic measureItem =  ::hx::interface_check(item,0xcfc32883);
HXLINE( 670)					 ::Dynamic itemMinWidth = ::feathers::core::IMeasureObject_obj::get_explicitMinWidth(measureItem);
HXLINE( 671)					if (::hx::IsNotNull( itemMinWidth )) {
HXLINE( 674)						if (::hx::IsGreater( itemMinWidth,availableWidth )) {
HXLINE( 675)							itemMinWidth = availableWidth;
            						}
HXLINE( 677)						if (::hx::IsLess( itemWidth,itemMinWidth )) {
HXLINE( 678)							itemWidth = ( (Float)(itemMinWidth) );
            						}
            					}
HXLINE( 681)					 ::Dynamic itemMaxWidth = ::feathers::core::IMeasureObject_obj::get_explicitMaxWidth(measureItem);
HXLINE( 682)					bool _hx_tmp;
HXDLIN( 682)					if (::hx::IsNotNull( itemMaxWidth )) {
HXLINE( 682)						_hx_tmp = ::hx::IsGreater( itemWidth,itemMaxWidth );
            					}
            					else {
HXLINE( 682)						_hx_tmp = false;
            					}
HXDLIN( 682)					if (_hx_tmp) {
HXLINE( 683)						itemWidth = ( (Float)(itemMaxWidth) );
            					}
            				}
HXLINE( 686)				item->set_width(itemWidth);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(VerticalLayout_obj,applyPercentWidth,(void))

void VerticalLayout_obj::applyPercentHeight(::Array< ::Dynamic> items, ::Dynamic explicitHeight, ::Dynamic explicitMinHeight, ::Dynamic explicitMaxHeight,Float adjustedGap){
            	HX_STACKFRAME(&_hx_pos_5975719ac55134c6_691_applyPercentHeight)
HXLINE( 692)		::Array< ::Dynamic> pendingItems = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 693)		Float totalMeasuredHeight = ((Float)0.0);
HXLINE( 694)		Float totalMinHeight = ((Float)0.0);
HXLINE( 695)		Float totalPercentHeight = ((Float)0.0);
HXLINE( 696)		{
HXLINE( 696)			int _g = 0;
HXDLIN( 696)			while((_g < items->length)){
HXLINE( 696)				 ::openfl::display::DisplayObject item = items->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 696)				_g = (_g + 1);
HXLINE( 697)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 698)					::Dynamic layoutItem =  ::hx::interface_check(item,0xf54ca718);
HXLINE( 699)					if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutItem))) {
HXLINE( 700)						continue;
            					}
HXLINE( 702)					 ::feathers::layout::VerticalLayoutData layoutData = ( ( ::feathers::layout::VerticalLayoutData)(::Std_obj::downcast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutItem),::hx::ClassOf< ::feathers::layout::VerticalLayoutData >())) );
HXLINE( 703)					if (::hx::IsNotNull( layoutData )) {
HXLINE( 704)						 ::Dynamic percentHeight = layoutData->get_percentHeight();
HXLINE( 705)						if (::hx::IsNotNull( percentHeight )) {
HXLINE( 706)							if (::hx::IsLess( percentHeight,((Float)0.0) )) {
HXLINE( 707)								percentHeight = ((Float)0.0);
            							}
HXLINE( 709)							if (::Std_obj::isOfType(layoutItem,::hx::ClassOf< ::feathers::core::IMeasureObject >())) {
HXLINE( 710)								::Dynamic measureItem = layoutItem;
HXLINE( 711)								totalMinHeight = (totalMinHeight + ::feathers::core::IMeasureObject_obj::get_minHeight(measureItem));
            							}
HXLINE( 713)							totalPercentHeight = (totalPercentHeight + percentHeight);
HXLINE( 714)							if (::hx::IsNotNull( layoutData->get_marginTop() )) {
HXLINE( 715)								totalMeasuredHeight = (totalMeasuredHeight + layoutData->get_marginTop());
            							}
HXLINE( 717)							if (::hx::IsNotNull( layoutData->get_marginBottom() )) {
HXLINE( 718)								totalMeasuredHeight = (totalMeasuredHeight + layoutData->get_marginBottom());
            							}
HXLINE( 720)							totalMeasuredHeight = (totalMeasuredHeight + adjustedGap);
HXLINE( 721)							pendingItems->push(layoutItem);
HXLINE( 722)							continue;
            						}
            					}
            				}
HXLINE( 726)				totalMeasuredHeight = (totalMeasuredHeight + (item->get_height() + adjustedGap));
            			}
            		}
HXLINE( 728)		totalMeasuredHeight = (totalMeasuredHeight - adjustedGap);
HXLINE( 729)		totalMeasuredHeight = (totalMeasuredHeight + (this->_paddingTop + this->_paddingBottom));
HXLINE( 730)		if ((totalPercentHeight < ((Float)100.0))) {
HXLINE( 731)			totalPercentHeight = ((Float)100.0);
            		}
HXLINE( 733)		Float remainingHeight = ((Float)0.0);
HXLINE( 734)		if (::hx::IsNotNull( explicitHeight )) {
HXLINE( 735)			remainingHeight = ( (Float)(explicitHeight) );
            		}
            		else {
HXLINE( 737)			remainingHeight = (totalMeasuredHeight + totalMinHeight);
HXLINE( 738)			bool _hx_tmp;
HXDLIN( 738)			if (::hx::IsNotNull( explicitMinHeight )) {
HXLINE( 738)				_hx_tmp = ::hx::IsLess( remainingHeight,explicitMinHeight );
            			}
            			else {
HXLINE( 738)				_hx_tmp = false;
            			}
HXDLIN( 738)			if (_hx_tmp) {
HXLINE( 739)				remainingHeight = ( (Float)(explicitMinHeight) );
            			}
            			else {
HXLINE( 740)				bool _hx_tmp1;
HXDLIN( 740)				if (::hx::IsNotNull( explicitMaxHeight )) {
HXLINE( 740)					_hx_tmp1 = ::hx::IsGreater( remainingHeight,explicitMaxHeight );
            				}
            				else {
HXLINE( 740)					_hx_tmp1 = false;
            				}
HXDLIN( 740)				if (_hx_tmp1) {
HXLINE( 741)					remainingHeight = ( (Float)(explicitMaxHeight) );
            				}
            			}
            		}
HXLINE( 744)		remainingHeight = (remainingHeight - totalMeasuredHeight);
HXLINE( 745)		if ((remainingHeight < ((Float)0.0))) {
HXLINE( 746)			remainingHeight = ((Float)0.0);
            		}
HXLINE( 748)		bool needsAnotherPass = true;
HXLINE( 749)		while(needsAnotherPass){
HXLINE( 750)			needsAnotherPass = false;
HXLINE( 751)			Float percentToPixels = (remainingHeight / totalPercentHeight);
HXLINE( 752)			{
HXLINE( 752)				int _g1 = 0;
HXDLIN( 752)				while((_g1 < pendingItems->length)){
HXLINE( 752)					::Dynamic layoutItem1 = pendingItems->__get(_g1);
HXDLIN( 752)					_g1 = (_g1 + 1);
HXLINE( 753)					 ::feathers::layout::VerticalLayoutData layoutData1 = ::hx::TCast<  ::feathers::layout::VerticalLayoutData >::cast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutItem1));
HXLINE( 754)					 ::Dynamic percentHeight1 = layoutData1->get_percentHeight();
HXLINE( 755)					if (::hx::IsLess( percentHeight1,((Float)0.0) )) {
HXLINE( 756)						percentHeight1 = ((Float)0.0);
            					}
HXLINE( 758)					Float itemHeight = (percentToPixels * ( (Float)(percentHeight1) ));
HXLINE( 759)					if (::Std_obj::isOfType(layoutItem1,::hx::ClassOf< ::feathers::core::IMeasureObject >())) {
HXLINE( 760)						::Dynamic measureItem1 = layoutItem1;
HXLINE( 761)						 ::Dynamic itemMinHeight = ::feathers::core::IMeasureObject_obj::get_explicitMinHeight(measureItem1);
HXLINE( 762)						bool _hx_tmp2;
HXDLIN( 762)						if (::hx::IsNotNull( itemMinHeight )) {
HXLINE( 762)							_hx_tmp2 = ::hx::IsGreater( itemMinHeight,remainingHeight );
            						}
            						else {
HXLINE( 762)							_hx_tmp2 = false;
            						}
HXDLIN( 762)						if (_hx_tmp2) {
HXLINE( 766)							itemMinHeight = remainingHeight;
            						}
HXLINE( 768)						if (::hx::IsLess( itemHeight,itemMinHeight )) {
HXLINE( 769)							itemHeight = ( (Float)(itemMinHeight) );
HXLINE( 770)							remainingHeight = (remainingHeight - itemHeight);
HXLINE( 771)							totalPercentHeight = (totalPercentHeight - ( (Float)(percentHeight1) ));
HXLINE( 772)							pendingItems->remove(layoutItem1);
HXLINE( 773)							needsAnotherPass = true;
            						}
            					}
HXLINE( 779)					::hx::TCast<  ::openfl::display::DisplayObject >::cast(layoutItem1)->set_height(itemHeight);
HXLINE( 780)					if (::Std_obj::isOfType(layoutItem1,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 784)						::feathers::core::IValidating_obj::validateNow(layoutItem1);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(VerticalLayout_obj,applyPercentHeight,(void))


::hx::ObjectPtr< VerticalLayout_obj > VerticalLayout_obj::__new() {
	::hx::ObjectPtr< VerticalLayout_obj > __this = new VerticalLayout_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< VerticalLayout_obj > VerticalLayout_obj::__alloc(::hx::Ctx *_hx_ctx) {
	VerticalLayout_obj *__this = (VerticalLayout_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VerticalLayout_obj), true, "feathers.layout.VerticalLayout"));
	*(void **)__this = VerticalLayout_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VerticalLayout_obj::VerticalLayout_obj()
{
}

void VerticalLayout_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VerticalLayout);
	HX_MARK_MEMBER_NAME(_paddingTop,"_paddingTop");
	HX_MARK_MEMBER_NAME(_paddingRight,"_paddingRight");
	HX_MARK_MEMBER_NAME(_paddingBottom,"_paddingBottom");
	HX_MARK_MEMBER_NAME(_paddingLeft,"_paddingLeft");
	HX_MARK_MEMBER_NAME(_gap,"_gap");
	HX_MARK_MEMBER_NAME(_minGap,"_minGap");
	HX_MARK_MEMBER_NAME(_horizontalAlign,"_horizontalAlign");
	HX_MARK_MEMBER_NAME(_verticalAlign,"_verticalAlign");
	HX_MARK_MEMBER_NAME(_justifyResetEnabled,"_justifyResetEnabled");
	HX_MARK_MEMBER_NAME(_percentWidthResetEnabled,"_percentWidthResetEnabled");
	HX_MARK_MEMBER_NAME(_percentHeightResetEnabled,"_percentHeightResetEnabled");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VerticalLayout_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_paddingTop,"_paddingTop");
	HX_VISIT_MEMBER_NAME(_paddingRight,"_paddingRight");
	HX_VISIT_MEMBER_NAME(_paddingBottom,"_paddingBottom");
	HX_VISIT_MEMBER_NAME(_paddingLeft,"_paddingLeft");
	HX_VISIT_MEMBER_NAME(_gap,"_gap");
	HX_VISIT_MEMBER_NAME(_minGap,"_minGap");
	HX_VISIT_MEMBER_NAME(_horizontalAlign,"_horizontalAlign");
	HX_VISIT_MEMBER_NAME(_verticalAlign,"_verticalAlign");
	HX_VISIT_MEMBER_NAME(_justifyResetEnabled,"_justifyResetEnabled");
	HX_VISIT_MEMBER_NAME(_percentWidthResetEnabled,"_percentWidthResetEnabled");
	HX_VISIT_MEMBER_NAME(_percentHeightResetEnabled,"_percentHeightResetEnabled");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val VerticalLayout_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_gap() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_gap") ) { return ::hx::Val( _gap ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"minGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_minGap() ); }
		if (HX_FIELD_EQ(inName,"layout") ) { return ::hx::Val( layout_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_gap") ) { return ::hx::Val( get_gap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gap") ) { return ::hx::Val( set_gap_dyn() ); }
		if (HX_FIELD_EQ(inName,"_minGap") ) { return ::hx::Val( _minGap ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingTop() ); }
		if (HX_FIELD_EQ(inName,"get_minGap") ) { return ::hx::Val( get_minGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_minGap") ) { return ::hx::Val( set_minGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPadding") ) { return ::hx::Val( setPadding_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_paddingTop") ) { return ::hx::Val( _paddingTop ); }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingLeft() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingRight() ); }
		if (HX_FIELD_EQ(inName,"_paddingLeft") ) { return ::hx::Val( _paddingLeft ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_paddingRight") ) { return ::hx::Val( _paddingRight ); }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingBottom() ); }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_verticalAlign() ); }
		if (HX_FIELD_EQ(inName,"validateItems") ) { return ::hx::Val( validateItems_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_paddingTop") ) { return ::hx::Val( get_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingTop") ) { return ::hx::Val( set_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"_paddingBottom") ) { return ::hx::Val( _paddingBottom ); }
		if (HX_FIELD_EQ(inName,"_verticalAlign") ) { return ::hx::Val( _verticalAlign ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_paddingLeft") ) { return ::hx::Val( get_paddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingLeft") ) { return ::hx::Val( set_paddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"horizontalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_horizontalAlign() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_paddingRight") ) { return ::hx::Val( get_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingRight") ) { return ::hx::Val( set_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_horizontalAlign") ) { return ::hx::Val( _horizontalAlign ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_paddingBottom") ) { return ::hx::Val( get_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingBottom") ) { return ::hx::Val( set_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_verticalAlign") ) { return ::hx::Val( get_verticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_verticalAlign") ) { return ::hx::Val( set_verticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyPercentWidth") ) { return ::hx::Val( applyPercentWidth_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"applyVerticalAlign") ) { return ::hx::Val( applyVerticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyPercentHeight") ) { return ::hx::Val( applyPercentHeight_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_horizontalAlign") ) { return ::hx::Val( get_horizontalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_horizontalAlign") ) { return ::hx::Val( set_horizontalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"justifyResetEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_justifyResetEnabled() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_justifyResetEnabled") ) { return ::hx::Val( _justifyResetEnabled ); }
		if (HX_FIELD_EQ(inName,"applyHorizontalAlign") ) { return ::hx::Val( applyHorizontalAlign_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_justifyResetEnabled") ) { return ::hx::Val( get_justifyResetEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_justifyResetEnabled") ) { return ::hx::Val( set_justifyResetEnabled_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"percentWidthResetEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_percentWidthResetEnabled() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_percentWidthResetEnabled") ) { return ::hx::Val( _percentWidthResetEnabled ); }
		if (HX_FIELD_EQ(inName,"percentHeightResetEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_percentHeightResetEnabled() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_percentHeightResetEnabled") ) { return ::hx::Val( _percentHeightResetEnabled ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"get_percentWidthResetEnabled") ) { return ::hx::Val( get_percentWidthResetEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_percentWidthResetEnabled") ) { return ::hx::Val( set_percentWidthResetEnabled_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"get_percentHeightResetEnabled") ) { return ::hx::Val( get_percentHeightResetEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_percentHeightResetEnabled") ) { return ::hx::Val( set_percentHeightResetEnabled_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VerticalLayout_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_gap(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_gap") ) { _gap=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"minGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_minGap(inValue.Cast< Float >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_minGap") ) { _minGap=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingTop(inValue.Cast< Float >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_paddingTop") ) { _paddingTop=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingLeft(inValue.Cast< Float >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingRight(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_paddingLeft") ) { _paddingLeft=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_paddingRight") ) { _paddingRight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingBottom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_verticalAlign(inValue.Cast<  ::feathers::layout::VerticalAlign >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_paddingBottom") ) { _paddingBottom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_verticalAlign") ) { _verticalAlign=inValue.Cast<  ::feathers::layout::VerticalAlign >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"horizontalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_horizontalAlign(inValue.Cast<  ::feathers::layout::HorizontalAlign >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_horizontalAlign") ) { _horizontalAlign=inValue.Cast<  ::feathers::layout::HorizontalAlign >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"justifyResetEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_justifyResetEnabled(inValue.Cast< bool >()) ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_justifyResetEnabled") ) { _justifyResetEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"percentWidthResetEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_percentWidthResetEnabled(inValue.Cast< bool >()) ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_percentWidthResetEnabled") ) { _percentWidthResetEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"percentHeightResetEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_percentHeightResetEnabled(inValue.Cast< bool >()) ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_percentHeightResetEnabled") ) { _percentHeightResetEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VerticalLayout_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_paddingTop",63,ca,8f,0c));
	outFields->push(HX_("paddingTop",44,fd,05,3a));
	outFields->push(HX_("_paddingRight",2a,7f,16,fd));
	outFields->push(HX_("paddingRight",4b,ec,a7,1a));
	outFields->push(HX_("_paddingBottom",dd,57,eb,8d));
	outFields->push(HX_("paddingBottom",9c,67,99,4f));
	outFields->push(HX_("_paddingLeft",79,f8,ef,eb));
	outFields->push(HX_("paddingLeft",78,4a,e6,85));
	outFields->push(HX_("_gap",17,c2,19,3f));
	outFields->push(HX_("gap",16,7d,4e,00));
	outFields->push(HX_("_minGap",43,fc,5b,c1));
	outFields->push(HX_("minGap",a4,ea,e4,52));
	outFields->push(HX_("_horizontalAlign",c2,d1,46,df));
	outFields->push(HX_("horizontalAlign",41,8f,67,f4));
	outFields->push(HX_("_verticalAlign",b0,0e,ce,22));
	outFields->push(HX_("verticalAlign",6f,1e,7c,e4));
	outFields->push(HX_("_justifyResetEnabled",e3,44,2a,f0));
	outFields->push(HX_("justifyResetEnabled",e2,2d,d1,f0));
	outFields->push(HX_("_percentWidthResetEnabled",72,ca,e1,79));
	outFields->push(HX_("percentWidthResetEnabled",13,e5,32,20));
	outFields->push(HX_("_percentHeightResetEnabled",df,0e,47,4d));
	outFields->push(HX_("percentHeightResetEnabled",1e,41,ed,2d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VerticalLayout_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(VerticalLayout_obj,_paddingTop),HX_("_paddingTop",63,ca,8f,0c)},
	{::hx::fsFloat,(int)offsetof(VerticalLayout_obj,_paddingRight),HX_("_paddingRight",2a,7f,16,fd)},
	{::hx::fsFloat,(int)offsetof(VerticalLayout_obj,_paddingBottom),HX_("_paddingBottom",dd,57,eb,8d)},
	{::hx::fsFloat,(int)offsetof(VerticalLayout_obj,_paddingLeft),HX_("_paddingLeft",79,f8,ef,eb)},
	{::hx::fsFloat,(int)offsetof(VerticalLayout_obj,_gap),HX_("_gap",17,c2,19,3f)},
	{::hx::fsFloat,(int)offsetof(VerticalLayout_obj,_minGap),HX_("_minGap",43,fc,5b,c1)},
	{::hx::fsObject /*  ::feathers::layout::HorizontalAlign */ ,(int)offsetof(VerticalLayout_obj,_horizontalAlign),HX_("_horizontalAlign",c2,d1,46,df)},
	{::hx::fsObject /*  ::feathers::layout::VerticalAlign */ ,(int)offsetof(VerticalLayout_obj,_verticalAlign),HX_("_verticalAlign",b0,0e,ce,22)},
	{::hx::fsBool,(int)offsetof(VerticalLayout_obj,_justifyResetEnabled),HX_("_justifyResetEnabled",e3,44,2a,f0)},
	{::hx::fsBool,(int)offsetof(VerticalLayout_obj,_percentWidthResetEnabled),HX_("_percentWidthResetEnabled",72,ca,e1,79)},
	{::hx::fsBool,(int)offsetof(VerticalLayout_obj,_percentHeightResetEnabled),HX_("_percentHeightResetEnabled",df,0e,47,4d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VerticalLayout_obj_sStaticStorageInfo = 0;
#endif

static ::String VerticalLayout_obj_sMemberFields[] = {
	HX_("_paddingTop",63,ca,8f,0c),
	HX_("get_paddingTop",8d,85,fb,af),
	HX_("set_paddingTop",01,6e,1b,d0),
	HX_("_paddingRight",2a,7f,16,fd),
	HX_("get_paddingRight",d4,d8,46,1f),
	HX_("set_paddingRight",48,c6,88,75),
	HX_("_paddingBottom",dd,57,eb,8d),
	HX_("get_paddingBottom",f3,72,09,56),
	HX_("set_paddingBottom",ff,4a,77,79),
	HX_("_paddingLeft",79,f8,ef,eb),
	HX_("get_paddingLeft",0f,02,c8,46),
	HX_("set_paddingLeft",1b,7f,93,42),
	HX_("_gap",17,c2,19,3f),
	HX_("get_gap",ad,45,c3,26),
	HX_("set_gap",b9,d6,c4,19),
	HX_("_minGap",43,fc,5b,c1),
	HX_("get_minGap",6d,5a,6c,43),
	HX_("set_minGap",e1,f8,e9,46),
	HX_("_horizontalAlign",c2,d1,46,df),
	HX_("get_horizontalAlign",58,5e,72,7f),
	HX_("set_horizontalAlign",64,51,0f,bc),
	HX_("_verticalAlign",b0,0e,ce,22),
	HX_("get_verticalAlign",c6,29,ec,ea),
	HX_("set_verticalAlign",d2,01,5a,0e),
	HX_("_justifyResetEnabled",e3,44,2a,f0),
	HX_("get_justifyResetEnabled",79,d4,26,f9),
	HX_("set_justifyResetEnabled",85,3d,88,fb),
	HX_("_percentWidthResetEnabled",72,ca,e1,79),
	HX_("get_percentWidthResetEnabled",1c,fb,86,61),
	HX_("set_percentWidthResetEnabled",90,46,b1,64),
	HX_("_percentHeightResetEnabled",df,0e,47,4d),
	HX_("get_percentHeightResetEnabled",f5,72,2c,16),
	HX_("set_percentHeightResetEnabled",01,2d,04,d8),
	HX_("setPadding",4f,7e,5c,23),
	HX_("layout",aa,ae,b8,58),
	HX_("validateItems",8a,6b,0c,ee),
	HX_("applyHorizontalAlign",73,5d,27,c7),
	HX_("applyVerticalAlign",21,9c,1b,72),
	HX_("applyPercentWidth",8f,8f,d2,d0),
	HX_("applyPercentHeight",3e,86,ba,9d),
	::String(null()) };

::hx::Class VerticalLayout_obj::__mClass;

void VerticalLayout_obj::__register()
{
	VerticalLayout_obj _hx_dummy;
	VerticalLayout_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.layout.VerticalLayout",26,ab,e1,68);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VerticalLayout_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VerticalLayout_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VerticalLayout_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VerticalLayout_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace layout
