// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_layout_Anchor
#include <feathers/layout/Anchor.h>
#endif
#ifndef INCLUDED_feathers_layout_AnchorLayout
#include <feathers/layout/AnchorLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_AnchorLayoutData
#include <feathers/layout/AnchorLayoutData.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayout
#include <feathers/layout/ILayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutData
#include <feathers/layout/ILayoutData.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_LayoutBoundsResult
#include <feathers/layout/LayoutBoundsResult.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_be610694a74931a3_38_new,"feathers.layout.AnchorLayout","new",0x8b6be457,"feathers.layout.AnchorLayout.new","feathers/layout/AnchorLayout.hx",38,0x3c8824d9)
HX_LOCAL_STACK_FRAME(_hx_pos_be610694a74931a3_44_layout,"feathers.layout.AnchorLayout","layout",0xfef22f13,"feathers.layout.AnchorLayout.layout","feathers/layout/AnchorLayout.hx",44,0x3c8824d9)
namespace feathers{
namespace layout{

void AnchorLayout_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_be610694a74931a3_38_new)
HXDLIN(  38)		super::__construct(null());
            	}

Dynamic AnchorLayout_obj::__CreateEmpty() { return new AnchorLayout_obj; }

void *AnchorLayout_obj::_hx_vtable = 0;

Dynamic AnchorLayout_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AnchorLayout_obj > _hx_result = new AnchorLayout_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AnchorLayout_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x5bf64541;
	}
}

static ::openfl::events::IEventDispatcher_obj _hx_feathers_layout_AnchorLayout__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::AnchorLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::AnchorLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::AnchorLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::AnchorLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::AnchorLayout_obj::willTrigger,
};

static ::feathers::layout::ILayout_obj _hx_feathers_layout_AnchorLayout__hx_feathers_layout_ILayout= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::AnchorLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::AnchorLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::AnchorLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::AnchorLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::AnchorLayout_obj::willTrigger,
	(  ::feathers::layout::LayoutBoundsResult (::hx::Object::*)(::Array< ::Dynamic>, ::feathers::layout::Measurements, ::feathers::layout::LayoutBoundsResult))&::feathers::layout::AnchorLayout_obj::layout,
};

void *AnchorLayout_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x87530281: return &_hx_feathers_layout_AnchorLayout__hx_openfl_events_IEventDispatcher;
		case (int)0x3e135379: return &_hx_feathers_layout_AnchorLayout__hx_feathers_layout_ILayout;
	}
	return super::_hx_getInterface(inHash);
}

 ::feathers::layout::LayoutBoundsResult AnchorLayout_obj::layout(::Array< ::Dynamic> items, ::feathers::layout::Measurements measurements, ::feathers::layout::LayoutBoundsResult result){
            	HX_GC_STACKFRAME(&_hx_pos_be610694a74931a3_44_layout)
HXLINE(  45)		{
HXLINE(  45)			int _g = 0;
HXDLIN(  45)			while((_g < items->length)){
HXLINE(  45)				 ::openfl::display::DisplayObject item = items->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(  45)				_g = (_g + 1);
HXLINE(  46)				::Dynamic layoutObject = null();
HXLINE(  47)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE(  48)					layoutObject =  ::hx::interface_check(item,0xf54ca718);
HXLINE(  49)					if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutObject))) {
HXLINE(  50)						continue;
            					}
HXLINE(  52)					 ::feathers::layout::AnchorLayoutData layoutData = null();
HXLINE(  53)					bool _hx_tmp;
HXDLIN(  53)					if (::hx::IsNotNull( layoutObject )) {
HXLINE(  53)						_hx_tmp = ::Std_obj::isOfType(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutObject),::hx::ClassOf< ::feathers::layout::AnchorLayoutData >());
            					}
            					else {
HXLINE(  53)						_hx_tmp = false;
            					}
HXDLIN(  53)					if (_hx_tmp) {
HXLINE(  54)						layoutData = ::hx::TCast<  ::feathers::layout::AnchorLayoutData >::cast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutObject));
            					}
HXLINE(  56)					if (::hx::IsNotNull( layoutData )) {
HXLINE(  59)						if (::hx::IsNotNull( measurements->width )) {
HXLINE(  60)							 ::feathers::layout::Anchor leftAnchor = layoutData->get_left();
HXLINE(  61)							 ::feathers::layout::Anchor rightAnchor = layoutData->get_right();
HXLINE(  62)							bool _hx_tmp1;
HXDLIN(  62)							bool _hx_tmp2;
HXDLIN(  62)							bool _hx_tmp3;
HXDLIN(  62)							if (::hx::IsNotNull( leftAnchor )) {
HXLINE(  62)								_hx_tmp3 = ::hx::IsNotNull( rightAnchor );
            							}
            							else {
HXLINE(  62)								_hx_tmp3 = false;
            							}
HXDLIN(  62)							if (_hx_tmp3) {
HXLINE(  62)								_hx_tmp2 = ::hx::IsNull( leftAnchor->get_relativeTo() );
            							}
            							else {
HXLINE(  62)								_hx_tmp2 = false;
            							}
HXDLIN(  62)							if (_hx_tmp2) {
HXLINE(  62)								_hx_tmp1 = ::hx::IsNull( rightAnchor->get_relativeTo() );
            							}
            							else {
HXLINE(  62)								_hx_tmp1 = false;
            							}
HXDLIN(  62)							if (_hx_tmp1) {
HXLINE(  63)								 ::Dynamic measurements1 = measurements->width;
HXDLIN(  63)								Float _hx_tmp4 = (( (Float)(measurements1) ) - leftAnchor->get_value());
HXDLIN(  63)								item->set_width((_hx_tmp4 - rightAnchor->get_value()));
            							}
            						}
HXLINE(  66)						if (::hx::IsNotNull( measurements->height )) {
HXLINE(  67)							 ::feathers::layout::Anchor topAnchor = layoutData->get_top();
HXLINE(  68)							 ::feathers::layout::Anchor bottomAnchor = layoutData->get_bottom();
HXLINE(  69)							bool _hx_tmp5;
HXDLIN(  69)							bool _hx_tmp6;
HXDLIN(  69)							bool _hx_tmp7;
HXDLIN(  69)							if (::hx::IsNotNull( topAnchor )) {
HXLINE(  69)								_hx_tmp7 = ::hx::IsNotNull( bottomAnchor );
            							}
            							else {
HXLINE(  69)								_hx_tmp7 = false;
            							}
HXDLIN(  69)							if (_hx_tmp7) {
HXLINE(  69)								_hx_tmp6 = ::hx::IsNull( topAnchor->get_relativeTo() );
            							}
            							else {
HXLINE(  69)								_hx_tmp6 = false;
            							}
HXDLIN(  69)							if (_hx_tmp6) {
HXLINE(  69)								_hx_tmp5 = ::hx::IsNull( bottomAnchor->get_relativeTo() );
            							}
            							else {
HXLINE(  69)								_hx_tmp5 = false;
            							}
HXDLIN(  69)							if (_hx_tmp5) {
HXLINE(  70)								 ::Dynamic measurements2 = measurements->height;
HXDLIN(  70)								Float _hx_tmp8 = (( (Float)(measurements2) ) - topAnchor->get_value());
HXDLIN(  70)								item->set_height((_hx_tmp8 - bottomAnchor->get_value()));
            							}
            						}
            					}
            				}
HXLINE(  75)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE(  76)					::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            				}
            			}
            		}
HXLINE(  80)		Float maxX = ((Float)0.0);
HXLINE(  81)		Float maxY = ((Float)0.0);
HXLINE(  82)		::Array< ::Dynamic> doneItems = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  83)		while((doneItems->length < items->length)){
HXLINE(  84)			int oldDoneCount = doneItems->length;
HXLINE(  85)			{
HXLINE(  85)				int _g1 = 0;
HXDLIN(  85)				while((_g1 < items->length)){
HXLINE(  85)					 ::openfl::display::DisplayObject item1 = items->__get(_g1).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(  85)					_g1 = (_g1 + 1);
HXLINE(  86)					if ((doneItems->indexOf(item1,null()) != -1)) {
HXLINE(  87)						continue;
            					}
HXLINE(  89)					::Dynamic layoutObject1 = null();
HXLINE(  90)					if (::Std_obj::isOfType(item1,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE(  91)						layoutObject1 =  ::hx::interface_check(item1,0xf54ca718);
HXLINE(  92)						if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutObject1))) {
HXLINE(  93)							doneItems->push(item1);
HXLINE(  94)							continue;
            						}
            					}
HXLINE(  97)					 ::feathers::layout::AnchorLayoutData layoutData1 = null();
HXLINE(  98)					bool _hx_tmp9;
HXDLIN(  98)					if (::hx::IsNotNull( layoutObject1 )) {
HXLINE(  98)						_hx_tmp9 = ::Std_obj::isOfType(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutObject1),::hx::ClassOf< ::feathers::layout::AnchorLayoutData >());
            					}
            					else {
HXLINE(  98)						_hx_tmp9 = false;
            					}
HXDLIN(  98)					if (_hx_tmp9) {
HXLINE(  99)						layoutData1 = ::hx::TCast<  ::feathers::layout::AnchorLayoutData >::cast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutObject1));
            					}
HXLINE( 102)					if (::Std_obj::isOfType(item1,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 103)						::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item1,0x64d4b3cd));
            					}
HXLINE( 106)					if (::hx::IsNull( layoutData1 )) {
HXLINE( 107)						Float itemMaxX = item1->get_x();
HXDLIN( 107)						Float itemMaxX1 = (itemMaxX + item1->get_width());
HXLINE( 108)						if ((maxX < itemMaxX1)) {
HXLINE( 109)							maxX = itemMaxX1;
            						}
HXLINE( 111)						Float itemMaxY = item1->get_y();
HXDLIN( 111)						Float itemMaxY1 = (itemMaxY + item1->get_height());
HXLINE( 112)						if ((maxY < itemMaxY1)) {
HXLINE( 113)							maxY = itemMaxY1;
            						}
            					}
            					else {
HXLINE( 117)						if (::hx::IsNotNull( layoutData1->get_top() )) {
HXLINE( 118)							 ::feathers::layout::Anchor top = layoutData1->get_top();
HXLINE( 119)							Float value = top->get_value();
HXLINE( 120)							 ::openfl::display::DisplayObject relativeTo = top->get_relativeTo();
HXLINE( 121)							bool _hx_tmp10;
HXDLIN( 121)							if (::hx::IsNotNull( relativeTo )) {
HXLINE( 121)								_hx_tmp10 = (doneItems->indexOf(relativeTo,null()) == -1);
            							}
            							else {
HXLINE( 121)								_hx_tmp10 = false;
            							}
HXDLIN( 121)							if (_hx_tmp10) {
HXLINE( 122)								continue;
            							}
HXLINE( 124)							item1->set_y(value);
HXLINE( 125)							if (::hx::IsNotNull( relativeTo )) {
HXLINE( 126)								Float _hx_tmp11 = item1->get_y();
HXDLIN( 126)								Float _hx_tmp12 = relativeTo->get_y();
HXDLIN( 126)								item1->set_y((_hx_tmp11 + (_hx_tmp12 + relativeTo->get_height())));
            							}
            						}
HXLINE( 129)						if (::hx::IsNotNull( layoutData1->get_left() )) {
HXLINE( 130)							 ::feathers::layout::Anchor left = layoutData1->get_left();
HXLINE( 131)							Float value1 = left->get_value();
HXLINE( 132)							 ::openfl::display::DisplayObject relativeTo1 = left->get_relativeTo();
HXLINE( 133)							bool _hx_tmp13;
HXDLIN( 133)							if (::hx::IsNotNull( relativeTo1 )) {
HXLINE( 133)								_hx_tmp13 = (doneItems->indexOf(relativeTo1,null()) == -1);
            							}
            							else {
HXLINE( 133)								_hx_tmp13 = false;
            							}
HXDLIN( 133)							if (_hx_tmp13) {
HXLINE( 134)								continue;
            							}
HXLINE( 136)							item1->set_x(value1);
HXLINE( 137)							if (::hx::IsNotNull( relativeTo1 )) {
HXLINE( 138)								Float _hx_tmp14 = item1->get_x();
HXDLIN( 138)								Float _hx_tmp15 = relativeTo1->get_x();
HXDLIN( 138)								item1->set_x((_hx_tmp14 + (_hx_tmp15 + relativeTo1->get_width())));
            							}
            						}
HXLINE( 141)						if (::hx::IsNull( layoutData1->get_verticalCenter() )) {
HXLINE( 142)							Float itemMaxY2 = item1->get_y();
HXDLIN( 142)							Float itemMaxY3 = (itemMaxY2 + item1->get_height());
HXLINE( 143)							if (::hx::IsNotNull( layoutData1->get_bottom() )) {
HXLINE( 144)								 ::feathers::layout::Anchor bottom = layoutData1->get_bottom();
HXLINE( 145)								Float value2 = bottom->get_value();
HXLINE( 146)								if (::hx::IsNotNull( layoutData1->get_top() )) {
HXLINE( 147)									itemMaxY3 = (itemMaxY3 + value2);
            								}
            								else {
HXLINE( 149)									itemMaxY3 = (item1->get_height() + value2);
            								}
            							}
HXLINE( 152)							if ((maxY < itemMaxY3)) {
HXLINE( 153)								maxY = itemMaxY3;
            							}
            						}
            						else {
HXLINE( 156)							Float itemMaxY4 = item1->get_height();
HXLINE( 157)							if ((maxY < itemMaxY4)) {
HXLINE( 158)								maxY = itemMaxY4;
            							}
            						}
HXLINE( 161)						if (::hx::IsNull( layoutData1->get_horizontalCenter() )) {
HXLINE( 162)							Float itemMaxX2 = item1->get_x();
HXDLIN( 162)							Float itemMaxX3 = (itemMaxX2 + item1->get_width());
HXLINE( 163)							if (::hx::IsNotNull( layoutData1->get_right() )) {
HXLINE( 164)								 ::feathers::layout::Anchor right = layoutData1->get_right();
HXLINE( 165)								Float value3 = right->get_value();
HXLINE( 166)								if (::hx::IsNotNull( layoutData1->get_left() )) {
HXLINE( 167)									itemMaxX3 = (itemMaxX3 + value3);
            								}
            								else {
HXLINE( 169)									itemMaxX3 = (item1->get_width() + value3);
            								}
            							}
HXLINE( 172)							if ((maxX < itemMaxX3)) {
HXLINE( 173)								maxX = itemMaxX3;
            							}
            						}
            						else {
HXLINE( 176)							Float itemMaxX4 = item1->get_width();
HXLINE( 177)							if ((maxX < itemMaxX4)) {
HXLINE( 178)								maxX = itemMaxX4;
            							}
            						}
            					}
HXLINE( 182)					doneItems->push(item1);
            				}
            			}
HXLINE( 184)			if ((oldDoneCount == doneItems->length)) {
HXLINE( 185)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("AnchorLayout failed.",d0,a9,c6,12)));
            			}
            		}
HXLINE( 188)		Float viewPortWidth = ((Float)0.0);
HXLINE( 189)		Float viewPortHeight = ((Float)0.0);
HXLINE( 190)		int loopCount = 0;
HXLINE( 191)		bool needsAnotherPass = true;
HXLINE( 192)		while(needsAnotherPass){
HXLINE( 193)			needsAnotherPass = false;
HXLINE( 194)			if (::hx::IsNotNull( measurements->width )) {
HXLINE( 195)				viewPortWidth = ( (Float)(measurements->width) );
            			}
            			else {
HXLINE( 197)				viewPortWidth = maxX;
HXLINE( 198)				bool _hx_tmp16;
HXDLIN( 198)				if (::hx::IsNotNull( measurements->minWidth )) {
HXLINE( 198)					_hx_tmp16 = ::hx::IsLess( viewPortWidth,measurements->minWidth );
            				}
            				else {
HXLINE( 198)					_hx_tmp16 = false;
            				}
HXDLIN( 198)				if (_hx_tmp16) {
HXLINE( 199)					viewPortWidth = ( (Float)(measurements->minWidth) );
            				}
            				else {
HXLINE( 200)					bool _hx_tmp17;
HXDLIN( 200)					if (::hx::IsNotNull( measurements->maxWidth )) {
HXLINE( 200)						_hx_tmp17 = ::hx::IsGreater( viewPortWidth,measurements->maxWidth );
            					}
            					else {
HXLINE( 200)						_hx_tmp17 = false;
            					}
HXDLIN( 200)					if (_hx_tmp17) {
HXLINE( 201)						viewPortWidth = ( (Float)(measurements->maxWidth) );
            					}
            				}
            			}
HXLINE( 204)			if (::hx::IsNotNull( measurements->height )) {
HXLINE( 205)				viewPortHeight = ( (Float)(measurements->height) );
            			}
            			else {
HXLINE( 207)				viewPortHeight = maxY;
HXLINE( 208)				bool _hx_tmp18;
HXDLIN( 208)				if (::hx::IsNotNull( measurements->minHeight )) {
HXLINE( 208)					_hx_tmp18 = ::hx::IsLess( viewPortHeight,measurements->minHeight );
            				}
            				else {
HXLINE( 208)					_hx_tmp18 = false;
            				}
HXDLIN( 208)				if (_hx_tmp18) {
HXLINE( 209)					viewPortHeight = ( (Float)(measurements->minHeight) );
            				}
            				else {
HXLINE( 210)					bool _hx_tmp19;
HXDLIN( 210)					if (::hx::IsNotNull( measurements->maxHeight )) {
HXLINE( 210)						_hx_tmp19 = ::hx::IsGreater( viewPortHeight,measurements->maxHeight );
            					}
            					else {
HXLINE( 210)						_hx_tmp19 = false;
            					}
HXDLIN( 210)					if (_hx_tmp19) {
HXLINE( 211)						viewPortHeight = ( (Float)(measurements->maxHeight) );
            					}
            				}
            			}
HXLINE( 217)			doneItems->resize(0);
HXLINE( 219)			while((doneItems->length < items->length)){
HXLINE( 220)				int oldDoneCount1 = doneItems->length;
HXLINE( 221)				{
HXLINE( 221)					int _g2 = 0;
HXDLIN( 221)					while((_g2 < items->length)){
HXLINE( 221)						 ::openfl::display::DisplayObject item2 = items->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 221)						_g2 = (_g2 + 1);
HXLINE( 222)						if ((doneItems->indexOf(item2,null()) != -1)) {
HXLINE( 224)							continue;
            						}
HXLINE( 226)						::Dynamic layoutObject2 = null();
HXLINE( 227)						if (::Std_obj::isOfType(item2,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 228)							layoutObject2 =  ::hx::interface_check(item2,0xf54ca718);
HXLINE( 229)							if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutObject2))) {
HXLINE( 230)								doneItems->push(item2);
HXLINE( 231)								continue;
            							}
            						}
HXLINE( 234)						 ::feathers::layout::AnchorLayoutData layoutData2 = null();
HXLINE( 235)						bool _hx_tmp20;
HXDLIN( 235)						if (::hx::IsNotNull( layoutObject2 )) {
HXLINE( 235)							_hx_tmp20 = ::Std_obj::isOfType(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutObject2),::hx::ClassOf< ::feathers::layout::AnchorLayoutData >());
            						}
            						else {
HXLINE( 235)							_hx_tmp20 = false;
            						}
HXDLIN( 235)						if (_hx_tmp20) {
HXLINE( 236)							layoutData2 = ::hx::TCast<  ::feathers::layout::AnchorLayoutData >::cast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutObject2));
            						}
HXLINE( 238)						if (::hx::IsNull( layoutData2 )) {
HXLINE( 239)							doneItems->push(item2);
HXLINE( 240)							continue;
            						}
HXLINE( 242)						if (::hx::IsNotNull( layoutData2->get_top() )) {
HXLINE( 243)							 ::feathers::layout::Anchor top1 = layoutData2->get_top();
HXLINE( 244)							 ::openfl::display::DisplayObject relativeTo2 = top1->get_relativeTo();
HXLINE( 245)							bool _hx_tmp21;
HXDLIN( 245)							if (::hx::IsNotNull( relativeTo2 )) {
HXLINE( 245)								_hx_tmp21 = (doneItems->indexOf(relativeTo2,null()) == -1);
            							}
            							else {
HXLINE( 245)								_hx_tmp21 = false;
            							}
HXDLIN( 245)							if (_hx_tmp21) {
HXLINE( 246)								continue;
            							}
HXLINE( 248)							Float y = top1->get_value();
HXLINE( 249)							if (::hx::IsNotNull( relativeTo2 )) {
HXLINE( 250)								Float y1 = relativeTo2->get_y();
HXDLIN( 250)								y = (y + (y1 + relativeTo2->get_height()));
            							}
HXLINE( 252)							item2->set_y(y);
            						}
HXLINE( 254)						if (::hx::IsNotNull( layoutData2->get_left() )) {
HXLINE( 255)							 ::feathers::layout::Anchor left1 = layoutData2->get_left();
HXLINE( 256)							 ::openfl::display::DisplayObject relativeTo3 = left1->get_relativeTo();
HXLINE( 257)							bool _hx_tmp22;
HXDLIN( 257)							if (::hx::IsNotNull( relativeTo3 )) {
HXLINE( 257)								_hx_tmp22 = (doneItems->indexOf(relativeTo3,null()) == -1);
            							}
            							else {
HXLINE( 257)								_hx_tmp22 = false;
            							}
HXDLIN( 257)							if (_hx_tmp22) {
HXLINE( 258)								continue;
            							}
HXLINE( 260)							Float x = left1->get_value();
HXLINE( 261)							if (::hx::IsNotNull( relativeTo3 )) {
HXLINE( 262)								Float x1 = relativeTo3->get_x();
HXDLIN( 262)								x = (x + (x1 + relativeTo3->get_width()));
            							}
HXLINE( 264)							item2->set_x(x);
            						}
HXLINE( 266)						if (::hx::IsNotNull( layoutData2->get_bottom() )) {
HXLINE( 267)							 ::feathers::layout::Anchor bottom1 = layoutData2->get_bottom();
HXLINE( 268)							 ::openfl::display::DisplayObject relativeTo4 = bottom1->get_relativeTo();
HXLINE( 269)							bool _hx_tmp23;
HXDLIN( 269)							if (::hx::IsNotNull( relativeTo4 )) {
HXLINE( 269)								_hx_tmp23 = (doneItems->indexOf(relativeTo4,null()) == -1);
            							}
            							else {
HXLINE( 269)								_hx_tmp23 = false;
            							}
HXDLIN( 269)							if (_hx_tmp23) {
HXLINE( 270)								continue;
            							}
HXLINE( 272)							Float bottomPixels = bottom1->get_value();
HXLINE( 273)							Float bottomEdge = viewPortHeight;
HXLINE( 274)							if (::hx::IsNotNull( relativeTo4 )) {
HXLINE( 275)								bottomEdge = relativeTo4->get_y();
            							}
HXLINE( 277)							if (::hx::IsNull( layoutData2->get_top() )) {
HXLINE( 278)								item2->set_y(((bottomEdge - bottomPixels) - item2->get_height()));
            							}
            							else {
HXLINE( 280)								Float itemHeight = ((bottomEdge - bottomPixels) - item2->get_y());
HXLINE( 281)								if ((itemHeight < ((Float)0.0))) {
HXLINE( 282)									itemHeight = ((Float)0.0);
            								}
HXLINE( 284)								if ((item2->get_height() != itemHeight)) {
HXLINE( 287)									item2->set_height(itemHeight);
HXLINE( 288)									bool _hx_tmp24;
HXDLIN( 288)									if (::hx::IsNull( measurements->width )) {
HXLINE( 288)										_hx_tmp24 = ::Std_obj::isOfType(item2,::hx::ClassOf< ::feathers::core::IValidating >());
            									}
            									else {
HXLINE( 288)										_hx_tmp24 = false;
            									}
HXDLIN( 288)									if (_hx_tmp24) {
HXLINE( 289)										::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item2,0x64d4b3cd));
HXLINE( 296)										Float maxItemX = item2->get_x();
HXDLIN( 296)										Float maxItemX1 = (maxItemX + item2->get_width());
HXLINE( 297)										if ((maxX < maxItemX1)) {
HXLINE( 298)											maxX = maxItemX1;
HXLINE( 299)											needsAnotherPass = true;
HXLINE( 300)											goto _hx_goto_6;
            										}
            									}
            								}
            							}
            						}
            						else {
HXLINE( 305)							if (::hx::IsNotNull( layoutData2->get_verticalCenter() )) {
HXLINE( 306)								 ::Dynamic _hx_tmp25 = layoutData2->get_verticalCenter();
HXDLIN( 306)								item2->set_y((_hx_tmp25 + ((viewPortHeight - item2->get_height()) / ((Float)2.0))));
            							}
            						}
HXLINE( 308)						if (::hx::IsNotNull( layoutData2->get_right() )) {
HXLINE( 309)							 ::feathers::layout::Anchor right1 = layoutData2->get_right();
HXLINE( 310)							 ::openfl::display::DisplayObject relativeTo5 = right1->get_relativeTo();
HXLINE( 311)							bool _hx_tmp26;
HXDLIN( 311)							if (::hx::IsNotNull( relativeTo5 )) {
HXLINE( 311)								_hx_tmp26 = (doneItems->indexOf(relativeTo5,null()) == -1);
            							}
            							else {
HXLINE( 311)								_hx_tmp26 = false;
            							}
HXDLIN( 311)							if (_hx_tmp26) {
HXLINE( 312)								continue;
            							}
HXLINE( 314)							Float rightPixels = right1->get_value();
HXLINE( 315)							Float rightEdge = viewPortWidth;
HXLINE( 316)							if (::hx::IsNotNull( relativeTo5 )) {
HXLINE( 317)								rightEdge = relativeTo5->get_x();
            							}
HXLINE( 319)							if (::hx::IsNull( layoutData2->get_left() )) {
HXLINE( 320)								item2->set_x(((rightEdge - rightPixels) - item2->get_width()));
            							}
            							else {
HXLINE( 322)								Float itemWidth = ((rightEdge - rightPixels) - item2->get_x());
HXLINE( 323)								if ((itemWidth < ((Float)0.0))) {
HXLINE( 324)									itemWidth = ((Float)0.0);
            								}
HXLINE( 326)								if ((item2->get_width() != itemWidth)) {
HXLINE( 329)									item2->set_width(itemWidth);
HXLINE( 330)									bool _hx_tmp27;
HXDLIN( 330)									if (::hx::IsNull( measurements->height )) {
HXLINE( 330)										_hx_tmp27 = ::Std_obj::isOfType(item2,::hx::ClassOf< ::feathers::core::IValidating >());
            									}
            									else {
HXLINE( 330)										_hx_tmp27 = false;
            									}
HXDLIN( 330)									if (_hx_tmp27) {
HXLINE( 331)										::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item2,0x64d4b3cd));
HXLINE( 338)										Float maxItemY = item2->get_y();
HXDLIN( 338)										Float maxItemY1 = (maxItemY + item2->get_height());
HXLINE( 339)										if ((maxY < maxItemY1)) {
HXLINE( 340)											maxY = maxItemY1;
HXLINE( 341)											needsAnotherPass = true;
HXLINE( 342)											goto _hx_goto_6;
            										}
            									}
            								}
            							}
            						}
            						else {
HXLINE( 347)							if (::hx::IsNotNull( layoutData2->get_horizontalCenter() )) {
HXLINE( 348)								 ::Dynamic _hx_tmp28 = layoutData2->get_horizontalCenter();
HXDLIN( 348)								item2->set_x((_hx_tmp28 + ((viewPortWidth - item2->get_width()) / ((Float)2.0))));
            							}
            						}
HXLINE( 350)						doneItems->push(item2);
            					}
            					_hx_goto_6:;
            				}
HXLINE( 352)				bool _hx_tmp29;
HXDLIN( 352)				if (!(needsAnotherPass)) {
HXLINE( 352)					_hx_tmp29 = (oldDoneCount1 == doneItems->length);
            				}
            				else {
HXLINE( 352)					_hx_tmp29 = false;
            				}
HXDLIN( 352)				if (_hx_tmp29) {
HXLINE( 353)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("AnchorLayout failed.",d0,a9,c6,12)));
            				}
            			}
HXLINE( 356)			if (needsAnotherPass) {
HXLINE( 357)				loopCount = (loopCount + 1);
HXLINE( 358)				if ((loopCount > items->length)) {
HXLINE( 359)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("AnchorLayout is stuck in an infinite loop.",cf,39,d1,5f)));
            				}
            			}
            		}
HXLINE( 363)		if (::hx::IsNull( result )) {
HXLINE( 364)			result =  ::feathers::layout::LayoutBoundsResult_obj::__alloc( HX_CTX );
            		}
HXLINE( 366)		result->contentX = ((Float)0.0);
HXLINE( 367)		result->contentY = ((Float)0.0);
HXLINE( 368)		result->contentWidth = viewPortWidth;
HXLINE( 369)		result->contentHeight = viewPortHeight;
HXLINE( 370)		result->viewPortWidth = viewPortWidth;
HXLINE( 371)		result->viewPortHeight = viewPortHeight;
HXLINE( 372)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC3(AnchorLayout_obj,layout,return )


::hx::ObjectPtr< AnchorLayout_obj > AnchorLayout_obj::__new() {
	::hx::ObjectPtr< AnchorLayout_obj > __this = new AnchorLayout_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< AnchorLayout_obj > AnchorLayout_obj::__alloc(::hx::Ctx *_hx_ctx) {
	AnchorLayout_obj *__this = (AnchorLayout_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AnchorLayout_obj), true, "feathers.layout.AnchorLayout"));
	*(void **)__this = AnchorLayout_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

AnchorLayout_obj::AnchorLayout_obj()
{
}

::hx::Val AnchorLayout_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"layout") ) { return ::hx::Val( layout_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *AnchorLayout_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *AnchorLayout_obj_sStaticStorageInfo = 0;
#endif

static ::String AnchorLayout_obj_sMemberFields[] = {
	HX_("layout",aa,ae,b8,58),
	::String(null()) };

::hx::Class AnchorLayout_obj::__mClass;

void AnchorLayout_obj::__register()
{
	AnchorLayout_obj _hx_dummy;
	AnchorLayout_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.layout.AnchorLayout",e5,6c,c7,5b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AnchorLayout_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AnchorLayout_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnchorLayout_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnchorLayout_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace layout
