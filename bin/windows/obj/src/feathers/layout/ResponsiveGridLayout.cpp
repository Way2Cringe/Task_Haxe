// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_events_FeathersEvent
#include <feathers/events/FeathersEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_Breakpoint
#include <feathers/layout/Breakpoint.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayout
#include <feathers/layout/ILayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutData
#include <feathers/layout/ILayoutData.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_LayoutBoundsResult
#include <feathers/layout/LayoutBoundsResult.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_layout_ResponsiveGridLayout
#include <feathers/layout/ResponsiveGridLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ResponsiveGridLayoutData
#include <feathers/layout/ResponsiveGridLayoutData.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalAlign
#include <feathers/layout/VerticalAlign.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_05ac24870dc0e384_36_new,"feathers.layout.ResponsiveGridLayout","new",0xfb1d1dfc,"feathers.layout.ResponsiveGridLayout.new","feathers/layout/ResponsiveGridLayout.hx",36,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_69_get_columnCount,"feathers.layout.ResponsiveGridLayout","get_columnCount",0x91e0dd4c,"feathers.layout.ResponsiveGridLayout.get_columnCount","feathers/layout/ResponsiveGridLayout.hx",69,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_72_set_columnCount,"feathers.layout.ResponsiveGridLayout","set_columnCount",0x8dac5a58,"feathers.layout.ResponsiveGridLayout.set_columnCount","feathers/layout/ResponsiveGridLayout.hx",72,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_98_get_sm,"feathers.layout.ResponsiveGridLayout","get_sm",0x189217c7,"feathers.layout.ResponsiveGridLayout.get_sm","feathers/layout/ResponsiveGridLayout.hx",98,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_101_set_sm,"feathers.layout.ResponsiveGridLayout","set_sm",0xe4da6c3b,"feathers.layout.ResponsiveGridLayout.set_sm","feathers/layout/ResponsiveGridLayout.hx",101,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_128_get_md,"feathers.layout.ResponsiveGridLayout","get_md",0x18921284,"feathers.layout.ResponsiveGridLayout.get_md","feathers/layout/ResponsiveGridLayout.hx",128,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_131_set_md,"feathers.layout.ResponsiveGridLayout","set_md",0xe4da66f8,"feathers.layout.ResponsiveGridLayout.set_md","feathers/layout/ResponsiveGridLayout.hx",131,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_158_get_lg,"feathers.layout.ResponsiveGridLayout","get_lg",0x189211a8,"feathers.layout.ResponsiveGridLayout.get_lg","feathers/layout/ResponsiveGridLayout.hx",158,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_161_set_lg,"feathers.layout.ResponsiveGridLayout","set_lg",0xe4da661c,"feathers.layout.ResponsiveGridLayout.set_lg","feathers/layout/ResponsiveGridLayout.hx",161,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_188_get_xl,"feathers.layout.ResponsiveGridLayout","get_xl",0x18921c21,"feathers.layout.ResponsiveGridLayout.get_xl","feathers/layout/ResponsiveGridLayout.hx",188,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_191_set_xl,"feathers.layout.ResponsiveGridLayout","set_xl",0xe4da7095,"feathers.layout.ResponsiveGridLayout.set_xl","feathers/layout/ResponsiveGridLayout.hx",191,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_218_get_xxl,"feathers.layout.ResponsiveGridLayout","get_xxl",0x67468b9f,"feathers.layout.ResponsiveGridLayout.get_xxl","feathers/layout/ResponsiveGridLayout.hx",218,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_221_set_xxl,"feathers.layout.ResponsiveGridLayout","set_xxl",0x5a481cab,"feathers.layout.ResponsiveGridLayout.set_xxl","feathers/layout/ResponsiveGridLayout.hx",221,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_247_get_rowGap,"feathers.layout.ResponsiveGridLayout","get_rowGap",0xa4f76cc9,"feathers.layout.ResponsiveGridLayout.get_rowGap","feathers/layout/ResponsiveGridLayout.hx",247,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_250_set_rowGap,"feathers.layout.ResponsiveGridLayout","set_rowGap",0xa8750b3d,"feathers.layout.ResponsiveGridLayout.set_rowGap","feathers/layout/ResponsiveGridLayout.hx",250,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_276_get_columnGap,"feathers.layout.ResponsiveGridLayout","get_columnGap",0x9ddc0c53,"feathers.layout.ResponsiveGridLayout.get_columnGap","feathers/layout/ResponsiveGridLayout.hx",276,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_279_set_columnGap,"feathers.layout.ResponsiveGridLayout","set_columnGap",0xe2e1ee5f,"feathers.layout.ResponsiveGridLayout.set_columnGap","feathers/layout/ResponsiveGridLayout.hx",279,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_308_get_paddingTop,"feathers.layout.ResponsiveGridLayout","get_paddingTop",0xac722571,"feathers.layout.ResponsiveGridLayout.get_paddingTop","feathers/layout/ResponsiveGridLayout.hx",308,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_311_set_paddingTop,"feathers.layout.ResponsiveGridLayout","set_paddingTop",0xcc920de5,"feathers.layout.ResponsiveGridLayout.set_paddingTop","feathers/layout/ResponsiveGridLayout.hx",311,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_340_get_paddingRight,"feathers.layout.ResponsiveGridLayout","get_paddingRight",0x1e9039b8,"feathers.layout.ResponsiveGridLayout.get_paddingRight","feathers/layout/ResponsiveGridLayout.hx",340,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_343_set_paddingRight,"feathers.layout.ResponsiveGridLayout","set_paddingRight",0x74d2272c,"feathers.layout.ResponsiveGridLayout.set_paddingRight","feathers/layout/ResponsiveGridLayout.hx",343,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_372_get_paddingBottom,"feathers.layout.ResponsiveGridLayout","get_paddingBottom",0xb6f4d98f,"feathers.layout.ResponsiveGridLayout.get_paddingBottom","feathers/layout/ResponsiveGridLayout.hx",372,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_375_set_paddingBottom,"feathers.layout.ResponsiveGridLayout","set_paddingBottom",0xda62b19b,"feathers.layout.ResponsiveGridLayout.set_paddingBottom","feathers/layout/ResponsiveGridLayout.hx",375,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_404_get_paddingLeft,"feathers.layout.ResponsiveGridLayout","get_paddingLeft",0x321d49ab,"feathers.layout.ResponsiveGridLayout.get_paddingLeft","feathers/layout/ResponsiveGridLayout.hx",404,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_407_set_paddingLeft,"feathers.layout.ResponsiveGridLayout","set_paddingLeft",0x2de8c6b7,"feathers.layout.ResponsiveGridLayout.set_paddingLeft","feathers/layout/ResponsiveGridLayout.hx",407,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_442_get_rowVerticalAlign,"feathers.layout.ResponsiveGridLayout","get_rowVerticalAlign",0xaccacbe2,"feathers.layout.ResponsiveGridLayout.get_rowVerticalAlign","feathers/layout/ResponsiveGridLayout.hx",442,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_445_set_rowVerticalAlign,"feathers.layout.ResponsiveGridLayout","set_rowVerticalAlign",0x79828356,"feathers.layout.ResponsiveGridLayout.set_rowVerticalAlign","feathers/layout/ResponsiveGridLayout.hx",445,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_468_get_justifyResetEnabled,"feathers.layout.ResponsiveGridLayout","get_justifyResetEnabled",0x40b71815,"feathers.layout.ResponsiveGridLayout.get_justifyResetEnabled","feathers/layout/ResponsiveGridLayout.hx",468,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_471_set_justifyResetEnabled,"feathers.layout.ResponsiveGridLayout","set_justifyResetEnabled",0x43188121,"feathers.layout.ResponsiveGridLayout.set_justifyResetEnabled","feathers/layout/ResponsiveGridLayout.hx",471,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_490_setPadding,"feathers.layout.ResponsiveGridLayout","setPadding",0x0ac45c33,"feathers.layout.ResponsiveGridLayout.setPadding","feathers/layout/ResponsiveGridLayout.hx",490,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_505_setGap,"feathers.layout.ResponsiveGridLayout","setGap",0xe4c82678,"feathers.layout.ResponsiveGridLayout.setGap","feathers/layout/ResponsiveGridLayout.hx",505,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_515_layout,"feathers.layout.ResponsiveGridLayout","layout",0xce1aca8e,"feathers.layout.ResponsiveGridLayout.layout","feathers/layout/ResponsiveGridLayout.hx",515,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_548_layoutItems,"feathers.layout.ResponsiveGridLayout","layoutItems",0x06704e92,"feathers.layout.ResponsiveGridLayout.layoutItems","feathers/layout/ResponsiveGridLayout.hx",548,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_606_alignRow,"feathers.layout.ResponsiveGridLayout","alignRow",0xf0e9e939,"feathers.layout.ResponsiveGridLayout.alignRow","feathers/layout/ResponsiveGridLayout.hx",606,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_627_positionItem,"feathers.layout.ResponsiveGridLayout","positionItem",0xe3a1b940,"feathers.layout.ResponsiveGridLayout.positionItem","feathers/layout/ResponsiveGridLayout.hx",627,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_639_getBreakpoint,"feathers.layout.ResponsiveGridLayout","getBreakpoint",0xe7924003,"feathers.layout.ResponsiveGridLayout.getBreakpoint","feathers/layout/ResponsiveGridLayout.hx",639,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_658_getSpan,"feathers.layout.ResponsiveGridLayout","getSpan",0x5f51d61c,"feathers.layout.ResponsiveGridLayout.getSpan","feathers/layout/ResponsiveGridLayout.hx",658,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_678_getOffset,"feathers.layout.ResponsiveGridLayout","getOffset",0xdfeb8b65,"feathers.layout.ResponsiveGridLayout.getOffset","feathers/layout/ResponsiveGridLayout.hx",678,0x7e5d86d4)
HX_LOCAL_STACK_FRAME(_hx_pos_05ac24870dc0e384_698_getDisplay,"feathers.layout.ResponsiveGridLayout","getDisplay",0xf2138e30,"feathers.layout.ResponsiveGridLayout.getDisplay","feathers/layout/ResponsiveGridLayout.hx",698,0x7e5d86d4)
namespace feathers{
namespace layout{

void ResponsiveGridLayout_obj::__construct(::hx::Null< int >  __o_columnCount,::hx::Null< Float >  __o_sm,::hx::Null< Float >  __o_md,::hx::Null< Float >  __o_lg,::hx::Null< Float >  __o_xl,::hx::Null< Float >  __o_xxl){
            		int columnCount = __o_columnCount.Default(12);
            		Float sm = __o_sm.Default(((Float)576.0));
            		Float md = __o_md.Default(((Float)768.0));
            		Float lg = __o_lg.Default(((Float)992.0));
            		Float xl = __o_xl.Default(((Float)1200.0));
            		Float xxl = __o_xxl.Default(((Float)1400.0));
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_36_new)
HXLINE( 510)		this->_rowItems = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 454)		this->_justifyResetEnabled = false;
HXLINE( 416)		this->_rowVerticalAlign = ::feathers::layout::VerticalAlign_obj::TOP_dyn();
HXLINE( 384)		this->_paddingLeft = ((Float)0.0);
HXLINE( 352)		this->_paddingBottom = ((Float)0.0);
HXLINE( 320)		this->_paddingRight = ((Float)0.0);
HXLINE( 288)		this->_paddingTop = ((Float)0.0);
HXLINE( 259)		this->_columnGap = ((Float)0.0);
HXLINE( 230)		this->_rowGap = ((Float)0.0);
HXLINE( 200)		this->_xxl = ((Float)1400.0);
HXLINE( 170)		this->_xl = ((Float)1200.0);
HXLINE( 140)		this->_lg = ((Float)992.0);
HXLINE( 110)		this->_md = ((Float)768.0);
HXLINE(  81)		this->_sm = ((Float)576.0);
HXLINE(  43)		super::__construct(null());
HXLINE(  44)		this->_columnCount = columnCount;
HXLINE(  45)		this->_sm = sm;
HXLINE(  46)		this->_md = md;
HXLINE(  47)		this->_lg = lg;
HXLINE(  48)		this->_xl = xl;
HXLINE(  49)		this->_xxl = xxl;
            	}

Dynamic ResponsiveGridLayout_obj::__CreateEmpty() { return new ResponsiveGridLayout_obj; }

void *ResponsiveGridLayout_obj::_hx_vtable = 0;

Dynamic ResponsiveGridLayout_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ResponsiveGridLayout_obj > _hx_result = new ResponsiveGridLayout_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool ResponsiveGridLayout_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x1e7e1b9e;
	}
}

static ::openfl::events::IEventDispatcher_obj _hx_feathers_layout_ResponsiveGridLayout__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::ResponsiveGridLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::ResponsiveGridLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::ResponsiveGridLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::ResponsiveGridLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::ResponsiveGridLayout_obj::willTrigger,
};

static ::feathers::layout::ILayout_obj _hx_feathers_layout_ResponsiveGridLayout__hx_feathers_layout_ILayout= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::ResponsiveGridLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::ResponsiveGridLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::ResponsiveGridLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::ResponsiveGridLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::ResponsiveGridLayout_obj::willTrigger,
	(  ::feathers::layout::LayoutBoundsResult (::hx::Object::*)(::Array< ::Dynamic>, ::feathers::layout::Measurements, ::feathers::layout::LayoutBoundsResult))&::feathers::layout::ResponsiveGridLayout_obj::layout,
};

void *ResponsiveGridLayout_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x87530281: return &_hx_feathers_layout_ResponsiveGridLayout__hx_openfl_events_IEventDispatcher;
		case (int)0x3e135379: return &_hx_feathers_layout_ResponsiveGridLayout__hx_feathers_layout_ILayout;
	}
	return super::_hx_getInterface(inHash);
}

int ResponsiveGridLayout_obj::get_columnCount(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_69_get_columnCount)
HXDLIN(  69)		return this->_columnCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_columnCount,return )

int ResponsiveGridLayout_obj::set_columnCount(int value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_72_set_columnCount)
HXLINE(  73)		if ((this->_columnCount == value)) {
HXLINE(  74)			return this->_columnCount;
            		}
HXLINE(  76)		this->_columnCount = value;
HXLINE(  77)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE(  78)		return this->_columnCount;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_columnCount,return )

Float ResponsiveGridLayout_obj::get_sm(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_98_get_sm)
HXDLIN(  98)		return this->_sm;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_sm,return )

Float ResponsiveGridLayout_obj::set_sm(Float value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_101_set_sm)
HXLINE( 102)		if ((this->_sm == value)) {
HXLINE( 103)			return this->_sm;
            		}
HXLINE( 105)		this->_sm = value;
HXLINE( 106)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 107)		return this->_sm;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_sm,return )

Float ResponsiveGridLayout_obj::get_md(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_128_get_md)
HXDLIN( 128)		return this->_md;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_md,return )

Float ResponsiveGridLayout_obj::set_md(Float value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_131_set_md)
HXLINE( 132)		if ((this->_md == value)) {
HXLINE( 133)			return this->_md;
            		}
HXLINE( 135)		this->_md = value;
HXLINE( 136)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 137)		return this->_md;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_md,return )

Float ResponsiveGridLayout_obj::get_lg(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_158_get_lg)
HXDLIN( 158)		return this->_lg;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_lg,return )

Float ResponsiveGridLayout_obj::set_lg(Float value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_161_set_lg)
HXLINE( 162)		if ((this->_lg == value)) {
HXLINE( 163)			return this->_lg;
            		}
HXLINE( 165)		this->_lg = value;
HXLINE( 166)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 167)		return this->_lg;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_lg,return )

Float ResponsiveGridLayout_obj::get_xl(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_188_get_xl)
HXDLIN( 188)		return this->_xl;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_xl,return )

Float ResponsiveGridLayout_obj::set_xl(Float value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_191_set_xl)
HXLINE( 192)		if ((this->_xl == value)) {
HXLINE( 193)			return this->_xl;
            		}
HXLINE( 195)		this->_xl = value;
HXLINE( 196)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 197)		return this->_xl;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_xl,return )

Float ResponsiveGridLayout_obj::get_xxl(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_218_get_xxl)
HXDLIN( 218)		return this->_xxl;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_xxl,return )

Float ResponsiveGridLayout_obj::set_xxl(Float value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_221_set_xxl)
HXLINE( 222)		if ((this->_xxl == value)) {
HXLINE( 223)			return this->_xxl;
            		}
HXLINE( 225)		this->_xxl = value;
HXLINE( 226)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 227)		return this->_xxl;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_xxl,return )

Float ResponsiveGridLayout_obj::get_rowGap(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_247_get_rowGap)
HXDLIN( 247)		return this->_rowGap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_rowGap,return )

Float ResponsiveGridLayout_obj::set_rowGap(Float value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_250_set_rowGap)
HXLINE( 251)		if ((this->_rowGap == value)) {
HXLINE( 252)			return this->_rowGap;
            		}
HXLINE( 254)		this->_rowGap = value;
HXLINE( 255)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 256)		return this->_rowGap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_rowGap,return )

Float ResponsiveGridLayout_obj::get_columnGap(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_276_get_columnGap)
HXDLIN( 276)		return this->_columnGap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_columnGap,return )

Float ResponsiveGridLayout_obj::set_columnGap(Float value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_279_set_columnGap)
HXLINE( 280)		if ((this->_columnGap == value)) {
HXLINE( 281)			return this->_columnGap;
            		}
HXLINE( 283)		this->_columnGap = value;
HXLINE( 284)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 285)		return this->_columnGap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_columnGap,return )

Float ResponsiveGridLayout_obj::get_paddingTop(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_308_get_paddingTop)
HXDLIN( 308)		return this->_paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_paddingTop,return )

Float ResponsiveGridLayout_obj::set_paddingTop(Float value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_311_set_paddingTop)
HXLINE( 312)		if ((this->_paddingTop == value)) {
HXLINE( 313)			return this->_paddingTop;
            		}
HXLINE( 315)		this->_paddingTop = value;
HXLINE( 316)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 317)		return this->_paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_paddingTop,return )

Float ResponsiveGridLayout_obj::get_paddingRight(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_340_get_paddingRight)
HXDLIN( 340)		return this->_paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_paddingRight,return )

Float ResponsiveGridLayout_obj::set_paddingRight(Float value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_343_set_paddingRight)
HXLINE( 344)		if ((this->_paddingRight == value)) {
HXLINE( 345)			return this->_paddingRight;
            		}
HXLINE( 347)		this->_paddingRight = value;
HXLINE( 348)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 349)		return this->_paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_paddingRight,return )

Float ResponsiveGridLayout_obj::get_paddingBottom(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_372_get_paddingBottom)
HXDLIN( 372)		return this->_paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_paddingBottom,return )

Float ResponsiveGridLayout_obj::set_paddingBottom(Float value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_375_set_paddingBottom)
HXLINE( 376)		if ((this->_paddingBottom == value)) {
HXLINE( 377)			return this->_paddingBottom;
            		}
HXLINE( 379)		this->_paddingBottom = value;
HXLINE( 380)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 381)		return this->_paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_paddingBottom,return )

Float ResponsiveGridLayout_obj::get_paddingLeft(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_404_get_paddingLeft)
HXDLIN( 404)		return this->_paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_paddingLeft,return )

Float ResponsiveGridLayout_obj::set_paddingLeft(Float value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_407_set_paddingLeft)
HXLINE( 408)		if ((this->_paddingLeft == value)) {
HXLINE( 409)			return this->_paddingLeft;
            		}
HXLINE( 411)		this->_paddingLeft = value;
HXLINE( 412)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 413)		return this->_paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_paddingLeft,return )

 ::feathers::layout::VerticalAlign ResponsiveGridLayout_obj::get_rowVerticalAlign(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_442_get_rowVerticalAlign)
HXDLIN( 442)		return this->_rowVerticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_rowVerticalAlign,return )

 ::feathers::layout::VerticalAlign ResponsiveGridLayout_obj::set_rowVerticalAlign( ::feathers::layout::VerticalAlign value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_445_set_rowVerticalAlign)
HXLINE( 446)		if (::hx::IsPointerEq( this->_rowVerticalAlign,value )) {
HXLINE( 447)			return this->_rowVerticalAlign;
            		}
HXLINE( 449)		this->_rowVerticalAlign = value;
HXLINE( 450)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 451)		return this->_rowVerticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_rowVerticalAlign,return )

bool ResponsiveGridLayout_obj::get_justifyResetEnabled(){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_468_get_justifyResetEnabled)
HXDLIN( 468)		return this->_justifyResetEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ResponsiveGridLayout_obj,get_justifyResetEnabled,return )

bool ResponsiveGridLayout_obj::set_justifyResetEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_471_set_justifyResetEnabled)
HXLINE( 472)		if ((this->_justifyResetEnabled == value)) {
HXLINE( 473)			return this->_justifyResetEnabled;
            		}
HXLINE( 475)		this->_justifyResetEnabled = value;
HXLINE( 476)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 477)		return this->_justifyResetEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,set_justifyResetEnabled,return )

void ResponsiveGridLayout_obj::setPadding(Float value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_490_setPadding)
HXLINE( 491)		this->set_paddingTop(value);
HXLINE( 492)		this->set_paddingRight(value);
HXLINE( 493)		this->set_paddingBottom(value);
HXLINE( 494)		this->set_paddingLeft(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,setPadding,(void))

void ResponsiveGridLayout_obj::setGap(Float value){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_505_setGap)
HXLINE( 506)		this->set_columnGap(value);
HXLINE( 507)		this->set_rowGap(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,setGap,(void))

 ::feathers::layout::LayoutBoundsResult ResponsiveGridLayout_obj::layout(::Array< ::Dynamic> items, ::feathers::layout::Measurements measurements, ::feathers::layout::LayoutBoundsResult result){
            	HX_GC_STACKFRAME(&_hx_pos_05ac24870dc0e384_515_layout)
HXLINE( 516)		if ((this->_xxl < this->_xl)) {
HXLINE( 517)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("xxl must be greater than xl",d3,95,f0,63)));
            		}
HXLINE( 519)		if ((this->_xl < this->_lg)) {
HXLINE( 520)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("xl must be greater than lg",e2,d4,f7,c9)));
            		}
HXLINE( 522)		if ((this->_lg < this->_md)) {
HXLINE( 523)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("lg must be greater than md",45,e8,3e,3d)));
            		}
HXLINE( 525)		if ((this->_md < this->_sm)) {
HXLINE( 526)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("md must be greater than sm",64,a2,75,ff)));
            		}
HXLINE( 529)		 ::Dynamic viewPortWidth;
HXDLIN( 529)		if (::hx::IsNotNull( measurements->width )) {
HXLINE( 529)			viewPortWidth = measurements->width;
            		}
            		else {
HXLINE( 529)			viewPortWidth = this->_md;
            		}
HXLINE( 530)		Float contentHeight = this->layoutItems(items,( (Float)(viewPortWidth) ));
HXLINE( 531)		Float viewPortHeight = contentHeight;
HXLINE( 532)		if (::hx::IsNotNull( measurements->height )) {
HXLINE( 533)			viewPortHeight = ( (Float)(measurements->height) );
            		}
HXLINE( 536)		if (::hx::IsNull( result )) {
HXLINE( 537)			result =  ::feathers::layout::LayoutBoundsResult_obj::__alloc( HX_CTX );
            		}
HXLINE( 539)		result->contentX = ((Float)0.0);
HXLINE( 540)		result->contentY = ((Float)0.0);
HXLINE( 541)		result->contentWidth = ( (Float)(viewPortWidth) );
HXLINE( 542)		result->contentHeight = contentHeight;
HXLINE( 543)		result->viewPortWidth = ( (Float)(viewPortWidth) );
HXLINE( 544)		result->viewPortHeight = viewPortHeight;
HXLINE( 545)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ResponsiveGridLayout_obj,layout,return )

Float ResponsiveGridLayout_obj::layoutItems(::Array< ::Dynamic> items,Float viewPortWidth){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_548_layoutItems)
HXLINE( 549)		 ::feathers::layout::Breakpoint breakpoint = this->getBreakpoint(viewPortWidth);
HXLINE( 550)		Float availableWidth = ((viewPortWidth - this->_paddingLeft) - this->_paddingRight);
HXLINE( 551)		Float columnWidth = (((availableWidth + this->_columnGap) / ( (Float)(this->_columnCount) )) - this->_columnGap);
HXLINE( 552)		int totalOffset = 0;
HXLINE( 553)		Float yPosition = this->_paddingTop;
HXLINE( 554)		Float maxRowHeight = ((Float)0.0);
HXLINE( 558)		this->_rowItems->resize(0);
HXLINE( 560)		{
HXLINE( 560)			int _g = 0;
HXDLIN( 560)			while((_g < items->length)){
HXLINE( 560)				 ::openfl::display::DisplayObject item = items->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 560)				_g = (_g + 1);
HXLINE( 561)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 562)					::Dynamic layoutItem =  ::hx::interface_check(item,0xf54ca718);
HXLINE( 563)					if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutItem))) {
HXLINE( 564)						continue;
            					}
            				}
HXLINE( 567)				bool display;
HXDLIN( 567)				if (!(::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >()))) {
HXLINE( 567)					display = true;
            				}
            				else {
HXLINE( 567)					::Dynamic layoutItem1 =  ::hx::interface_check(item,0xf54ca718);
HXDLIN( 567)					 ::feathers::layout::ResponsiveGridLayoutData layoutData = ( ( ::feathers::layout::ResponsiveGridLayoutData)(::Std_obj::downcast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutItem1),::hx::ClassOf< ::feathers::layout::ResponsiveGridLayoutData >())) );
HXDLIN( 567)					if (::hx::IsNull( layoutData )) {
HXLINE( 567)						display = true;
            					}
            					else {
HXLINE( 567)						display = layoutData->getDisplay(breakpoint);
            					}
            				}
HXLINE( 568)				item->set_visible(display);
HXLINE( 569)				if (!(display)) {
HXLINE( 570)					continue;
            				}
HXLINE( 572)				int span;
HXDLIN( 572)				if (!(::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >()))) {
HXLINE( 572)					span = 1;
            				}
            				else {
HXLINE( 572)					::Dynamic layoutItem2 =  ::hx::interface_check(item,0xf54ca718);
HXDLIN( 572)					if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutItem2))) {
HXLINE( 572)						span = 0;
            					}
            					else {
HXLINE( 572)						 ::feathers::layout::ResponsiveGridLayoutData layoutData1 = ( ( ::feathers::layout::ResponsiveGridLayoutData)(::Std_obj::downcast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutItem2),::hx::ClassOf< ::feathers::layout::ResponsiveGridLayoutData >())) );
HXDLIN( 572)						if (::hx::IsNull( layoutData1 )) {
HXLINE( 572)							span = 1;
            						}
            						else {
HXLINE( 572)							int span1 = layoutData1->getSpan(breakpoint);
HXDLIN( 572)							if ((span1 > this->_columnCount)) {
HXLINE( 572)								span = this->_columnCount;
            							}
            							else {
HXLINE( 572)								span = span1;
            							}
            						}
            					}
            				}
HXLINE( 573)				int offset;
HXDLIN( 573)				if (!(::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >()))) {
HXLINE( 573)					offset = 0;
            				}
            				else {
HXLINE( 573)					::Dynamic layoutItem3 =  ::hx::interface_check(item,0xf54ca718);
HXDLIN( 573)					if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutItem3))) {
HXLINE( 573)						offset = 0;
            					}
            					else {
HXLINE( 573)						 ::feathers::layout::ResponsiveGridLayoutData layoutData2 = ( ( ::feathers::layout::ResponsiveGridLayoutData)(::Std_obj::downcast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutItem3),::hx::ClassOf< ::feathers::layout::ResponsiveGridLayoutData >())) );
HXDLIN( 573)						if (::hx::IsNull( layoutData2 )) {
HXLINE( 573)							offset = 0;
            						}
            						else {
HXLINE( 573)							int offset1 = layoutData2->getOffset(breakpoint);
HXDLIN( 573)							int maxOffset = (this->_columnCount - span);
HXDLIN( 573)							if ((offset1 > maxOffset)) {
HXLINE( 573)								offset = maxOffset;
            							}
            							else {
HXLINE( 573)								offset = offset1;
            							}
            						}
            					}
            				}
HXLINE( 574)				if ((((totalOffset + offset) + span) > this->_columnCount)) {
HXLINE( 575)					this->alignRow(yPosition,maxRowHeight);
HXLINE( 579)					this->_rowItems->resize(0);
HXLINE( 581)					totalOffset = 0;
HXLINE( 582)					yPosition = (yPosition + (maxRowHeight + this->_rowGap));
HXLINE( 583)					maxRowHeight = ((Float)0.0);
            				}
HXLINE( 585)				totalOffset = (totalOffset + offset);
HXLINE( 586)				{
HXLINE( 586)					Float _hx_tmp;
HXDLIN( 586)					if ((totalOffset != 0)) {
HXLINE( 586)						_hx_tmp = ((columnWidth + this->_columnGap) * ( (Float)(totalOffset) ));
            					}
            					else {
HXLINE( 586)						_hx_tmp = ((Float)0.0);
            					}
HXDLIN( 586)					item->set_x((this->_paddingLeft + _hx_tmp));
HXDLIN( 586)					item->set_y(yPosition);
HXDLIN( 586)					Float _hx_tmp1;
HXDLIN( 586)					if ((span != 0)) {
HXLINE( 586)						_hx_tmp1 = (((columnWidth + this->_columnGap) * ( (Float)(span) )) - this->_columnGap);
            					}
            					else {
HXLINE( 586)						_hx_tmp1 = columnWidth;
            					}
HXDLIN( 586)					item->set_width(_hx_tmp1);
HXDLIN( 586)					bool _hx_tmp2;
HXDLIN( 586)					bool _hx_tmp3;
HXDLIN( 586)					if (::hx::IsPointerEq( this->_rowVerticalAlign,::feathers::layout::VerticalAlign_obj::JUSTIFY_dyn() )) {
HXLINE( 586)						_hx_tmp3 = this->_justifyResetEnabled;
            					}
            					else {
HXLINE( 586)						_hx_tmp3 = false;
            					}
HXDLIN( 586)					if (_hx_tmp3) {
HXLINE( 586)						_hx_tmp2 = ::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IMeasureObject >());
            					}
            					else {
HXLINE( 586)						_hx_tmp2 = false;
            					}
HXDLIN( 586)					if (_hx_tmp2) {
HXLINE( 586)						::feathers::core::IMeasureObject_obj::resetHeight( ::hx::interface_check(item,0xcfc32883));
            					}
HXDLIN( 586)					if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 586)						::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            					}
            				}
HXLINE( 587)				totalOffset = (totalOffset + span);
HXLINE( 588)				maxRowHeight = ::Math_obj::max(maxRowHeight,item->get_height());
HXLINE( 589)				this->_rowItems->push(item);
            			}
            		}
HXLINE( 591)		this->alignRow(yPosition,maxRowHeight);
HXLINE( 597)		this->_rowItems->resize(0);
HXLINE( 599)		if ((maxRowHeight == ((Float)0.0))) {
HXLINE( 600)			yPosition = (yPosition - this->_rowGap);
            		}
HXLINE( 602)		return ((yPosition + maxRowHeight) + this->_paddingBottom);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ResponsiveGridLayout_obj,layoutItems,return )

void ResponsiveGridLayout_obj::alignRow(Float positionY,Float maxItemHeight){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_606_alignRow)
HXDLIN( 606)		int _g = 0;
HXDLIN( 606)		::Array< ::Dynamic> _g1 = this->_rowItems;
HXDLIN( 606)		while((_g < _g1->length)){
HXDLIN( 606)			 ::openfl::display::DisplayObject item = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 606)			_g = (_g + 1);
HXLINE( 609)			switch((int)(this->_rowVerticalAlign->_hx_getIndex())){
            				case (int)0: {
HXLINE( 620)					item->set_y(positionY);
            				}
            				break;
            				case (int)1: {
HXLINE( 618)					item->set_y((positionY + ((maxItemHeight - item->get_height()) / ((Float)2.0))));
            				}
            				break;
            				case (int)2: {
HXLINE( 616)					item->set_y(((positionY + maxItemHeight) - item->get_height()));
            				}
            				break;
            				case (int)3: {
HXLINE( 611)					item->set_y(positionY);
HXLINE( 612)					if ((item->get_height() != maxItemHeight)) {
HXLINE( 613)						item->set_height(maxItemHeight);
            					}
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ResponsiveGridLayout_obj,alignRow,(void))

void ResponsiveGridLayout_obj::positionItem( ::openfl::display::DisplayObject item,int span,int offset,Float columnWidth,Float yPosition){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_627_positionItem)
HXLINE( 628)		Float _hx_tmp;
HXDLIN( 628)		if ((offset != 0)) {
HXLINE( 628)			_hx_tmp = ((columnWidth + this->_columnGap) * ( (Float)(offset) ));
            		}
            		else {
HXLINE( 628)			_hx_tmp = ((Float)0.0);
            		}
HXDLIN( 628)		item->set_x((this->_paddingLeft + _hx_tmp));
HXLINE( 629)		item->set_y(yPosition);
HXLINE( 630)		Float _hx_tmp1;
HXDLIN( 630)		if ((span != 0)) {
HXLINE( 630)			_hx_tmp1 = (((columnWidth + this->_columnGap) * ( (Float)(span) )) - this->_columnGap);
            		}
            		else {
HXLINE( 630)			_hx_tmp1 = columnWidth;
            		}
HXDLIN( 630)		item->set_width(_hx_tmp1);
HXLINE( 631)		bool _hx_tmp2;
HXDLIN( 631)		bool _hx_tmp3;
HXDLIN( 631)		if (::hx::IsPointerEq( this->_rowVerticalAlign,::feathers::layout::VerticalAlign_obj::JUSTIFY_dyn() )) {
HXLINE( 631)			_hx_tmp3 = this->_justifyResetEnabled;
            		}
            		else {
HXLINE( 631)			_hx_tmp3 = false;
            		}
HXDLIN( 631)		if (_hx_tmp3) {
HXLINE( 631)			_hx_tmp2 = ::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IMeasureObject >());
            		}
            		else {
HXLINE( 631)			_hx_tmp2 = false;
            		}
HXDLIN( 631)		if (_hx_tmp2) {
HXLINE( 632)			::feathers::core::IMeasureObject_obj::resetHeight( ::hx::interface_check(item,0xcfc32883));
            		}
HXLINE( 634)		if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 635)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(ResponsiveGridLayout_obj,positionItem,(void))

 ::feathers::layout::Breakpoint ResponsiveGridLayout_obj::getBreakpoint(Float viewPortWidth){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_639_getBreakpoint)
HXLINE( 640)		if ((viewPortWidth >= this->_xxl)) {
HXLINE( 641)			return ::feathers::layout::Breakpoint_obj::XXL_dyn();
            		}
HXLINE( 643)		if ((viewPortWidth >= this->_xl)) {
HXLINE( 644)			return ::feathers::layout::Breakpoint_obj::XL_dyn();
            		}
HXLINE( 646)		if ((viewPortWidth >= this->_lg)) {
HXLINE( 647)			return ::feathers::layout::Breakpoint_obj::LG_dyn();
            		}
HXLINE( 649)		if ((viewPortWidth >= this->_md)) {
HXLINE( 650)			return ::feathers::layout::Breakpoint_obj::MD_dyn();
            		}
HXLINE( 652)		if ((viewPortWidth >= this->_sm)) {
HXLINE( 653)			return ::feathers::layout::Breakpoint_obj::SM_dyn();
            		}
HXLINE( 655)		return ::feathers::layout::Breakpoint_obj::XS_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ResponsiveGridLayout_obj,getBreakpoint,return )

int ResponsiveGridLayout_obj::getSpan( ::openfl::display::DisplayObject item, ::feathers::layout::Breakpoint breakpoint){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_658_getSpan)
HXLINE( 659)		if (!(::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >()))) {
HXLINE( 660)			return 1;
            		}
HXLINE( 662)		::Dynamic layoutItem =  ::hx::interface_check(item,0xf54ca718);
HXLINE( 663)		if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutItem))) {
HXLINE( 664)			return 0;
            		}
HXLINE( 667)		 ::feathers::layout::ResponsiveGridLayoutData layoutData = ( ( ::feathers::layout::ResponsiveGridLayoutData)(::Std_obj::downcast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutItem),::hx::ClassOf< ::feathers::layout::ResponsiveGridLayoutData >())) );
HXLINE( 668)		if (::hx::IsNull( layoutData )) {
HXLINE( 669)			return 1;
            		}
HXLINE( 671)		int span = layoutData->getSpan(breakpoint);
HXLINE( 672)		if ((span > this->_columnCount)) {
HXLINE( 673)			return this->_columnCount;
            		}
HXLINE( 675)		return span;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ResponsiveGridLayout_obj,getSpan,return )

int ResponsiveGridLayout_obj::getOffset( ::openfl::display::DisplayObject item,int span, ::feathers::layout::Breakpoint breakpoint){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_678_getOffset)
HXLINE( 679)		if (!(::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >()))) {
HXLINE( 680)			return 0;
            		}
HXLINE( 682)		::Dynamic layoutItem =  ::hx::interface_check(item,0xf54ca718);
HXLINE( 683)		if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutItem))) {
HXLINE( 684)			return 0;
            		}
HXLINE( 686)		 ::feathers::layout::ResponsiveGridLayoutData layoutData = ( ( ::feathers::layout::ResponsiveGridLayoutData)(::Std_obj::downcast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutItem),::hx::ClassOf< ::feathers::layout::ResponsiveGridLayoutData >())) );
HXLINE( 687)		if (::hx::IsNull( layoutData )) {
HXLINE( 688)			return 0;
            		}
HXLINE( 690)		int offset = layoutData->getOffset(breakpoint);
HXLINE( 691)		int maxOffset = (this->_columnCount - span);
HXLINE( 692)		if ((offset > maxOffset)) {
HXLINE( 693)			return maxOffset;
            		}
HXLINE( 695)		return offset;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ResponsiveGridLayout_obj,getOffset,return )

bool ResponsiveGridLayout_obj::getDisplay( ::openfl::display::DisplayObject item, ::feathers::layout::Breakpoint breakpoint){
            	HX_STACKFRAME(&_hx_pos_05ac24870dc0e384_698_getDisplay)
HXLINE( 699)		if (!(::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >()))) {
HXLINE( 700)			return true;
            		}
HXLINE( 702)		::Dynamic layoutItem =  ::hx::interface_check(item,0xf54ca718);
HXLINE( 703)		 ::feathers::layout::ResponsiveGridLayoutData layoutData = ( ( ::feathers::layout::ResponsiveGridLayoutData)(::Std_obj::downcast(::feathers::layout::ILayoutObject_obj::get_layoutData(layoutItem),::hx::ClassOf< ::feathers::layout::ResponsiveGridLayoutData >())) );
HXLINE( 704)		if (::hx::IsNull( layoutData )) {
HXLINE( 705)			return true;
            		}
HXLINE( 707)		return layoutData->getDisplay(breakpoint);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ResponsiveGridLayout_obj,getDisplay,return )


::hx::ObjectPtr< ResponsiveGridLayout_obj > ResponsiveGridLayout_obj::__new(::hx::Null< int >  __o_columnCount,::hx::Null< Float >  __o_sm,::hx::Null< Float >  __o_md,::hx::Null< Float >  __o_lg,::hx::Null< Float >  __o_xl,::hx::Null< Float >  __o_xxl) {
	::hx::ObjectPtr< ResponsiveGridLayout_obj > __this = new ResponsiveGridLayout_obj();
	__this->__construct(__o_columnCount,__o_sm,__o_md,__o_lg,__o_xl,__o_xxl);
	return __this;
}

::hx::ObjectPtr< ResponsiveGridLayout_obj > ResponsiveGridLayout_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_columnCount,::hx::Null< Float >  __o_sm,::hx::Null< Float >  __o_md,::hx::Null< Float >  __o_lg,::hx::Null< Float >  __o_xl,::hx::Null< Float >  __o_xxl) {
	ResponsiveGridLayout_obj *__this = (ResponsiveGridLayout_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ResponsiveGridLayout_obj), true, "feathers.layout.ResponsiveGridLayout"));
	*(void **)__this = ResponsiveGridLayout_obj::_hx_vtable;
	__this->__construct(__o_columnCount,__o_sm,__o_md,__o_lg,__o_xl,__o_xxl);
	return __this;
}

ResponsiveGridLayout_obj::ResponsiveGridLayout_obj()
{
}

void ResponsiveGridLayout_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ResponsiveGridLayout);
	HX_MARK_MEMBER_NAME(_columnCount,"_columnCount");
	HX_MARK_MEMBER_NAME(_sm,"_sm");
	HX_MARK_MEMBER_NAME(_md,"_md");
	HX_MARK_MEMBER_NAME(_lg,"_lg");
	HX_MARK_MEMBER_NAME(_xl,"_xl");
	HX_MARK_MEMBER_NAME(_xxl,"_xxl");
	HX_MARK_MEMBER_NAME(_rowGap,"_rowGap");
	HX_MARK_MEMBER_NAME(_columnGap,"_columnGap");
	HX_MARK_MEMBER_NAME(_paddingTop,"_paddingTop");
	HX_MARK_MEMBER_NAME(_paddingRight,"_paddingRight");
	HX_MARK_MEMBER_NAME(_paddingBottom,"_paddingBottom");
	HX_MARK_MEMBER_NAME(_paddingLeft,"_paddingLeft");
	HX_MARK_MEMBER_NAME(_rowVerticalAlign,"_rowVerticalAlign");
	HX_MARK_MEMBER_NAME(_justifyResetEnabled,"_justifyResetEnabled");
	HX_MARK_MEMBER_NAME(_rowItems,"_rowItems");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ResponsiveGridLayout_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_columnCount,"_columnCount");
	HX_VISIT_MEMBER_NAME(_sm,"_sm");
	HX_VISIT_MEMBER_NAME(_md,"_md");
	HX_VISIT_MEMBER_NAME(_lg,"_lg");
	HX_VISIT_MEMBER_NAME(_xl,"_xl");
	HX_VISIT_MEMBER_NAME(_xxl,"_xxl");
	HX_VISIT_MEMBER_NAME(_rowGap,"_rowGap");
	HX_VISIT_MEMBER_NAME(_columnGap,"_columnGap");
	HX_VISIT_MEMBER_NAME(_paddingTop,"_paddingTop");
	HX_VISIT_MEMBER_NAME(_paddingRight,"_paddingRight");
	HX_VISIT_MEMBER_NAME(_paddingBottom,"_paddingBottom");
	HX_VISIT_MEMBER_NAME(_paddingLeft,"_paddingLeft");
	HX_VISIT_MEMBER_NAME(_rowVerticalAlign,"_rowVerticalAlign");
	HX_VISIT_MEMBER_NAME(_justifyResetEnabled,"_justifyResetEnabled");
	HX_VISIT_MEMBER_NAME(_rowItems,"_rowItems");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ResponsiveGridLayout_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sm") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_sm() ); }
		if (HX_FIELD_EQ(inName,"md") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_md() ); }
		if (HX_FIELD_EQ(inName,"lg") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_lg() ); }
		if (HX_FIELD_EQ(inName,"xl") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_xl() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"_sm") ) { return ::hx::Val( _sm ); }
		if (HX_FIELD_EQ(inName,"_md") ) { return ::hx::Val( _md ); }
		if (HX_FIELD_EQ(inName,"_lg") ) { return ::hx::Val( _lg ); }
		if (HX_FIELD_EQ(inName,"_xl") ) { return ::hx::Val( _xl ); }
		if (HX_FIELD_EQ(inName,"xxl") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_xxl() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_xxl") ) { return ::hx::Val( _xxl ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"get_sm") ) { return ::hx::Val( get_sm_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_sm") ) { return ::hx::Val( set_sm_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_md") ) { return ::hx::Val( get_md_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_md") ) { return ::hx::Val( set_md_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_lg") ) { return ::hx::Val( get_lg_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_lg") ) { return ::hx::Val( set_lg_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_xl") ) { return ::hx::Val( get_xl_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_xl") ) { return ::hx::Val( set_xl_dyn() ); }
		if (HX_FIELD_EQ(inName,"rowGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_rowGap() ); }
		if (HX_FIELD_EQ(inName,"setGap") ) { return ::hx::Val( setGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"layout") ) { return ::hx::Val( layout_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_xxl") ) { return ::hx::Val( get_xxl_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_xxl") ) { return ::hx::Val( set_xxl_dyn() ); }
		if (HX_FIELD_EQ(inName,"_rowGap") ) { return ::hx::Val( _rowGap ); }
		if (HX_FIELD_EQ(inName,"getSpan") ) { return ::hx::Val( getSpan_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"alignRow") ) { return ::hx::Val( alignRow_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"columnGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_columnGap() ); }
		if (HX_FIELD_EQ(inName,"_rowItems") ) { return ::hx::Val( _rowItems ); }
		if (HX_FIELD_EQ(inName,"getOffset") ) { return ::hx::Val( getOffset_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_rowGap") ) { return ::hx::Val( get_rowGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rowGap") ) { return ::hx::Val( set_rowGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"_columnGap") ) { return ::hx::Val( _columnGap ); }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingTop() ); }
		if (HX_FIELD_EQ(inName,"setPadding") ) { return ::hx::Val( setPadding_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDisplay") ) { return ::hx::Val( getDisplay_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"columnCount") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_columnCount() ); }
		if (HX_FIELD_EQ(inName,"_paddingTop") ) { return ::hx::Val( _paddingTop ); }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingLeft() ); }
		if (HX_FIELD_EQ(inName,"layoutItems") ) { return ::hx::Val( layoutItems_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_columnCount") ) { return ::hx::Val( _columnCount ); }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingRight() ); }
		if (HX_FIELD_EQ(inName,"_paddingLeft") ) { return ::hx::Val( _paddingLeft ); }
		if (HX_FIELD_EQ(inName,"positionItem") ) { return ::hx::Val( positionItem_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_columnGap") ) { return ::hx::Val( get_columnGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_columnGap") ) { return ::hx::Val( set_columnGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"_paddingRight") ) { return ::hx::Val( _paddingRight ); }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingBottom() ); }
		if (HX_FIELD_EQ(inName,"getBreakpoint") ) { return ::hx::Val( getBreakpoint_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_paddingTop") ) { return ::hx::Val( get_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingTop") ) { return ::hx::Val( set_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"_paddingBottom") ) { return ::hx::Val( _paddingBottom ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_columnCount") ) { return ::hx::Val( get_columnCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_columnCount") ) { return ::hx::Val( set_columnCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_paddingLeft") ) { return ::hx::Val( get_paddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingLeft") ) { return ::hx::Val( set_paddingLeft_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_paddingRight") ) { return ::hx::Val( get_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingRight") ) { return ::hx::Val( set_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"rowVerticalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_rowVerticalAlign() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_paddingBottom") ) { return ::hx::Val( get_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingBottom") ) { return ::hx::Val( set_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"_rowVerticalAlign") ) { return ::hx::Val( _rowVerticalAlign ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"justifyResetEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_justifyResetEnabled() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_rowVerticalAlign") ) { return ::hx::Val( get_rowVerticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rowVerticalAlign") ) { return ::hx::Val( set_rowVerticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"_justifyResetEnabled") ) { return ::hx::Val( _justifyResetEnabled ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_justifyResetEnabled") ) { return ::hx::Val( get_justifyResetEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_justifyResetEnabled") ) { return ::hx::Val( set_justifyResetEnabled_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ResponsiveGridLayout_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sm") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_sm(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"md") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_md(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"lg") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_lg(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"xl") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_xl(inValue.Cast< Float >()) ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"_sm") ) { _sm=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_md") ) { _md=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lg") ) { _lg=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_xl") ) { _xl=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xxl") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_xxl(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_xxl") ) { _xxl=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rowGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_rowGap(inValue.Cast< Float >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_rowGap") ) { _rowGap=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"columnGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_columnGap(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_rowItems") ) { _rowItems=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_columnGap") ) { _columnGap=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingTop(inValue.Cast< Float >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"columnCount") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_columnCount(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"_paddingTop") ) { _paddingTop=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingLeft(inValue.Cast< Float >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_columnCount") ) { _columnCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingRight(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_paddingLeft") ) { _paddingLeft=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_paddingRight") ) { _paddingRight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingBottom(inValue.Cast< Float >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_paddingBottom") ) { _paddingBottom=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rowVerticalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_rowVerticalAlign(inValue.Cast<  ::feathers::layout::VerticalAlign >()) ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_rowVerticalAlign") ) { _rowVerticalAlign=inValue.Cast<  ::feathers::layout::VerticalAlign >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"justifyResetEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_justifyResetEnabled(inValue.Cast< bool >()) ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_justifyResetEnabled") ) { _justifyResetEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ResponsiveGridLayout_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_columnCount",1a,8c,b3,4b));
	outFields->push(HX_("columnCount",19,de,a9,e5));
	outFields->push(HX_("_sm",b9,7a,48,00));
	outFields->push(HX_("sm",9a,64,00,00));
	outFields->push(HX_("_md",76,75,48,00));
	outFields->push(HX_("md",57,5f,00,00));
	outFields->push(HX_("_lg",9a,74,48,00));
	outFields->push(HX_("lg",7b,5e,00,00));
	outFields->push(HX_("_xl",13,7f,48,00));
	outFields->push(HX_("xl",f4,68,00,00));
	outFields->push(HX_("_xxl",6d,bc,26,3f));
	outFields->push(HX_("xxl",6c,77,5b,00));
	outFields->push(HX_("_rowGap",bb,30,7f,3b));
	outFields->push(HX_("rowGap",1c,1f,08,cd));
	outFields->push(HX_("_columnGap",a1,cb,45,1a));
	outFields->push(HX_("columnGap",e0,4f,a3,be));
	outFields->push(HX_("_paddingTop",63,ca,8f,0c));
	outFields->push(HX_("paddingTop",44,fd,05,3a));
	outFields->push(HX_("_paddingRight",2a,7f,16,fd));
	outFields->push(HX_("paddingRight",4b,ec,a7,1a));
	outFields->push(HX_("_paddingBottom",dd,57,eb,8d));
	outFields->push(HX_("paddingBottom",9c,67,99,4f));
	outFields->push(HX_("_paddingLeft",79,f8,ef,eb));
	outFields->push(HX_("paddingLeft",78,4a,e6,85));
	outFields->push(HX_("_rowVerticalAlign",54,b2,05,90));
	outFields->push(HX_("rowVerticalAlign",f5,c3,8a,f7));
	outFields->push(HX_("_justifyResetEnabled",e3,44,2a,f0));
	outFields->push(HX_("justifyResetEnabled",e2,2d,d1,f0));
	outFields->push(HX_("_rowItems",e5,52,8d,b1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ResponsiveGridLayout_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(ResponsiveGridLayout_obj,_columnCount),HX_("_columnCount",1a,8c,b3,4b)},
	{::hx::fsFloat,(int)offsetof(ResponsiveGridLayout_obj,_sm),HX_("_sm",b9,7a,48,00)},
	{::hx::fsFloat,(int)offsetof(ResponsiveGridLayout_obj,_md),HX_("_md",76,75,48,00)},
	{::hx::fsFloat,(int)offsetof(ResponsiveGridLayout_obj,_lg),HX_("_lg",9a,74,48,00)},
	{::hx::fsFloat,(int)offsetof(ResponsiveGridLayout_obj,_xl),HX_("_xl",13,7f,48,00)},
	{::hx::fsFloat,(int)offsetof(ResponsiveGridLayout_obj,_xxl),HX_("_xxl",6d,bc,26,3f)},
	{::hx::fsFloat,(int)offsetof(ResponsiveGridLayout_obj,_rowGap),HX_("_rowGap",bb,30,7f,3b)},
	{::hx::fsFloat,(int)offsetof(ResponsiveGridLayout_obj,_columnGap),HX_("_columnGap",a1,cb,45,1a)},
	{::hx::fsFloat,(int)offsetof(ResponsiveGridLayout_obj,_paddingTop),HX_("_paddingTop",63,ca,8f,0c)},
	{::hx::fsFloat,(int)offsetof(ResponsiveGridLayout_obj,_paddingRight),HX_("_paddingRight",2a,7f,16,fd)},
	{::hx::fsFloat,(int)offsetof(ResponsiveGridLayout_obj,_paddingBottom),HX_("_paddingBottom",dd,57,eb,8d)},
	{::hx::fsFloat,(int)offsetof(ResponsiveGridLayout_obj,_paddingLeft),HX_("_paddingLeft",79,f8,ef,eb)},
	{::hx::fsObject /*  ::feathers::layout::VerticalAlign */ ,(int)offsetof(ResponsiveGridLayout_obj,_rowVerticalAlign),HX_("_rowVerticalAlign",54,b2,05,90)},
	{::hx::fsBool,(int)offsetof(ResponsiveGridLayout_obj,_justifyResetEnabled),HX_("_justifyResetEnabled",e3,44,2a,f0)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ResponsiveGridLayout_obj,_rowItems),HX_("_rowItems",e5,52,8d,b1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ResponsiveGridLayout_obj_sStaticStorageInfo = 0;
#endif

static ::String ResponsiveGridLayout_obj_sMemberFields[] = {
	HX_("_columnCount",1a,8c,b3,4b),
	HX_("get_columnCount",b0,95,8b,a6),
	HX_("set_columnCount",bc,12,57,a2),
	HX_("_sm",b9,7a,48,00),
	HX_("get_sm",e3,fb,2f,a3),
	HX_("set_sm",57,50,78,6f),
	HX_("_md",76,75,48,00),
	HX_("get_md",a0,f6,2f,a3),
	HX_("set_md",14,4b,78,6f),
	HX_("_lg",9a,74,48,00),
	HX_("get_lg",c4,f5,2f,a3),
	HX_("set_lg",38,4a,78,6f),
	HX_("_xl",13,7f,48,00),
	HX_("get_xl",3d,00,30,a3),
	HX_("set_xl",b1,54,78,6f),
	HX_("_xxl",6d,bc,26,3f),
	HX_("get_xxl",03,40,d0,26),
	HX_("set_xxl",0f,d1,d1,19),
	HX_("_rowGap",bb,30,7f,3b),
	HX_("get_rowGap",e5,8e,8f,bd),
	HX_("set_rowGap",59,2d,0d,c1),
	HX_("_columnGap",a1,cb,45,1a),
	HX_("get_columnGap",b7,23,07,80),
	HX_("set_columnGap",c3,05,0d,c5),
	HX_("_paddingTop",63,ca,8f,0c),
	HX_("get_paddingTop",8d,85,fb,af),
	HX_("set_paddingTop",01,6e,1b,d0),
	HX_("_paddingRight",2a,7f,16,fd),
	HX_("get_paddingRight",d4,d8,46,1f),
	HX_("set_paddingRight",48,c6,88,75),
	HX_("_paddingBottom",dd,57,eb,8d),
	HX_("get_paddingBottom",f3,72,09,56),
	HX_("set_paddingBottom",ff,4a,77,79),
	HX_("_paddingLeft",79,f8,ef,eb),
	HX_("get_paddingLeft",0f,02,c8,46),
	HX_("set_paddingLeft",1b,7f,93,42),
	HX_("_rowVerticalAlign",54,b2,05,90),
	HX_("get_rowVerticalAlign",fe,28,f5,15),
	HX_("set_rowVerticalAlign",72,e0,ac,e2),
	HX_("_justifyResetEnabled",e3,44,2a,f0),
	HX_("get_justifyResetEnabled",79,d4,26,f9),
	HX_("set_justifyResetEnabled",85,3d,88,fb),
	HX_("setPadding",4f,7e,5c,23),
	HX_("setGap",94,0a,66,6f),
	HX_("_rowItems",e5,52,8d,b1),
	HX_("layout",aa,ae,b8,58),
	HX_("layoutItems",f6,04,f6,72),
	HX_("alignRow",55,0c,de,c9),
	HX_("positionItem",5c,9a,1b,6c),
	HX_("getBreakpoint",67,57,bd,c9),
	HX_("getSpan",80,8a,db,1e),
	HX_("getOffset",c9,20,96,dc),
	HX_("getDisplay",4c,b0,ab,0a),
	::String(null()) };

::hx::Class ResponsiveGridLayout_obj::__mClass;

void ResponsiveGridLayout_obj::__register()
{
	ResponsiveGridLayout_obj _hx_dummy;
	ResponsiveGridLayout_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.layout.ResponsiveGridLayout",0a,b0,c7,24);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ResponsiveGridLayout_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ResponsiveGridLayout_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ResponsiveGridLayout_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ResponsiveGridLayout_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace layout
