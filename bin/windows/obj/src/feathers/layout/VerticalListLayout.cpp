// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_events_FeathersEvent
#include <feathers/events/FeathersEvent.h>
#endif
#ifndef INCLUDED_feathers_events_ScrollEvent
#include <feathers/events/ScrollEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_IKeyboardNavigationLayout
#include <feathers/layout/IKeyboardNavigationLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayout
#include <feathers/layout/ILayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_IScrollLayout
#include <feathers/layout/IScrollLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_IVirtualLayout
#include <feathers/layout/IVirtualLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_LayoutBoundsResult
#include <feathers/layout/LayoutBoundsResult.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalAlign
#include <feathers/layout/VerticalAlign.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalListLayout
#include <feathers/layout/VerticalListLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_VirtualLayoutRange
#include <feathers/layout/VirtualLayoutRange.h>
#endif
#ifndef INCLUDED_feathers_layout__VerticalListLayout_VirtualCacheItem
#include <feathers/layout/_VerticalListLayout/VirtualCacheItem.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_19102b100d84e010_38_new,"feathers.layout.VerticalListLayout","new",0xb8804716,"feathers.layout.VerticalListLayout.new","feathers/layout/VerticalListLayout.hx",38,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_56_get_scrollX,"feathers.layout.VerticalListLayout","get_scrollX",0xb905b078,"feathers.layout.VerticalListLayout.get_scrollX","feathers/layout/VerticalListLayout.hx",56,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_59_set_scrollX,"feathers.layout.VerticalListLayout","set_scrollX",0xc372b784,"feathers.layout.VerticalListLayout.set_scrollX","feathers/layout/VerticalListLayout.hx",59,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_72_get_scrollY,"feathers.layout.VerticalListLayout","get_scrollY",0xb905b079,"feathers.layout.VerticalListLayout.get_scrollY","feathers/layout/VerticalListLayout.hx",72,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_75_set_scrollY,"feathers.layout.VerticalListLayout","set_scrollY",0xc372b785,"feathers.layout.VerticalListLayout.set_scrollY","feathers/layout/VerticalListLayout.hx",75,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_88_get_virtualCache,"feathers.layout.VerticalListLayout","get_virtualCache",0x351aa04a,"feathers.layout.VerticalListLayout.get_virtualCache","feathers/layout/VerticalListLayout.hx",88,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_91_set_virtualCache,"feathers.layout.VerticalListLayout","set_virtualCache",0x8b5c8dbe,"feathers.layout.VerticalListLayout.set_virtualCache","feathers/layout/VerticalListLayout.hx",91,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_102_get_elasticTop,"feathers.layout.VerticalListLayout","get_elasticTop",0xdd8cf113,"feathers.layout.VerticalListLayout.get_elasticTop","feathers/layout/VerticalListLayout.hx",102,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_111_get_elasticRight,"feathers.layout.VerticalListLayout","get_elasticRight",0xe4aeb1da,"feathers.layout.VerticalListLayout.get_elasticRight","feathers/layout/VerticalListLayout.hx",111,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_120_get_elasticBottom,"feathers.layout.VerticalListLayout","get_elasticBottom",0x4b7f7f2d,"feathers.layout.VerticalListLayout.get_elasticBottom","feathers/layout/VerticalListLayout.hx",120,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_129_get_elasticLeft,"feathers.layout.VerticalListLayout","get_elasticLeft",0xf874abc9,"feathers.layout.VerticalListLayout.get_elasticLeft","feathers/layout/VerticalListLayout.hx",129,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_154_get_requestedRowCount,"feathers.layout.VerticalListLayout","get_requestedRowCount",0x75bf16f0,"feathers.layout.VerticalListLayout.get_requestedRowCount","feathers/layout/VerticalListLayout.hx",154,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_157_set_requestedRowCount,"feathers.layout.VerticalListLayout","set_requestedRowCount",0xc9c7e4fc,"feathers.layout.VerticalListLayout.set_requestedRowCount","feathers/layout/VerticalListLayout.hx",157,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_189_get_requestedMinRowCount,"feathers.layout.VerticalListLayout","get_requestedMinRowCount",0x85ddd44c,"feathers.layout.VerticalListLayout.get_requestedMinRowCount","feathers/layout/VerticalListLayout.hx",189,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_192_set_requestedMinRowCount,"feathers.layout.VerticalListLayout","set_requestedMinRowCount",0x98b855c0,"feathers.layout.VerticalListLayout.set_requestedMinRowCount","feathers/layout/VerticalListLayout.hx",192,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_225_get_requestedMaxRowCount,"feathers.layout.VerticalListLayout","get_requestedMaxRowCount",0xc0f82f5e,"feathers.layout.VerticalListLayout.get_requestedMaxRowCount","feathers/layout/VerticalListLayout.hx",225,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_228_set_requestedMaxRowCount,"feathers.layout.VerticalListLayout","set_requestedMaxRowCount",0xd3d2b0d2,"feathers.layout.VerticalListLayout.set_requestedMaxRowCount","feathers/layout/VerticalListLayout.hx",228,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_257_get_paddingTop,"feathers.layout.VerticalListLayout","get_paddingTop",0xc9eebe97,"feathers.layout.VerticalListLayout.get_paddingTop","feathers/layout/VerticalListLayout.hx",257,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_260_set_paddingTop,"feathers.layout.VerticalListLayout","set_paddingTop",0xea0ea70b,"feathers.layout.VerticalListLayout.set_paddingTop","feathers/layout/VerticalListLayout.hx",260,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_289_get_paddingRight,"feathers.layout.VerticalListLayout","get_paddingRight",0x0741e85e,"feathers.layout.VerticalListLayout.get_paddingRight","feathers/layout/VerticalListLayout.hx",289,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_292_set_paddingRight,"feathers.layout.VerticalListLayout","set_paddingRight",0x5d83d5d2,"feathers.layout.VerticalListLayout.set_paddingRight","feathers/layout/VerticalListLayout.hx",292,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_321_get_paddingBottom,"feathers.layout.VerticalListLayout","get_paddingBottom",0x69bbfc29,"feathers.layout.VerticalListLayout.get_paddingBottom","feathers/layout/VerticalListLayout.hx",321,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_324_set_paddingBottom,"feathers.layout.VerticalListLayout","set_paddingBottom",0x8d29d435,"feathers.layout.VerticalListLayout.set_paddingBottom","feathers/layout/VerticalListLayout.hx",324,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_353_get_paddingLeft,"feathers.layout.VerticalListLayout","get_paddingLeft",0xe1a6b1c5,"feathers.layout.VerticalListLayout.get_paddingLeft","feathers/layout/VerticalListLayout.hx",353,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_356_set_paddingLeft,"feathers.layout.VerticalListLayout","set_paddingLeft",0xdd722ed1,"feathers.layout.VerticalListLayout.set_paddingLeft","feathers/layout/VerticalListLayout.hx",356,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_388_get_gap,"feathers.layout.VerticalListLayout","get_gap",0x78504f63,"feathers.layout.VerticalListLayout.get_gap","feathers/layout/VerticalListLayout.hx",388,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_391_set_gap,"feathers.layout.VerticalListLayout","set_gap",0x6b51e06f,"feathers.layout.VerticalListLayout.set_gap","feathers/layout/VerticalListLayout.hx",391,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_423_get_minGap,"feathers.layout.VerticalListLayout","get_minGap",0x1337c677,"feathers.layout.VerticalListLayout.get_minGap","feathers/layout/VerticalListLayout.hx",423,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_426_set_minGap,"feathers.layout.VerticalListLayout","set_minGap",0x16b564eb,"feathers.layout.VerticalListLayout.set_minGap","feathers/layout/VerticalListLayout.hx",426,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_464_get_verticalAlign,"feathers.layout.VerticalListLayout","get_verticalAlign",0xfe9eb2fc,"feathers.layout.VerticalListLayout.get_verticalAlign","feathers/layout/VerticalListLayout.hx",464,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_467_set_verticalAlign,"feathers.layout.VerticalListLayout","set_verticalAlign",0x220c8b08,"feathers.layout.VerticalListLayout.set_verticalAlign","feathers/layout/VerticalListLayout.hx",467,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_491_get_contentJustify,"feathers.layout.VerticalListLayout","get_contentJustify",0xada5e9ea,"feathers.layout.VerticalListLayout.get_contentJustify","feathers/layout/VerticalListLayout.hx",491,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_494_set_contentJustify,"feathers.layout.VerticalListLayout","set_contentJustify",0x8a551c5e,"feathers.layout.VerticalListLayout.set_contentJustify","feathers/layout/VerticalListLayout.hx",494,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_515_get_widthResetEnabled,"feathers.layout.VerticalListLayout","get_widthResetEnabled",0x59bc9ca5,"feathers.layout.VerticalListLayout.get_widthResetEnabled","feathers/layout/VerticalListLayout.hx",515,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_518_set_widthResetEnabled,"feathers.layout.VerticalListLayout","set_widthResetEnabled",0xadc56ab1,"feathers.layout.VerticalListLayout.set_widthResetEnabled","feathers/layout/VerticalListLayout.hx",518,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_537_setPadding,"feathers.layout.VerticalListLayout","setPadding",0xf327ea59,"feathers.layout.VerticalListLayout.setPadding","feathers/layout/VerticalListLayout.hx",537,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_547_layout,"feathers.layout.VerticalListLayout","layout",0x7b86cdb4,"feathers.layout.VerticalListLayout.layout","feathers/layout/VerticalListLayout.hx",547,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_650_calculateMaxItemWidth,"feathers.layout.VerticalListLayout","calculateMaxItemWidth",0x4bda3b6b,"feathers.layout.VerticalListLayout.calculateMaxItemWidth","feathers/layout/VerticalListLayout.hx",650,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_706_calculateViewPortWidth,"feathers.layout.VerticalListLayout","calculateViewPortWidth",0x320f2d64,"feathers.layout.VerticalListLayout.calculateViewPortWidth","feathers/layout/VerticalListLayout.hx",706,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_713_calculateVirtualRowHeight,"feathers.layout.VerticalListLayout","calculateVirtualRowHeight",0x112062d2,"feathers.layout.VerticalListLayout.calculateVirtualRowHeight","feathers/layout/VerticalListLayout.hx",713,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_754_getVisibleIndices,"feathers.layout.VerticalListLayout","getVisibleIndices",0x1e1d0141,"feathers.layout.VerticalListLayout.getVisibleIndices","feathers/layout/VerticalListLayout.hx",754,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_885_getNearestScrollPositionForIndex,"feathers.layout.VerticalListLayout","getNearestScrollPositionForIndex",0x9157d351,"feathers.layout.VerticalListLayout.getNearestScrollPositionForIndex","feathers/layout/VerticalListLayout.hx",885,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_935_findNextKeyboardIndex,"feathers.layout.VerticalListLayout","findNextKeyboardIndex",0x58a7fbb5,"feathers.layout.VerticalListLayout.findNextKeyboardIndex","feathers/layout/VerticalListLayout.hx",935,0xa03146fa)
HX_LOCAL_STACK_FRAME(_hx_pos_19102b100d84e010_1092_applyVerticalAlign,"feathers.layout.VerticalListLayout","applyVerticalAlign",0x9aa1222b,"feathers.layout.VerticalListLayout.applyVerticalAlign","feathers/layout/VerticalListLayout.hx",1092,0xa03146fa)
namespace feathers{
namespace layout{

void VerticalListLayout_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_38_new)
HXLINE( 503)		this->_widthResetEnabled = true;
HXLINE( 476)		this->_contentJustify = false;
HXLINE( 435)		this->_verticalAlign = ::feathers::layout::VerticalAlign_obj::TOP_dyn();
HXLINE( 400)		this->_minGap = ((Float)0.0);
HXLINE( 365)		this->_gap = ((Float)0.0);
HXLINE( 333)		this->_paddingLeft = ((Float)0.0);
HXLINE( 301)		this->_paddingBottom = ((Float)0.0);
HXLINE( 269)		this->_paddingRight = ((Float)0.0);
HXLINE( 237)		this->_paddingTop = ((Float)0.0);
HXLINE( 201)		this->_requestedMaxRowCount = null();
HXLINE( 166)		this->_requestedMinRowCount = null();
HXLINE( 132)		this->_requestedRowCount = null();
HXLINE(  64)		this->_scrollY = ((Float)0.0);
HXLINE(  48)		this->_scrollX = ((Float)0.0);
HXLINE(  45)		super::__construct(null());
            	}

Dynamic VerticalListLayout_obj::__CreateEmpty() { return new VerticalListLayout_obj; }

void *VerticalListLayout_obj::_hx_vtable = 0;

Dynamic VerticalListLayout_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VerticalListLayout_obj > _hx_result = new VerticalListLayout_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VerticalListLayout_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x640862b8;
	}
}

static ::openfl::events::IEventDispatcher_obj _hx_feathers_layout_VerticalListLayout__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::VerticalListLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::willTrigger,
};

static ::feathers::layout::IScrollLayout_obj _hx_feathers_layout_VerticalListLayout__hx_feathers_layout_IScrollLayout= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::VerticalListLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::willTrigger,
	(  ::feathers::layout::LayoutBoundsResult (::hx::Object::*)(::Array< ::Dynamic>, ::feathers::layout::Measurements, ::feathers::layout::LayoutBoundsResult))&::feathers::layout::VerticalListLayout_obj::layout,
	( Float (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_scrollX,
	( Float (::hx::Object::*)(Float))&::feathers::layout::VerticalListLayout_obj::set_scrollX,
	( Float (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_scrollY,
	( Float (::hx::Object::*)(Float))&::feathers::layout::VerticalListLayout_obj::set_scrollY,
	( bool (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_elasticTop,
	( bool (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_elasticRight,
	( bool (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_elasticBottom,
	( bool (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_elasticLeft,
	(  ::openfl::geom::Point (::hx::Object::*)(int,int,Float,Float, ::openfl::geom::Point))&::feathers::layout::VerticalListLayout_obj::getNearestScrollPositionForIndex,
};

static ::feathers::layout::ILayout_obj _hx_feathers_layout_VerticalListLayout__hx_feathers_layout_ILayout= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::VerticalListLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::willTrigger,
	(  ::feathers::layout::LayoutBoundsResult (::hx::Object::*)(::Array< ::Dynamic>, ::feathers::layout::Measurements, ::feathers::layout::LayoutBoundsResult))&::feathers::layout::VerticalListLayout_obj::layout,
};

static ::feathers::layout::IKeyboardNavigationLayout_obj _hx_feathers_layout_VerticalListLayout__hx_feathers_layout_IKeyboardNavigationLayout= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::VerticalListLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::willTrigger,
	(  ::feathers::layout::LayoutBoundsResult (::hx::Object::*)(::Array< ::Dynamic>, ::feathers::layout::Measurements, ::feathers::layout::LayoutBoundsResult))&::feathers::layout::VerticalListLayout_obj::layout,
	( int (::hx::Object::*)(int, ::openfl::events::KeyboardEvent,bool,::Array< ::Dynamic>,::Array< int >,Float,Float))&::feathers::layout::VerticalListLayout_obj::findNextKeyboardIndex,
};

static ::feathers::layout::IVirtualLayout_obj _hx_feathers_layout_VerticalListLayout__hx_feathers_layout_IVirtualLayout= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::layout::VerticalListLayout_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::layout::VerticalListLayout_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::layout::VerticalListLayout_obj::willTrigger,
	(  ::feathers::layout::LayoutBoundsResult (::hx::Object::*)(::Array< ::Dynamic>, ::feathers::layout::Measurements, ::feathers::layout::LayoutBoundsResult))&::feathers::layout::VerticalListLayout_obj::layout,
	( Float (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_scrollX,
	( Float (::hx::Object::*)(Float))&::feathers::layout::VerticalListLayout_obj::set_scrollX,
	( Float (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_scrollY,
	( Float (::hx::Object::*)(Float))&::feathers::layout::VerticalListLayout_obj::set_scrollY,
	( bool (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_elasticTop,
	( bool (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_elasticRight,
	( bool (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_elasticBottom,
	( bool (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_elasticLeft,
	(  ::openfl::geom::Point (::hx::Object::*)(int,int,Float,Float, ::openfl::geom::Point))&::feathers::layout::VerticalListLayout_obj::getNearestScrollPositionForIndex,
	( ::cpp::VirtualArray (::hx::Object::*)())&::feathers::layout::VerticalListLayout_obj::get_virtualCache,
	( ::cpp::VirtualArray (::hx::Object::*)(::cpp::VirtualArray))&::feathers::layout::VerticalListLayout_obj::set_virtualCache,
	(  ::feathers::layout::VirtualLayoutRange (::hx::Object::*)(int,Float,Float, ::feathers::layout::VirtualLayoutRange))&::feathers::layout::VerticalListLayout_obj::getVisibleIndices,
};

void *VerticalListLayout_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x87530281: return &_hx_feathers_layout_VerticalListLayout__hx_openfl_events_IEventDispatcher;
		case (int)0x7543aca6: return &_hx_feathers_layout_VerticalListLayout__hx_feathers_layout_IScrollLayout;
		case (int)0x3e135379: return &_hx_feathers_layout_VerticalListLayout__hx_feathers_layout_ILayout;
		case (int)0xe3267cb4: return &_hx_feathers_layout_VerticalListLayout__hx_feathers_layout_IKeyboardNavigationLayout;
		case (int)0x3aa17e26: return &_hx_feathers_layout_VerticalListLayout__hx_feathers_layout_IVirtualLayout;
	}
	return super::_hx_getInterface(inHash);
}

Float VerticalListLayout_obj::get_scrollX(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_56_get_scrollX)
HXDLIN(  56)		return this->_scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_scrollX,return )

Float VerticalListLayout_obj::set_scrollX(Float value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_59_set_scrollX)
HXLINE(  60)		this->_scrollX = value;
HXLINE(  61)		return this->_scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_scrollX,return )

Float VerticalListLayout_obj::get_scrollY(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_72_get_scrollY)
HXDLIN(  72)		return this->_scrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_scrollY,return )

Float VerticalListLayout_obj::set_scrollY(Float value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_75_set_scrollY)
HXLINE(  76)		this->_scrollY = value;
HXLINE(  77)		return this->_scrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_scrollY,return )

::cpp::VirtualArray VerticalListLayout_obj::get_virtualCache(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_88_get_virtualCache)
HXDLIN(  88)		return this->_virtualCache;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_virtualCache,return )

::cpp::VirtualArray VerticalListLayout_obj::set_virtualCache(::cpp::VirtualArray value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_91_set_virtualCache)
HXLINE(  92)		this->_virtualCache = value;
HXLINE(  93)		return this->_virtualCache;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_virtualCache,return )

bool VerticalListLayout_obj::get_elasticTop(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_102_get_elasticTop)
HXDLIN( 102)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_elasticTop,return )

bool VerticalListLayout_obj::get_elasticRight(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_111_get_elasticRight)
HXDLIN( 111)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_elasticRight,return )

bool VerticalListLayout_obj::get_elasticBottom(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_120_get_elasticBottom)
HXDLIN( 120)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_elasticBottom,return )

bool VerticalListLayout_obj::get_elasticLeft(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_129_get_elasticLeft)
HXDLIN( 129)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_elasticLeft,return )

 ::Dynamic VerticalListLayout_obj::get_requestedRowCount(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_154_get_requestedRowCount)
HXDLIN( 154)		return this->_requestedRowCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_requestedRowCount,return )

 ::Dynamic VerticalListLayout_obj::set_requestedRowCount( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_157_set_requestedRowCount)
HXLINE( 158)		if (::hx::IsEq( this->_requestedRowCount,value )) {
HXLINE( 159)			return this->_requestedRowCount;
            		}
HXLINE( 161)		this->_requestedRowCount = value;
HXLINE( 162)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 163)		return this->_requestedRowCount;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_requestedRowCount,return )

 ::Dynamic VerticalListLayout_obj::get_requestedMinRowCount(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_189_get_requestedMinRowCount)
HXDLIN( 189)		return this->_requestedMinRowCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_requestedMinRowCount,return )

 ::Dynamic VerticalListLayout_obj::set_requestedMinRowCount( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_192_set_requestedMinRowCount)
HXLINE( 193)		if (::hx::IsEq( this->_requestedMinRowCount,value )) {
HXLINE( 194)			return this->_requestedMinRowCount;
            		}
HXLINE( 196)		this->_requestedMinRowCount = value;
HXLINE( 197)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 198)		return this->_requestedMinRowCount;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_requestedMinRowCount,return )

 ::Dynamic VerticalListLayout_obj::get_requestedMaxRowCount(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_225_get_requestedMaxRowCount)
HXDLIN( 225)		return this->_requestedMaxRowCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_requestedMaxRowCount,return )

 ::Dynamic VerticalListLayout_obj::set_requestedMaxRowCount( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_228_set_requestedMaxRowCount)
HXLINE( 229)		if (::hx::IsEq( this->_requestedMaxRowCount,value )) {
HXLINE( 230)			return this->_requestedMaxRowCount;
            		}
HXLINE( 232)		this->_requestedMaxRowCount = value;
HXLINE( 233)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 234)		return this->_requestedMaxRowCount;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_requestedMaxRowCount,return )

Float VerticalListLayout_obj::get_paddingTop(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_257_get_paddingTop)
HXDLIN( 257)		return this->_paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_paddingTop,return )

Float VerticalListLayout_obj::set_paddingTop(Float value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_260_set_paddingTop)
HXLINE( 261)		if ((this->_paddingTop == value)) {
HXLINE( 262)			return this->_paddingTop;
            		}
HXLINE( 264)		this->_paddingTop = value;
HXLINE( 265)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 266)		return this->_paddingTop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_paddingTop,return )

Float VerticalListLayout_obj::get_paddingRight(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_289_get_paddingRight)
HXDLIN( 289)		return this->_paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_paddingRight,return )

Float VerticalListLayout_obj::set_paddingRight(Float value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_292_set_paddingRight)
HXLINE( 293)		if ((this->_paddingRight == value)) {
HXLINE( 294)			return this->_paddingRight;
            		}
HXLINE( 296)		this->_paddingRight = value;
HXLINE( 297)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 298)		return this->_paddingRight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_paddingRight,return )

Float VerticalListLayout_obj::get_paddingBottom(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_321_get_paddingBottom)
HXDLIN( 321)		return this->_paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_paddingBottom,return )

Float VerticalListLayout_obj::set_paddingBottom(Float value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_324_set_paddingBottom)
HXLINE( 325)		if ((this->_paddingBottom == value)) {
HXLINE( 326)			return this->_paddingBottom;
            		}
HXLINE( 328)		this->_paddingBottom = value;
HXLINE( 329)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 330)		return this->_paddingBottom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_paddingBottom,return )

Float VerticalListLayout_obj::get_paddingLeft(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_353_get_paddingLeft)
HXDLIN( 353)		return this->_paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_paddingLeft,return )

Float VerticalListLayout_obj::set_paddingLeft(Float value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_356_set_paddingLeft)
HXLINE( 357)		if ((this->_paddingLeft == value)) {
HXLINE( 358)			return this->_paddingLeft;
            		}
HXLINE( 360)		this->_paddingLeft = value;
HXLINE( 361)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 362)		return this->_paddingLeft;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_paddingLeft,return )

Float VerticalListLayout_obj::get_gap(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_388_get_gap)
HXDLIN( 388)		return this->_gap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_gap,return )

Float VerticalListLayout_obj::set_gap(Float value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_391_set_gap)
HXLINE( 392)		if ((this->_gap == value)) {
HXLINE( 393)			return this->_gap;
            		}
HXLINE( 395)		this->_gap = value;
HXLINE( 396)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 397)		return this->_gap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_gap,return )

Float VerticalListLayout_obj::get_minGap(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_423_get_minGap)
HXDLIN( 423)		return this->_minGap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_minGap,return )

Float VerticalListLayout_obj::set_minGap(Float value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_426_set_minGap)
HXLINE( 427)		if ((this->_minGap == value)) {
HXLINE( 428)			return this->_minGap;
            		}
HXLINE( 430)		this->_minGap = value;
HXLINE( 431)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 432)		return this->_minGap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_minGap,return )

 ::feathers::layout::VerticalAlign VerticalListLayout_obj::get_verticalAlign(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_464_get_verticalAlign)
HXDLIN( 464)		return this->_verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_verticalAlign,return )

 ::feathers::layout::VerticalAlign VerticalListLayout_obj::set_verticalAlign( ::feathers::layout::VerticalAlign value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_467_set_verticalAlign)
HXLINE( 468)		if (::hx::IsPointerEq( this->_verticalAlign,value )) {
HXLINE( 469)			return this->_verticalAlign;
            		}
HXLINE( 471)		this->_verticalAlign = value;
HXLINE( 472)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 473)		return this->_verticalAlign;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_verticalAlign,return )

bool VerticalListLayout_obj::get_contentJustify(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_491_get_contentJustify)
HXDLIN( 491)		return this->_contentJustify;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_contentJustify,return )

bool VerticalListLayout_obj::set_contentJustify(bool value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_494_set_contentJustify)
HXLINE( 495)		if ((this->_contentJustify == value)) {
HXLINE( 496)			return this->_contentJustify;
            		}
HXLINE( 498)		this->_contentJustify = value;
HXLINE( 499)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 500)		return this->_contentJustify;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_contentJustify,return )

bool VerticalListLayout_obj::get_widthResetEnabled(){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_515_get_widthResetEnabled)
HXDLIN( 515)		return this->_widthResetEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VerticalListLayout_obj,get_widthResetEnabled,return )

bool VerticalListLayout_obj::set_widthResetEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_518_set_widthResetEnabled)
HXLINE( 519)		if ((this->_widthResetEnabled == value)) {
HXLINE( 520)			return this->_widthResetEnabled;
            		}
HXLINE( 522)		this->_widthResetEnabled = value;
HXLINE( 523)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 524)		return this->_widthResetEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,set_widthResetEnabled,return )

void VerticalListLayout_obj::setPadding(Float value){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_537_setPadding)
HXLINE( 538)		this->set_paddingTop(value);
HXLINE( 539)		this->set_paddingRight(value);
HXLINE( 540)		this->set_paddingBottom(value);
HXLINE( 541)		this->set_paddingLeft(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VerticalListLayout_obj,setPadding,(void))

 ::feathers::layout::LayoutBoundsResult VerticalListLayout_obj::layout(::Array< ::Dynamic> items, ::feathers::layout::Measurements measurements, ::feathers::layout::LayoutBoundsResult result){
            	HX_GC_STACKFRAME(&_hx_pos_19102b100d84e010_547_layout)
HXLINE( 548)		Float adjustedGap = this->_gap;
HXLINE( 549)		bool hasFlexGap = (this->_gap == ::hx::DivByZero(((Float)1.0)));
HXLINE( 550)		if (hasFlexGap) {
HXLINE( 551)			adjustedGap = this->_minGap;
            		}
HXLINE( 554)		Float maxItemWidth = this->calculateMaxItemWidth(items,measurements);
HXLINE( 555)		Float viewPortWidth = this->calculateViewPortWidth(maxItemWidth,measurements);
HXLINE( 556)		Float minItemWidth = ((viewPortWidth - this->_paddingLeft) - this->_paddingRight);
HXLINE( 557)		Float itemWidth = maxItemWidth;
HXLINE( 558)		bool _hx_tmp;
HXDLIN( 558)		if (this->_contentJustify) {
HXLINE( 558)			_hx_tmp = (itemWidth < minItemWidth);
            		}
            		else {
HXLINE( 558)			_hx_tmp = true;
            		}
HXDLIN( 558)		if (_hx_tmp) {
HXLINE( 559)			itemWidth = minItemWidth;
            		}
HXLINE( 561)		Float virtualRowHeight = this->calculateVirtualRowHeight(items,itemWidth);
HXLINE( 562)		Float positionY = this->_paddingTop;
HXLINE( 563)		{
HXLINE( 563)			int _g = 0;
HXDLIN( 563)			int _g1 = items->length;
HXDLIN( 563)			while((_g < _g1)){
HXLINE( 563)				_g = (_g + 1);
HXDLIN( 563)				int i = (_g - 1);
HXLINE( 564)				 ::openfl::display::DisplayObject item = items->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 565)				if (::hx::IsNull( item )) {
HXLINE( 566)					Float itemHeight = virtualRowHeight;
HXLINE( 567)					if (::hx::IsNotNull( this->_virtualCache )) {
HXLINE( 568)						 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->_virtualCache->__get(i),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 569)						bool _hx_tmp1;
HXDLIN( 569)						if (::hx::IsNotNull( cacheItem )) {
HXLINE( 569)							_hx_tmp1 = ::hx::IsNotNull( cacheItem->itemHeight );
            						}
            						else {
HXLINE( 569)							_hx_tmp1 = false;
            						}
HXDLIN( 569)						if (_hx_tmp1) {
HXLINE( 570)							itemHeight = ( (Float)(cacheItem->itemHeight) );
            						}
            					}
HXLINE( 573)					positionY = (positionY + (itemHeight + adjustedGap));
HXLINE( 574)					continue;
            				}
HXLINE( 576)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 577)					if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout( ::hx::interface_check(item,0xf54ca718)))) {
HXLINE( 578)						continue;
            					}
            				}
HXLINE( 581)				item->set_x(this->_paddingLeft);
HXLINE( 582)				item->set_y(positionY);
HXLINE( 583)				item->set_width(itemWidth);
HXLINE( 584)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 585)					::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            				}
HXLINE( 587)				Float itemHeight1 = item->get_height();
HXLINE( 588)				if (::hx::IsNotNull( this->_virtualCache )) {
HXLINE( 589)					 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem1 = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->_virtualCache->__get(i),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 590)					bool _hx_tmp2;
HXDLIN( 590)					if (::hx::IsNotNull( cacheItem1 )) {
HXLINE( 590)						if (::hx::IsNotNull( cacheItem1->itemHeight )) {
HXLINE( 590)							_hx_tmp2 = ::hx::IsNotEq( cacheItem1->itemHeight,itemHeight1 );
            						}
            						else {
HXLINE( 590)							_hx_tmp2 = true;
            						}
            					}
            					else {
HXLINE( 590)						_hx_tmp2 = false;
            					}
HXDLIN( 590)					if (_hx_tmp2) {
HXLINE( 591)						 ::Dynamic cachedHeight = cacheItem1->itemHeight;
HXLINE( 592)						cacheItem1->itemHeight = itemHeight1;
HXLINE( 593)						bool _hx_tmp3;
HXDLIN( 593)						if (::hx::IsNull( cachedHeight )) {
HXLINE( 593)							_hx_tmp3 = (positionY < this->get_scrollY());
            						}
            						else {
HXLINE( 593)							_hx_tmp3 = false;
            						}
HXDLIN( 593)						if (_hx_tmp3) {
HXLINE( 597)							Float offsetY = (itemHeight1 - virtualRowHeight);
HXLINE( 598)							::feathers::events::ScrollEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("scroll",0d,d8,64,47),false,false,((Float)0.0),offsetY);
            						}
HXLINE( 602)						bool _hx_tmp4;
HXDLIN( 602)						if (::hx::IsNull( cachedHeight )) {
HXLINE( 602)							_hx_tmp4 = (itemHeight1 != virtualRowHeight);
            						}
            						else {
HXLINE( 602)							_hx_tmp4 = true;
            						}
HXDLIN( 602)						if (_hx_tmp4) {
HXLINE( 605)							::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
            						}
            					}
            				}
HXLINE( 609)				positionY = (positionY + (itemHeight1 + adjustedGap));
            			}
            		}
HXLINE( 611)		if ((items->length > 0)) {
HXLINE( 612)			positionY = (positionY - adjustedGap);
            		}
HXLINE( 614)		positionY = (positionY + this->_paddingBottom);
HXLINE( 615)		Float viewPortHeight = positionY;
HXLINE( 616)		if (::hx::IsNotNull( measurements->height )) {
HXLINE( 617)			viewPortHeight = ( (Float)(measurements->height) );
            		}
            		else {
HXLINE( 619)			if (::hx::IsNotNull( this->_requestedRowCount )) {
HXLINE( 620)				viewPortHeight = ((this->_paddingTop + this->_paddingBottom) + ((( (Float)(this->_requestedRowCount) ) * (virtualRowHeight + adjustedGap)) - adjustedGap));
            			}
            			else {
HXLINE( 622)				bool _hx_tmp5;
HXDLIN( 622)				if (::hx::IsNotNull( this->_requestedMinRowCount )) {
HXLINE( 622)					_hx_tmp5 = ::hx::IsLess( items->length,this->_requestedMinRowCount );
            				}
            				else {
HXLINE( 622)					_hx_tmp5 = false;
            				}
HXDLIN( 622)				if (_hx_tmp5) {
HXLINE( 623)					viewPortHeight = ((this->_paddingTop + this->_paddingBottom) + ((( (Float)(this->_requestedMinRowCount) ) * (virtualRowHeight + adjustedGap)) - adjustedGap));
            				}
            				else {
HXLINE( 624)					bool _hx_tmp6;
HXDLIN( 624)					if (::hx::IsNotNull( this->_requestedMaxRowCount )) {
HXLINE( 624)						_hx_tmp6 = ::hx::IsGreater( items->length,this->_requestedMaxRowCount );
            					}
            					else {
HXLINE( 624)						_hx_tmp6 = false;
            					}
HXDLIN( 624)					if (_hx_tmp6) {
HXLINE( 625)						viewPortHeight = ((this->_paddingTop + this->_paddingBottom) + ((( (Float)(this->_requestedMaxRowCount) ) * (virtualRowHeight + adjustedGap)) - adjustedGap));
            					}
            				}
            			}
HXLINE( 628)			bool _hx_tmp7;
HXDLIN( 628)			if (::hx::IsNotNull( measurements->minHeight )) {
HXLINE( 628)				_hx_tmp7 = ::hx::IsLess( viewPortHeight,measurements->minHeight );
            			}
            			else {
HXLINE( 628)				_hx_tmp7 = false;
            			}
HXDLIN( 628)			if (_hx_tmp7) {
HXLINE( 629)				viewPortHeight = ( (Float)(measurements->minHeight) );
            			}
            			else {
HXLINE( 630)				bool _hx_tmp8;
HXDLIN( 630)				if (::hx::IsNotNull( measurements->maxHeight )) {
HXLINE( 630)					_hx_tmp8 = ::hx::IsGreater( viewPortHeight,measurements->maxHeight );
            				}
            				else {
HXLINE( 630)					_hx_tmp8 = false;
            				}
HXDLIN( 630)				if (_hx_tmp8) {
HXLINE( 631)					viewPortHeight = ( (Float)(measurements->maxHeight) );
            				}
            			}
            		}
HXLINE( 634)		{
HXLINE( 634)			Float contentHeight = ((positionY - this->_paddingTop) - this->_paddingBottom);
HXDLIN( 634)			Float alignOffset = ((Float)0.0);
HXDLIN( 634)			Float gapOffset = ((Float)0.0);
HXDLIN( 634)			Float maxAlignmentHeight = ((viewPortHeight - this->_paddingTop) - this->_paddingBottom);
HXDLIN( 634)			Float adjustedGap1 = this->_gap;
HXDLIN( 634)			bool hasFlexGap1 = (this->_gap == ::hx::DivByZero(((Float)1.0)));
HXDLIN( 634)			if (hasFlexGap1) {
HXLINE( 634)				adjustedGap1 = this->_minGap;
HXDLIN( 634)				bool _hx_tmp9;
HXDLIN( 634)				if ((items->length > 1)) {
HXLINE( 634)					_hx_tmp9 = (maxAlignmentHeight > contentHeight);
            				}
            				else {
HXLINE( 634)					_hx_tmp9 = false;
            				}
HXDLIN( 634)				if (_hx_tmp9) {
HXLINE( 634)					adjustedGap1 = (adjustedGap1 + ((maxAlignmentHeight - contentHeight) / ( (Float)((items->length - 1)) )));
            				}
HXDLIN( 634)				gapOffset = (adjustedGap1 - this->_minGap);
            			}
            			else {
HXLINE( 634)				switch((int)(this->_verticalAlign->_hx_getIndex())){
            					case (int)0: {
HXLINE( 634)						alignOffset = ((Float)0.0);
            					}
            					break;
            					case (int)1: {
HXLINE( 634)						alignOffset = ((maxAlignmentHeight - contentHeight) / ((Float)2.0));
            					}
            					break;
            					case (int)2: {
HXLINE( 634)						alignOffset = (maxAlignmentHeight - contentHeight);
            					}
            					break;
            					default:{
HXLINE( 634)						HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Unknown vertical align: ",77,68,f9,89) + ::Std_obj::string(this->_verticalAlign))));
            					}
            				}
HXDLIN( 634)				if ((alignOffset < ((Float)0.0))) {
HXLINE( 634)					alignOffset = ((Float)0.0);
            				}
            			}
HXDLIN( 634)			bool _hx_tmp10;
HXDLIN( 634)			if ((alignOffset == ((Float)0.0))) {
HXLINE( 634)				_hx_tmp10 = (gapOffset == ((Float)0.0));
            			}
            			else {
HXLINE( 634)				_hx_tmp10 = false;
            			}
HXDLIN( 634)			if (!(_hx_tmp10)) {
HXLINE( 634)				Float totalOffset = alignOffset;
HXDLIN( 634)				{
HXLINE( 634)					int _g2 = 0;
HXDLIN( 634)					while((_g2 < items->length)){
HXLINE( 634)						 ::openfl::display::DisplayObject item1 = items->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 634)						_g2 = (_g2 + 1);
HXDLIN( 634)						::Dynamic layoutObject = null();
HXDLIN( 634)						if (::Std_obj::isOfType(item1,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 634)							layoutObject =  ::hx::interface_check(item1,0xf54ca718);
HXDLIN( 634)							if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutObject))) {
HXLINE( 634)								continue;
            							}
            						}
HXDLIN( 634)						if (::hx::IsNotNull( item1 )) {
HXLINE( 634)							Float _hx_tmp11 = this->_paddingTop;
HXDLIN( 634)							item1->set_y(::Math_obj::max(_hx_tmp11,(item1->get_y() + totalOffset)));
            						}
HXDLIN( 634)						totalOffset = (totalOffset + gapOffset);
            					}
            				}
            			}
            		}
HXLINE( 635)		if (::hx::IsNull( result )) {
HXLINE( 636)			result =  ::feathers::layout::LayoutBoundsResult_obj::__alloc( HX_CTX );
            		}
HXLINE( 638)		result->contentX = ((Float)0.0);
HXLINE( 639)		result->contentY = ((Float)0.0);
HXLINE( 640)		result->contentWidth = ((itemWidth + this->_paddingLeft) + this->_paddingRight);
HXLINE( 641)		result->contentHeight = positionY;
HXLINE( 642)		if (::hx::IsNotNull( this->_requestedMinRowCount )) {
HXLINE( 643)			result->contentMinHeight = ((this->_paddingTop + this->_paddingBottom) + ((( (Float)(this->_requestedMinRowCount) ) * (virtualRowHeight + adjustedGap)) - adjustedGap));
            		}
HXLINE( 645)		result->viewPortWidth = viewPortWidth;
HXLINE( 646)		result->viewPortHeight = viewPortHeight;
HXLINE( 647)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC3(VerticalListLayout_obj,layout,return )

Float VerticalListLayout_obj::calculateMaxItemWidth(::Array< ::Dynamic> items, ::feathers::layout::Measurements measurements){
            	HX_GC_STACKFRAME(&_hx_pos_19102b100d84e010_650_calculateMaxItemWidth)
HXLINE( 651)		Float maxItemWidth = ((Float)0.0);
HXLINE( 652)		{
HXLINE( 652)			int _g = 0;
HXDLIN( 652)			int _g1 = items->length;
HXDLIN( 652)			while((_g < _g1)){
HXLINE( 652)				_g = (_g + 1);
HXDLIN( 652)				int i = (_g - 1);
HXLINE( 653)				 ::openfl::display::DisplayObject item = items->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 654)				bool _hx_tmp;
HXDLIN( 654)				if (::hx::IsNotNull( this->_virtualCache )) {
HXLINE( 654)					_hx_tmp = (this->_virtualCache->get_length() > i);
            				}
            				else {
HXLINE( 654)					_hx_tmp = false;
            				}
HXDLIN( 654)				if (_hx_tmp) {
HXLINE( 655)					 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->_virtualCache->__get(i),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 656)					if (::hx::IsNotNull( cacheItem )) {
HXLINE( 659)						Float itemWidth = cacheItem->itemWidth;
HXLINE( 660)						if ((maxItemWidth < itemWidth)) {
HXLINE( 661)							maxItemWidth = itemWidth;
            						}
HXLINE( 663)						continue;
            					}
            				}
HXLINE( 666)				if (::hx::IsNull( item )) {
HXLINE( 667)					continue;
            				}
HXLINE( 669)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 670)					if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout( ::hx::interface_check(item,0xf54ca718)))) {
HXLINE( 671)						continue;
            					}
            				}
HXLINE( 674)				bool _hx_tmp1;
HXDLIN( 674)				bool _hx_tmp2;
HXDLIN( 674)				if (this->_widthResetEnabled) {
HXLINE( 674)					_hx_tmp2 = ::hx::IsNull( measurements->width );
            				}
            				else {
HXLINE( 674)					_hx_tmp2 = false;
            				}
HXDLIN( 674)				if (_hx_tmp2) {
HXLINE( 674)					_hx_tmp1 = ::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IMeasureObject >());
            				}
            				else {
HXLINE( 674)					_hx_tmp1 = false;
            				}
HXDLIN( 674)				if (_hx_tmp1) {
HXLINE( 675)					::feathers::core::IMeasureObject_obj::resetWidth( ::hx::interface_check(item,0xcfc32883));
            				}
HXLINE( 677)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 678)					::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            				}
HXLINE( 680)				Float itemWidth1 = item->get_width();
HXLINE( 681)				if ((maxItemWidth < itemWidth1)) {
HXLINE( 682)					maxItemWidth = itemWidth1;
            				}
HXLINE( 684)				if (::hx::IsNotNull( this->_virtualCache )) {
HXLINE( 685)					 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem1 = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->_virtualCache->__get(i),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 686)					if (::hx::IsNull( cacheItem1 )) {
HXLINE( 687)						if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 688)							::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            						}
HXLINE( 692)						cacheItem1 =  ::feathers::layout::_VerticalListLayout::VirtualCacheItem_obj::__alloc( HX_CTX ,itemWidth1,null());
HXLINE( 693)						this->_virtualCache->set(i,cacheItem1);
            					}
            				}
            			}
            		}
HXLINE( 697)		if (::hx::IsNotNull( measurements->maxWidth )) {
HXLINE( 698)			Float maxJustifyWidth = ((( (Float)(measurements->maxWidth) ) - this->_paddingLeft) - this->_paddingRight);
HXLINE( 699)			if ((maxItemWidth > maxJustifyWidth)) {
HXLINE( 700)				maxItemWidth = maxJustifyWidth;
            			}
            		}
HXLINE( 703)		return maxItemWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VerticalListLayout_obj,calculateMaxItemWidth,return )

Float VerticalListLayout_obj::calculateViewPortWidth(Float maxItemWidth, ::feathers::layout::Measurements measurements){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_706_calculateViewPortWidth)
HXLINE( 707)		if (::hx::IsNotNull( measurements->width )) {
HXLINE( 708)			return ( (Float)(measurements->width) );
            		}
HXLINE( 710)		return ((maxItemWidth + this->_paddingLeft) + this->_paddingRight);
            	}


HX_DEFINE_DYNAMIC_FUNC2(VerticalListLayout_obj,calculateViewPortWidth,return )

Float VerticalListLayout_obj::calculateVirtualRowHeight(::Array< ::Dynamic> items,Float itemWidth){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_713_calculateVirtualRowHeight)
HXLINE( 714)		{
HXLINE( 714)			int _g = 0;
HXDLIN( 714)			int _g1 = items->length;
HXDLIN( 714)			while((_g < _g1)){
HXLINE( 714)				_g = (_g + 1);
HXDLIN( 714)				int i = (_g - 1);
HXLINE( 715)				 ::openfl::display::DisplayObject item = items->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 716)				if (::hx::IsNull( item )) {
HXLINE( 717)					bool _hx_tmp;
HXDLIN( 717)					if (::hx::IsNotNull( this->_virtualCache )) {
HXLINE( 717)						_hx_tmp = (this->_virtualCache->get_length() <= i);
            					}
            					else {
HXLINE( 717)						_hx_tmp = true;
            					}
HXDLIN( 717)					if (_hx_tmp) {
HXLINE( 718)						continue;
            					}
HXLINE( 720)					 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->_virtualCache->__get(i),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 721)					bool _hx_tmp1;
HXDLIN( 721)					if (::hx::IsNotNull( cacheItem )) {
HXLINE( 721)						_hx_tmp1 = ::hx::IsNull( cacheItem->itemHeight );
            					}
            					else {
HXLINE( 721)						_hx_tmp1 = true;
            					}
HXDLIN( 721)					if (_hx_tmp1) {
HXLINE( 722)						continue;
            					}
HXLINE( 725)					return ( (Float)(cacheItem->itemHeight) );
            				}
HXLINE( 727)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 728)					if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout( ::hx::interface_check(item,0xf54ca718)))) {
HXLINE( 729)						continue;
            					}
            				}
HXLINE( 732)				item->set_width(itemWidth);
HXLINE( 733)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 734)					::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(item,0x64d4b3cd));
            				}
HXLINE( 736)				Float itemHeight = item->get_height();
HXLINE( 737)				if (::hx::IsNotNull( this->_virtualCache )) {
HXLINE( 738)					 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem1 = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->_virtualCache->__get(i),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 739)					bool _hx_tmp2;
HXDLIN( 739)					if (::hx::IsNotNull( cacheItem1 )) {
HXLINE( 739)						if (::hx::IsNotNull( cacheItem1->itemHeight )) {
HXLINE( 739)							_hx_tmp2 = ::hx::IsNotEq( cacheItem1->itemHeight,itemHeight );
            						}
            						else {
HXLINE( 739)							_hx_tmp2 = true;
            						}
            					}
            					else {
HXLINE( 739)						_hx_tmp2 = false;
            					}
HXDLIN( 739)					if (_hx_tmp2) {
HXLINE( 740)						cacheItem1->itemHeight = itemHeight;
HXLINE( 743)						::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
            					}
            				}
HXLINE( 746)				return itemHeight;
            			}
            		}
HXLINE( 748)		return ((Float)0.0);
            	}


HX_DEFINE_DYNAMIC_FUNC2(VerticalListLayout_obj,calculateVirtualRowHeight,return )

 ::feathers::layout::VirtualLayoutRange VerticalListLayout_obj::getVisibleIndices(int itemCount,Float width,Float height, ::feathers::layout::VirtualLayoutRange result){
            	HX_GC_STACKFRAME(&_hx_pos_19102b100d84e010_754_getVisibleIndices)
HXLINE( 755)		Float adjustedGap = this->_gap;
HXLINE( 756)		bool hasFlexGap = (this->_gap == ::hx::DivByZero(((Float)1.0)));
HXLINE( 757)		if (hasFlexGap) {
HXLINE( 758)			adjustedGap = this->_minGap;
            		}
HXLINE( 761)		int startIndex = -1;
HXLINE( 762)		int endIndex = -1;
HXLINE( 763)		 ::Dynamic estimatedItemHeight = null();
HXLINE( 764)		Float positionY = this->_paddingTop;
HXLINE( 765)		Float scrollY = this->_scrollY;
HXLINE( 766)		if ((scrollY < ((Float)0.0))) {
HXLINE( 767)			scrollY = ((Float)0.0);
            		}
HXLINE( 769)		int minItems = 0;
HXLINE( 770)		Float maxY = (scrollY + height);
HXLINE( 771)		int skippedMissingItems = 0;
HXLINE( 772)		{
HXLINE( 772)			int _g = 0;
HXDLIN( 772)			int _g1 = itemCount;
HXDLIN( 772)			while((_g < _g1)){
HXLINE( 772)				_g = (_g + 1);
HXDLIN( 772)				int i = (_g - 1);
HXLINE( 773)				Float itemHeight = ((Float)0.0);
HXLINE( 774)				if (::hx::IsNotNull( this->_virtualCache )) {
HXLINE( 775)					 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->_virtualCache->__get(i),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 776)					bool _hx_tmp;
HXDLIN( 776)					if (::hx::IsNotNull( cacheItem )) {
HXLINE( 776)						_hx_tmp = ::hx::IsNotNull( cacheItem->itemHeight );
            					}
            					else {
HXLINE( 776)						_hx_tmp = false;
            					}
HXDLIN( 776)					if (_hx_tmp) {
HXLINE( 777)						itemHeight = ( (Float)(cacheItem->itemHeight) );
HXLINE( 778)						if (::hx::IsNull( estimatedItemHeight )) {
HXLINE( 779)							estimatedItemHeight = itemHeight;
HXLINE( 780)							minItems = (::Math_obj::ceil((height / (estimatedItemHeight + adjustedGap))) + 1);
HXLINE( 781)							if ((skippedMissingItems > 0)) {
HXLINE( 783)								{
HXLINE( 783)									int _g2 = 0;
HXDLIN( 783)									int _g3 = skippedMissingItems;
HXDLIN( 783)									while((_g2 < _g3)){
HXLINE( 783)										_g2 = (_g2 + 1);
HXDLIN( 783)										int j = (_g2 - 1);
HXLINE( 784)										positionY = (positionY + (estimatedItemHeight + adjustedGap));
HXLINE( 785)										bool _hx_tmp1;
HXDLIN( 785)										if ((startIndex == -1)) {
HXLINE( 785)											_hx_tmp1 = (positionY >= scrollY);
            										}
            										else {
HXLINE( 785)											_hx_tmp1 = false;
            										}
HXDLIN( 785)										if (_hx_tmp1) {
HXLINE( 786)											startIndex = j;
            										}
HXLINE( 788)										if ((startIndex != -1)) {
HXLINE( 789)											endIndex = j;
HXLINE( 790)											bool _hx_tmp2;
HXDLIN( 790)											if ((positionY >= maxY)) {
HXLINE( 790)												_hx_tmp2 = (((endIndex - startIndex) + 1) >= minItems);
            											}
            											else {
HXLINE( 790)												_hx_tmp2 = false;
            											}
HXDLIN( 790)											if (_hx_tmp2) {
HXLINE( 791)												goto _hx_goto_45;
            											}
            										}
            									}
            									_hx_goto_45:;
            								}
HXLINE( 795)								skippedMissingItems = 0;
            							}
            						}
            					}
            					else {
HXLINE( 798)						if (::hx::IsNotNull( estimatedItemHeight )) {
HXLINE( 799)							itemHeight = ( (Float)(estimatedItemHeight) );
            						}
            						else {
HXLINE( 807)							if ((skippedMissingItems < 5)) {
HXLINE( 808)								skippedMissingItems = (skippedMissingItems + 1);
HXLINE( 809)								continue;
            							}
HXLINE( 815)							startIndex = 0;
HXLINE( 816)							endIndex = 0;
HXLINE( 817)							goto _hx_goto_44;
            						}
            					}
            				}
HXLINE( 820)				positionY = (positionY + (itemHeight + adjustedGap));
HXLINE( 821)				bool _hx_tmp3;
HXDLIN( 821)				if ((startIndex == -1)) {
HXLINE( 821)					_hx_tmp3 = (positionY >= scrollY);
            				}
            				else {
HXLINE( 821)					_hx_tmp3 = false;
            				}
HXDLIN( 821)				if (_hx_tmp3) {
HXLINE( 822)					startIndex = i;
            				}
HXLINE( 824)				if ((startIndex != -1)) {
HXLINE( 825)					endIndex = i;
HXLINE( 826)					bool _hx_tmp4;
HXDLIN( 826)					if ((positionY >= maxY)) {
HXLINE( 826)						_hx_tmp4 = (((endIndex - startIndex) + 1) >= minItems);
            					}
            					else {
HXLINE( 826)						_hx_tmp4 = false;
            					}
HXDLIN( 826)					if (_hx_tmp4) {
HXLINE( 827)						goto _hx_goto_44;
            					}
            				}
            			}
            			_hx_goto_44:;
            		}
HXLINE( 831)		bool _hx_tmp5;
HXDLIN( 831)		if ((startIndex == -1)) {
HXLINE( 831)			_hx_tmp5 = ::hx::IsPointerNotEq( this->_verticalAlign,::feathers::layout::VerticalAlign_obj::TOP_dyn() );
            		}
            		else {
HXLINE( 831)			_hx_tmp5 = false;
            		}
HXDLIN( 831)		if (_hx_tmp5) {
HXLINE( 834)			startIndex = (itemCount - 1);
HXLINE( 835)			endIndex = startIndex;
            		}
HXLINE( 839)		bool _hx_tmp6;
HXDLIN( 839)		bool _hx_tmp7;
HXDLIN( 839)		if (!((positionY < maxY))) {
HXLINE( 839)			_hx_tmp7 = (((endIndex - startIndex) + 1) < minItems);
            		}
            		else {
HXLINE( 839)			_hx_tmp7 = true;
            		}
HXDLIN( 839)		if (_hx_tmp7) {
HXLINE( 839)			_hx_tmp6 = (startIndex > 0);
            		}
            		else {
HXLINE( 839)			_hx_tmp6 = false;
            		}
HXDLIN( 839)		if (_hx_tmp6) {
HXLINE( 840)			do {
HXLINE( 841)				startIndex = (startIndex - 1);
HXLINE( 842)				Float itemHeight1 = ((Float)0.0);
HXLINE( 843)				if (::hx::IsNotNull( this->_virtualCache )) {
HXLINE( 844)					 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem1 = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->_virtualCache->__get(startIndex),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 845)					bool _hx_tmp8;
HXDLIN( 845)					if (::hx::IsNotNull( cacheItem1 )) {
HXLINE( 845)						_hx_tmp8 = ::hx::IsNotNull( cacheItem1->itemHeight );
            					}
            					else {
HXLINE( 845)						_hx_tmp8 = false;
            					}
HXDLIN( 845)					if (_hx_tmp8) {
HXLINE( 846)						itemHeight1 = ( (Float)(cacheItem1->itemHeight) );
HXLINE( 847)						if (::hx::IsNull( estimatedItemHeight )) {
HXLINE( 848)							estimatedItemHeight = itemHeight1;
HXLINE( 849)							minItems = (::Math_obj::ceil((height / (estimatedItemHeight + adjustedGap))) + 1);
            						}
            					}
            					else {
HXLINE( 851)						if (::hx::IsNotNull( estimatedItemHeight )) {
HXLINE( 852)							itemHeight1 = ( (Float)(estimatedItemHeight) );
            						}
            					}
            				}
HXLINE( 855)				positionY = (positionY + (itemHeight1 + adjustedGap));
HXLINE( 856)				bool _hx_tmp9;
HXDLIN( 856)				if ((positionY >= maxY)) {
HXLINE( 856)					_hx_tmp9 = (((endIndex - startIndex) + 1) >= minItems);
            				}
            				else {
HXLINE( 856)					_hx_tmp9 = false;
            				}
HXDLIN( 856)				if (_hx_tmp9) {
HXLINE( 857)					goto _hx_goto_46;
            				}
            			} while((startIndex > 0));
            			_hx_goto_46:;
            		}
HXLINE( 861)		if ((startIndex < 0)) {
HXLINE( 862)			startIndex = 0;
            		}
HXLINE( 864)		if (::hx::IsNull( estimatedItemHeight )) {
HXLINE( 870)			endIndex = startIndex;
            		}
            		else {
HXLINE( 871)			if ((endIndex < 0)) {
HXLINE( 872)				endIndex = startIndex;
            			}
            		}
HXLINE( 874)		if (::hx::IsNull( result )) {
HXLINE( 875)			return  ::feathers::layout::VirtualLayoutRange_obj::__alloc( HX_CTX ,startIndex,endIndex);
            		}
HXLINE( 877)		result->start = startIndex;
HXLINE( 878)		result->end = endIndex;
HXLINE( 879)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC4(VerticalListLayout_obj,getVisibleIndices,return )

 ::openfl::geom::Point VerticalListLayout_obj::getNearestScrollPositionForIndex(int index,int itemCount,Float width,Float height, ::openfl::geom::Point result){
            	HX_GC_STACKFRAME(&_hx_pos_19102b100d84e010_885_getNearestScrollPositionForIndex)
HXLINE( 886)		Float adjustedGap = this->_gap;
HXLINE( 887)		bool hasFlexGap = (this->_gap == ::hx::DivByZero(((Float)1.0)));
HXLINE( 888)		if (hasFlexGap) {
HXLINE( 889)			adjustedGap = this->_minGap;
            		}
HXLINE( 892)		 ::Dynamic estimatedItemHeight = null();
HXLINE( 893)		Float minY = ((Float)0.0);
HXLINE( 894)		Float maxY = ((Float)0.0);
HXLINE( 895)		Float positionY = this->_paddingTop;
HXLINE( 896)		{
HXLINE( 896)			int _g = 0;
HXDLIN( 896)			int _g1 = itemCount;
HXDLIN( 896)			while((_g < _g1)){
HXLINE( 896)				_g = (_g + 1);
HXDLIN( 896)				int i = (_g - 1);
HXLINE( 897)				Float itemHeight = ((Float)0.0);
HXLINE( 898)				if (::hx::IsNotNull( this->_virtualCache )) {
HXLINE( 899)					 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->_virtualCache->__get(i),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 900)					bool _hx_tmp;
HXDLIN( 900)					if (::hx::IsNotNull( cacheItem )) {
HXLINE( 900)						_hx_tmp = ::hx::IsNotNull( cacheItem->itemHeight );
            					}
            					else {
HXLINE( 900)						_hx_tmp = false;
            					}
HXDLIN( 900)					if (_hx_tmp) {
HXLINE( 901)						itemHeight = ( (Float)(cacheItem->itemHeight) );
HXLINE( 902)						if (::hx::IsNull( estimatedItemHeight )) {
HXLINE( 903)							estimatedItemHeight = itemHeight;
            						}
            					}
            					else {
HXLINE( 905)						if (::hx::IsNotNull( estimatedItemHeight )) {
HXLINE( 906)							itemHeight = ( (Float)(estimatedItemHeight) );
            						}
            					}
            				}
HXLINE( 909)				if ((i == index)) {
HXLINE( 910)					maxY = positionY;
HXLINE( 911)					minY = ((maxY + itemHeight) - height);
HXLINE( 912)					goto _hx_goto_48;
            				}
HXLINE( 914)				positionY = (positionY + (itemHeight + adjustedGap));
            			}
            			_hx_goto_48:;
            		}
HXLINE( 917)		Float targetY = this->_scrollY;
HXLINE( 918)		if ((targetY < minY)) {
HXLINE( 919)			targetY = minY;
            		}
            		else {
HXLINE( 920)			if ((targetY > maxY)) {
HXLINE( 921)				targetY = maxY;
            			}
            		}
HXLINE( 923)		if (::hx::IsNull( result )) {
HXLINE( 924)			result =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 926)		result->x = this->_scrollX;
HXLINE( 927)		result->y = targetY;
HXLINE( 928)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC5(VerticalListLayout_obj,getNearestScrollPositionForIndex,return )

int VerticalListLayout_obj::findNextKeyboardIndex(int startIndex, ::openfl::events::KeyboardEvent event,bool wrapArrowKeys,::Array< ::Dynamic> items,::Array< int > indicesToSkip,Float viewPortWidth,Float viewPortHeight){
            	HX_STACKFRAME(&_hx_pos_19102b100d84e010_935_findNextKeyboardIndex)
HXLINE( 936)		if ((items->length == 0)) {
HXLINE( 937)			return -1;
            		}
HXLINE( 940)		Float adjustedGap = this->_gap;
HXLINE( 941)		bool hasFlexGap = (this->_gap == ::hx::DivByZero(((Float)1.0)));
HXLINE( 942)		if (hasFlexGap) {
HXLINE( 943)			adjustedGap = this->_minGap;
            		}
HXLINE( 946)		 ::Dynamic estimatedItemHeight = null();
HXLINE( 947)		{
HXLINE( 947)			int _g = 0;
HXDLIN( 947)			int _g1 = items->length;
HXDLIN( 947)			while((_g < _g1)){
HXLINE( 947)				_g = (_g + 1);
HXDLIN( 947)				int i = (_g - 1);
HXLINE( 948)				Float itemHeight = ((Float)0.0);
HXLINE( 949)				if (::hx::IsNotNull( this->_virtualCache )) {
HXLINE( 950)					 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->_virtualCache->__get(i),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 951)					bool _hx_tmp;
HXDLIN( 951)					if (::hx::IsNotNull( cacheItem )) {
HXLINE( 951)						_hx_tmp = ::hx::IsNotNull( cacheItem->itemHeight );
            					}
            					else {
HXLINE( 951)						_hx_tmp = false;
            					}
HXDLIN( 951)					if (_hx_tmp) {
HXLINE( 952)						itemHeight = ( (Float)(cacheItem->itemHeight) );
HXLINE( 953)						if (::hx::IsNull( estimatedItemHeight )) {
HXLINE( 954)							estimatedItemHeight = itemHeight;
HXLINE( 955)							goto _hx_goto_50;
            						}
            					}
            				}
            			}
            			_hx_goto_50:;
            		}
HXLINE( 961)		int maxIndex = (items->length - 1);
HXLINE( 962)		int result = startIndex;
HXLINE( 963)		if ((result == -1)) {
HXLINE( 964)			switch((int)(event->keyCode)){
            				case (int)38: {
HXLINE( 965)					if (wrapArrowKeys) {
HXLINE( 965)						result = maxIndex;
            					}
            					else {
HXLINE( 965)						result = -1;
            					}
            				}
            				break;
            				case (int)40: {
HXLINE( 966)					result = 0;
            				}
            				break;
            				default:{
HXLINE( 967)					result = -1;
            				}
            			}
HXLINE( 969)			if ((result == -1)) {
HXLINE( 970)				return result;
            			}
HXLINE( 972)			bool _hx_tmp1;
HXDLIN( 972)			if (::hx::IsNotNull( indicesToSkip )) {
HXLINE( 972)				_hx_tmp1 = (indicesToSkip->indexOf(result,null()) == -1);
            			}
            			else {
HXLINE( 972)				_hx_tmp1 = true;
            			}
HXDLIN( 972)			if (_hx_tmp1) {
HXLINE( 973)				return result;
            			}
            		}
HXLINE( 978)		bool needsAnotherPass = true;
HXLINE( 979)		int nextKeyCode = event->keyCode;
HXLINE( 980)		int lastResult = result;
HXLINE( 981)		while(needsAnotherPass){
HXLINE( 982)			needsAnotherPass = false;
HXLINE( 983)			switch((int)(nextKeyCode)){
            				case (int)33: {
HXLINE( 989)					Float yPosition = ((Float)0.0);
HXLINE( 990)					int i1 = startIndex;
HXLINE( 991)					while((i1 >= 0)){
HXLINE( 992)						 ::openfl::display::DisplayObject item = items->__get(i1).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 993)						 ::Dynamic itemHeight1 = estimatedItemHeight;
HXLINE( 994)						if (::hx::IsNull( item )) {
HXLINE( 995)							if (::hx::IsNotNull( this->_virtualCache )) {
HXLINE( 996)								 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem1 = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->_virtualCache->__get(i1),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE( 997)								bool _hx_tmp2;
HXDLIN( 997)								if (::hx::IsNotNull( cacheItem1 )) {
HXLINE( 997)									_hx_tmp2 = ::hx::IsNotNull( cacheItem1->itemHeight );
            								}
            								else {
HXLINE( 997)									_hx_tmp2 = false;
            								}
HXDLIN( 997)								if (_hx_tmp2) {
HXLINE( 998)									itemHeight1 = cacheItem1->itemHeight;
            								}
            							}
            						}
            						else {
HXLINE(1002)							itemHeight1 = item->get_height();
            						}
HXLINE(1004)						yPosition = (yPosition + itemHeight1);
HXLINE(1005)						bool _hx_tmp3;
HXDLIN(1005)						if (::hx::IsNotNull( indicesToSkip )) {
HXLINE(1005)							_hx_tmp3 = (indicesToSkip->indexOf(i1,null()) != -1);
            						}
            						else {
HXLINE(1005)							_hx_tmp3 = false;
            						}
HXDLIN(1005)						if (_hx_tmp3) {
HXLINE(1006)							yPosition = (yPosition + adjustedGap);
HXLINE(1007)							i1 = (i1 - 1);
HXLINE(1008)							continue;
            						}
HXLINE(1010)						if ((yPosition > viewPortHeight)) {
HXLINE(1011)							goto _hx_goto_52;
            						}
HXLINE(1013)						yPosition = (yPosition + adjustedGap);
HXLINE(1014)						result = i1;
HXLINE(1015)						i1 = (i1 - 1);
            					}
            					_hx_goto_52:;
HXLINE(1017)					nextKeyCode = 38;
            				}
            				break;
            				case (int)34: {
HXLINE(1019)					Float yPosition1 = ((Float)0.0);
HXLINE(1020)					{
HXLINE(1020)						int _g2 = startIndex;
HXDLIN(1020)						int _g3 = items->length;
HXDLIN(1020)						while((_g2 < _g3)){
HXLINE(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							int i2 = (_g2 - 1);
HXLINE(1021)							 ::openfl::display::DisplayObject item1 = items->__get(i2).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE(1022)							 ::Dynamic itemHeight2 = estimatedItemHeight;
HXLINE(1023)							if (::hx::IsNull( item1 )) {
HXLINE(1024)								if (::hx::IsNotNull( this->_virtualCache )) {
HXLINE(1025)									 ::feathers::layout::_VerticalListLayout::VirtualCacheItem cacheItem2 = ( ( ::feathers::layout::_VerticalListLayout::VirtualCacheItem)(::Std_obj::downcast(this->_virtualCache->__get(i2),::hx::ClassOf< ::feathers::layout::_VerticalListLayout::VirtualCacheItem >())) );
HXLINE(1026)									bool _hx_tmp4;
HXDLIN(1026)									if (::hx::IsNotNull( cacheItem2 )) {
HXLINE(1026)										_hx_tmp4 = ::hx::IsNotNull( cacheItem2->itemHeight );
            									}
            									else {
HXLINE(1026)										_hx_tmp4 = false;
            									}
HXDLIN(1026)									if (_hx_tmp4) {
HXLINE(1027)										itemHeight2 = cacheItem2->itemHeight;
            									}
            								}
            							}
            							else {
HXLINE(1031)								itemHeight2 = item1->get_height();
            							}
HXLINE(1033)							yPosition1 = (yPosition1 + itemHeight2);
HXLINE(1034)							bool _hx_tmp5;
HXDLIN(1034)							if (::hx::IsNotNull( indicesToSkip )) {
HXLINE(1034)								_hx_tmp5 = (indicesToSkip->indexOf(i2,null()) != -1);
            							}
            							else {
HXLINE(1034)								_hx_tmp5 = false;
            							}
HXDLIN(1034)							if (_hx_tmp5) {
HXLINE(1035)								yPosition1 = (yPosition1 + adjustedGap);
HXLINE(1036)								continue;
            							}
HXLINE(1038)							if ((yPosition1 > viewPortHeight)) {
HXLINE(1039)								goto _hx_goto_53;
            							}
HXLINE(1041)							yPosition1 = (yPosition1 + adjustedGap);
HXLINE(1042)							result = i2;
            						}
            						_hx_goto_53:;
            					}
HXLINE(1044)					nextKeyCode = 40;
            				}
            				break;
            				case (int)35: {
HXLINE(1053)					int i3 = maxIndex;
HXLINE(1054)					while((i3 > startIndex)){
HXLINE(1055)						bool _hx_tmp6;
HXDLIN(1055)						if (::hx::IsNotNull( indicesToSkip )) {
HXLINE(1055)							_hx_tmp6 = (indicesToSkip->indexOf(i3,null()) == -1);
            						}
            						else {
HXLINE(1055)							_hx_tmp6 = true;
            						}
HXDLIN(1055)						if (_hx_tmp6) {
HXLINE(1056)							result = i3;
HXLINE(1057)							goto _hx_goto_54;
            						}
HXLINE(1059)						i3 = (i3 - 1);
            					}
            					_hx_goto_54:;
            				}
            				break;
            				case (int)36: {
HXLINE(1046)					int _g4 = 0;
HXDLIN(1046)					int _g5 = startIndex;
HXDLIN(1046)					while((_g4 < _g5)){
HXLINE(1046)						_g4 = (_g4 + 1);
HXDLIN(1046)						int i4 = (_g4 - 1);
HXLINE(1047)						bool _hx_tmp7;
HXDLIN(1047)						if (::hx::IsNotNull( indicesToSkip )) {
HXLINE(1047)							_hx_tmp7 = (indicesToSkip->indexOf(i4,null()) == -1);
            						}
            						else {
HXLINE(1047)							_hx_tmp7 = true;
            						}
HXDLIN(1047)						if (_hx_tmp7) {
HXLINE(1048)							result = i4;
HXLINE(1049)							goto _hx_goto_55;
            						}
            					}
            					_hx_goto_55:;
            				}
            				break;
            				case (int)38: {
HXLINE( 985)					result = (result - 1);
            				}
            				break;
            				case (int)40: {
HXLINE( 987)					result = (result + 1);
            				}
            				break;
            				default:{
HXLINE(1063)					return startIndex;
            				}
            			}
HXLINE(1065)			if ((result < 0)) {
HXLINE(1066)				if (wrapArrowKeys) {
HXLINE(1067)					result = maxIndex;
            				}
            				else {
HXLINE(1069)					result = 0;
            				}
            			}
            			else {
HXLINE(1071)				if ((result > maxIndex)) {
HXLINE(1072)					if (wrapArrowKeys) {
HXLINE(1073)						result = 0;
            					}
            					else {
HXLINE(1075)						result = maxIndex;
            					}
            				}
            			}
HXLINE(1078)			bool _hx_tmp8;
HXDLIN(1078)			if (::hx::IsNotNull( indicesToSkip )) {
HXLINE(1078)				_hx_tmp8 = (indicesToSkip->indexOf(result,null()) != -1);
            			}
            			else {
HXLINE(1078)				_hx_tmp8 = false;
            			}
HXDLIN(1078)			if (_hx_tmp8) {
HXLINE(1080)				if ((result == lastResult)) {
HXLINE(1083)					return startIndex;
            				}
HXLINE(1085)				needsAnotherPass = true;
            			}
HXLINE(1087)			lastResult = result;
            		}
HXLINE(1089)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC7(VerticalListLayout_obj,findNextKeyboardIndex,return )

void VerticalListLayout_obj::applyVerticalAlign(::Array< ::Dynamic> items,Float contentHeight,Float viewPortHeight){
            	HX_GC_STACKFRAME(&_hx_pos_19102b100d84e010_1092_applyVerticalAlign)
HXLINE(1093)		Float alignOffset = ((Float)0.0);
HXLINE(1094)		Float gapOffset = ((Float)0.0);
HXLINE(1095)		Float maxAlignmentHeight = ((viewPortHeight - this->_paddingTop) - this->_paddingBottom);
HXLINE(1096)		Float adjustedGap = this->_gap;
HXLINE(1097)		bool hasFlexGap = (this->_gap == ::hx::DivByZero(((Float)1.0)));
HXLINE(1098)		if (hasFlexGap) {
HXLINE(1099)			adjustedGap = this->_minGap;
HXLINE(1100)			bool _hx_tmp;
HXDLIN(1100)			if ((items->length > 1)) {
HXLINE(1100)				_hx_tmp = (maxAlignmentHeight > contentHeight);
            			}
            			else {
HXLINE(1100)				_hx_tmp = false;
            			}
HXDLIN(1100)			if (_hx_tmp) {
HXLINE(1101)				adjustedGap = (adjustedGap + ((maxAlignmentHeight - contentHeight) / ( (Float)((items->length - 1)) )));
            			}
HXLINE(1103)			gapOffset = (adjustedGap - this->_minGap);
            		}
            		else {
HXLINE(1105)			switch((int)(this->_verticalAlign->_hx_getIndex())){
            				case (int)0: {
HXLINE(1106)					alignOffset = ((Float)0.0);
            				}
            				break;
            				case (int)1: {
HXLINE(1108)					alignOffset = ((maxAlignmentHeight - contentHeight) / ((Float)2.0));
            				}
            				break;
            				case (int)2: {
HXLINE(1107)					alignOffset = (maxAlignmentHeight - contentHeight);
            				}
            				break;
            				default:{
HXLINE(1110)					HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Unknown vertical align: ",77,68,f9,89) + ::Std_obj::string(this->_verticalAlign))));
            				}
            			}
HXLINE(1112)			if ((alignOffset < ((Float)0.0))) {
HXLINE(1113)				alignOffset = ((Float)0.0);
            			}
            		}
HXLINE(1116)		bool _hx_tmp1;
HXDLIN(1116)		if ((alignOffset == ((Float)0.0))) {
HXLINE(1116)			_hx_tmp1 = (gapOffset == ((Float)0.0));
            		}
            		else {
HXLINE(1116)			_hx_tmp1 = false;
            		}
HXDLIN(1116)		if (_hx_tmp1) {
HXLINE(1117)			return;
            		}
HXLINE(1120)		Float totalOffset = alignOffset;
HXLINE(1121)		{
HXLINE(1121)			int _g = 0;
HXDLIN(1121)			while((_g < items->length)){
HXLINE(1121)				 ::openfl::display::DisplayObject item = items->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1121)				_g = (_g + 1);
HXLINE(1122)				::Dynamic layoutObject = null();
HXLINE(1123)				if (::Std_obj::isOfType(item,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE(1124)					layoutObject =  ::hx::interface_check(item,0xf54ca718);
HXLINE(1125)					if (!(::feathers::layout::ILayoutObject_obj::get_includeInLayout(layoutObject))) {
HXLINE(1126)						continue;
            					}
            				}
HXLINE(1129)				if (::hx::IsNotNull( item )) {
HXLINE(1130)					Float _hx_tmp2 = this->_paddingTop;
HXDLIN(1130)					item->set_y(::Math_obj::max(_hx_tmp2,(item->get_y() + totalOffset)));
            				}
HXLINE(1132)				totalOffset = (totalOffset + gapOffset);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(VerticalListLayout_obj,applyVerticalAlign,(void))


::hx::ObjectPtr< VerticalListLayout_obj > VerticalListLayout_obj::__new() {
	::hx::ObjectPtr< VerticalListLayout_obj > __this = new VerticalListLayout_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< VerticalListLayout_obj > VerticalListLayout_obj::__alloc(::hx::Ctx *_hx_ctx) {
	VerticalListLayout_obj *__this = (VerticalListLayout_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VerticalListLayout_obj), true, "feathers.layout.VerticalListLayout"));
	*(void **)__this = VerticalListLayout_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VerticalListLayout_obj::VerticalListLayout_obj()
{
}

void VerticalListLayout_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VerticalListLayout);
	HX_MARK_MEMBER_NAME(_scrollX,"_scrollX");
	HX_MARK_MEMBER_NAME(_scrollY,"_scrollY");
	HX_MARK_MEMBER_NAME(_virtualCache,"_virtualCache");
	HX_MARK_MEMBER_NAME(_requestedRowCount,"_requestedRowCount");
	HX_MARK_MEMBER_NAME(_requestedMinRowCount,"_requestedMinRowCount");
	HX_MARK_MEMBER_NAME(_requestedMaxRowCount,"_requestedMaxRowCount");
	HX_MARK_MEMBER_NAME(_paddingTop,"_paddingTop");
	HX_MARK_MEMBER_NAME(_paddingRight,"_paddingRight");
	HX_MARK_MEMBER_NAME(_paddingBottom,"_paddingBottom");
	HX_MARK_MEMBER_NAME(_paddingLeft,"_paddingLeft");
	HX_MARK_MEMBER_NAME(_gap,"_gap");
	HX_MARK_MEMBER_NAME(_minGap,"_minGap");
	HX_MARK_MEMBER_NAME(_verticalAlign,"_verticalAlign");
	HX_MARK_MEMBER_NAME(_contentJustify,"_contentJustify");
	HX_MARK_MEMBER_NAME(_widthResetEnabled,"_widthResetEnabled");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VerticalListLayout_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_scrollX,"_scrollX");
	HX_VISIT_MEMBER_NAME(_scrollY,"_scrollY");
	HX_VISIT_MEMBER_NAME(_virtualCache,"_virtualCache");
	HX_VISIT_MEMBER_NAME(_requestedRowCount,"_requestedRowCount");
	HX_VISIT_MEMBER_NAME(_requestedMinRowCount,"_requestedMinRowCount");
	HX_VISIT_MEMBER_NAME(_requestedMaxRowCount,"_requestedMaxRowCount");
	HX_VISIT_MEMBER_NAME(_paddingTop,"_paddingTop");
	HX_VISIT_MEMBER_NAME(_paddingRight,"_paddingRight");
	HX_VISIT_MEMBER_NAME(_paddingBottom,"_paddingBottom");
	HX_VISIT_MEMBER_NAME(_paddingLeft,"_paddingLeft");
	HX_VISIT_MEMBER_NAME(_gap,"_gap");
	HX_VISIT_MEMBER_NAME(_minGap,"_minGap");
	HX_VISIT_MEMBER_NAME(_verticalAlign,"_verticalAlign");
	HX_VISIT_MEMBER_NAME(_contentJustify,"_contentJustify");
	HX_VISIT_MEMBER_NAME(_widthResetEnabled,"_widthResetEnabled");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val VerticalListLayout_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_gap() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_gap") ) { return ::hx::Val( _gap ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"minGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_minGap() ); }
		if (HX_FIELD_EQ(inName,"layout") ) { return ::hx::Val( layout_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollX() ); }
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollY() ); }
		if (HX_FIELD_EQ(inName,"get_gap") ) { return ::hx::Val( get_gap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gap") ) { return ::hx::Val( set_gap_dyn() ); }
		if (HX_FIELD_EQ(inName,"_minGap") ) { return ::hx::Val( _minGap ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_scrollX") ) { return ::hx::Val( _scrollX ); }
		if (HX_FIELD_EQ(inName,"_scrollY") ) { return ::hx::Val( _scrollY ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"elasticTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_elasticTop() ); }
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingTop() ); }
		if (HX_FIELD_EQ(inName,"get_minGap") ) { return ::hx::Val( get_minGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_minGap") ) { return ::hx::Val( set_minGap_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPadding") ) { return ::hx::Val( setPadding_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_scrollX") ) { return ::hx::Val( get_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollX") ) { return ::hx::Val( set_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollY") ) { return ::hx::Val( get_scrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollY") ) { return ::hx::Val( set_scrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"elasticLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_elasticLeft() ); }
		if (HX_FIELD_EQ(inName,"_paddingTop") ) { return ::hx::Val( _paddingTop ); }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingLeft() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"virtualCache") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_virtualCache() ); }
		if (HX_FIELD_EQ(inName,"elasticRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_elasticRight() ); }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingRight() ); }
		if (HX_FIELD_EQ(inName,"_paddingLeft") ) { return ::hx::Val( _paddingLeft ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_virtualCache") ) { return ::hx::Val( _virtualCache ); }
		if (HX_FIELD_EQ(inName,"elasticBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_elasticBottom() ); }
		if (HX_FIELD_EQ(inName,"_paddingRight") ) { return ::hx::Val( _paddingRight ); }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_paddingBottom() ); }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_verticalAlign() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_elasticTop") ) { return ::hx::Val( get_elasticTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_paddingTop") ) { return ::hx::Val( get_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingTop") ) { return ::hx::Val( set_paddingTop_dyn() ); }
		if (HX_FIELD_EQ(inName,"_paddingBottom") ) { return ::hx::Val( _paddingBottom ); }
		if (HX_FIELD_EQ(inName,"_verticalAlign") ) { return ::hx::Val( _verticalAlign ); }
		if (HX_FIELD_EQ(inName,"contentJustify") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_contentJustify() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_elasticLeft") ) { return ::hx::Val( get_elasticLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_paddingLeft") ) { return ::hx::Val( get_paddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingLeft") ) { return ::hx::Val( set_paddingLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"_contentJustify") ) { return ::hx::Val( _contentJustify ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_virtualCache") ) { return ::hx::Val( get_virtualCache_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_virtualCache") ) { return ::hx::Val( set_virtualCache_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_elasticRight") ) { return ::hx::Val( get_elasticRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_paddingRight") ) { return ::hx::Val( get_paddingRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingRight") ) { return ::hx::Val( set_paddingRight_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_elasticBottom") ) { return ::hx::Val( get_elasticBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"requestedRowCount") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_requestedRowCount() ); }
		if (HX_FIELD_EQ(inName,"get_paddingBottom") ) { return ::hx::Val( get_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_paddingBottom") ) { return ::hx::Val( set_paddingBottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_verticalAlign") ) { return ::hx::Val( get_verticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_verticalAlign") ) { return ::hx::Val( set_verticalAlign_dyn() ); }
		if (HX_FIELD_EQ(inName,"widthResetEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_widthResetEnabled() ); }
		if (HX_FIELD_EQ(inName,"getVisibleIndices") ) { return ::hx::Val( getVisibleIndices_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_requestedRowCount") ) { return ::hx::Val( _requestedRowCount ); }
		if (HX_FIELD_EQ(inName,"get_contentJustify") ) { return ::hx::Val( get_contentJustify_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_contentJustify") ) { return ::hx::Val( set_contentJustify_dyn() ); }
		if (HX_FIELD_EQ(inName,"_widthResetEnabled") ) { return ::hx::Val( _widthResetEnabled ); }
		if (HX_FIELD_EQ(inName,"applyVerticalAlign") ) { return ::hx::Val( applyVerticalAlign_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"requestedMinRowCount") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_requestedMinRowCount() ); }
		if (HX_FIELD_EQ(inName,"requestedMaxRowCount") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_requestedMaxRowCount() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_requestedRowCount") ) { return ::hx::Val( get_requestedRowCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_requestedRowCount") ) { return ::hx::Val( set_requestedRowCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"_requestedMinRowCount") ) { return ::hx::Val( _requestedMinRowCount ); }
		if (HX_FIELD_EQ(inName,"_requestedMaxRowCount") ) { return ::hx::Val( _requestedMaxRowCount ); }
		if (HX_FIELD_EQ(inName,"get_widthResetEnabled") ) { return ::hx::Val( get_widthResetEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_widthResetEnabled") ) { return ::hx::Val( set_widthResetEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"calculateMaxItemWidth") ) { return ::hx::Val( calculateMaxItemWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"findNextKeyboardIndex") ) { return ::hx::Val( findNextKeyboardIndex_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"calculateViewPortWidth") ) { return ::hx::Val( calculateViewPortWidth_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"get_requestedMinRowCount") ) { return ::hx::Val( get_requestedMinRowCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_requestedMinRowCount") ) { return ::hx::Val( set_requestedMinRowCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_requestedMaxRowCount") ) { return ::hx::Val( get_requestedMaxRowCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_requestedMaxRowCount") ) { return ::hx::Val( set_requestedMaxRowCount_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"calculateVirtualRowHeight") ) { return ::hx::Val( calculateVirtualRowHeight_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"getNearestScrollPositionForIndex") ) { return ::hx::Val( getNearestScrollPositionForIndex_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VerticalListLayout_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"gap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_gap(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_gap") ) { _gap=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"minGap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_minGap(inValue.Cast< Float >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_minGap") ) { _minGap=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_scrollX") ) { _scrollX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollY") ) { _scrollY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"paddingTop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingTop(inValue.Cast< Float >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_paddingTop") ) { _paddingTop=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingLeft") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingLeft(inValue.Cast< Float >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"virtualCache") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_virtualCache(inValue.Cast< ::cpp::VirtualArray >()) ); }
		if (HX_FIELD_EQ(inName,"paddingRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingRight(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_paddingLeft") ) { _paddingLeft=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_virtualCache") ) { _virtualCache=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_paddingRight") ) { _paddingRight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paddingBottom") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_paddingBottom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"verticalAlign") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_verticalAlign(inValue.Cast<  ::feathers::layout::VerticalAlign >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_paddingBottom") ) { _paddingBottom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_verticalAlign") ) { _verticalAlign=inValue.Cast<  ::feathers::layout::VerticalAlign >(); return inValue; }
		if (HX_FIELD_EQ(inName,"contentJustify") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_contentJustify(inValue.Cast< bool >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_contentJustify") ) { _contentJustify=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"requestedRowCount") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_requestedRowCount(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"widthResetEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_widthResetEnabled(inValue.Cast< bool >()) ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_requestedRowCount") ) { _requestedRowCount=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_widthResetEnabled") ) { _widthResetEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"requestedMinRowCount") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_requestedMinRowCount(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"requestedMaxRowCount") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_requestedMaxRowCount(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_requestedMinRowCount") ) { _requestedMinRowCount=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_requestedMaxRowCount") ) { _requestedMaxRowCount=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VerticalListLayout_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_scrollX",2c,8d,90,6a));
	outFields->push(HX_("scrollX",ab,33,d8,30));
	outFields->push(HX_("_scrollY",2d,8d,90,6a));
	outFields->push(HX_("scrollY",ac,33,d8,30));
	outFields->push(HX_("_virtualCache",16,37,ef,2a));
	outFields->push(HX_("virtualCache",37,a4,80,48));
	outFields->push(HX_("elasticTop",c0,2f,a4,4d));
	outFields->push(HX_("elasticRight",c7,b5,14,f8));
	outFields->push(HX_("elasticBottom",a0,ea,5c,31));
	outFields->push(HX_("elasticLeft",7c,44,b4,9c));
	outFields->push(HX_("_requestedRowCount",a4,5c,58,f8));
	outFields->push(HX_("requestedRowCount",e3,b7,42,25));
	outFields->push(HX_("_requestedMinRowCount",18,17,98,fb));
	outFields->push(HX_("requestedMinRowCount",39,0d,fd,8c));
	outFields->push(HX_("_requestedMaxRowCount",2a,72,b2,36));
	outFields->push(HX_("requestedMaxRowCount",4b,68,17,c8));
	outFields->push(HX_("_paddingTop",63,ca,8f,0c));
	outFields->push(HX_("paddingTop",44,fd,05,3a));
	outFields->push(HX_("_paddingRight",2a,7f,16,fd));
	outFields->push(HX_("paddingRight",4b,ec,a7,1a));
	outFields->push(HX_("_paddingBottom",dd,57,eb,8d));
	outFields->push(HX_("paddingBottom",9c,67,99,4f));
	outFields->push(HX_("_paddingLeft",79,f8,ef,eb));
	outFields->push(HX_("paddingLeft",78,4a,e6,85));
	outFields->push(HX_("_gap",17,c2,19,3f));
	outFields->push(HX_("gap",16,7d,4e,00));
	outFields->push(HX_("_minGap",43,fc,5b,c1));
	outFields->push(HX_("minGap",a4,ea,e4,52));
	outFields->push(HX_("_verticalAlign",b0,0e,ce,22));
	outFields->push(HX_("verticalAlign",6f,1e,7c,e4));
	outFields->push(HX_("_contentJustify",b6,cb,e6,32));
	outFields->push(HX_("contentJustify",17,83,86,e9));
	outFields->push(HX_("_widthResetEnabled",59,e2,55,dc));
	outFields->push(HX_("widthResetEnabled",98,3d,40,09));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VerticalListLayout_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,_scrollX),HX_("_scrollX",2c,8d,90,6a)},
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,_scrollY),HX_("_scrollY",2d,8d,90,6a)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(VerticalListLayout_obj,_virtualCache),HX_("_virtualCache",16,37,ef,2a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(VerticalListLayout_obj,_requestedRowCount),HX_("_requestedRowCount",a4,5c,58,f8)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(VerticalListLayout_obj,_requestedMinRowCount),HX_("_requestedMinRowCount",18,17,98,fb)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(VerticalListLayout_obj,_requestedMaxRowCount),HX_("_requestedMaxRowCount",2a,72,b2,36)},
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,_paddingTop),HX_("_paddingTop",63,ca,8f,0c)},
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,_paddingRight),HX_("_paddingRight",2a,7f,16,fd)},
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,_paddingBottom),HX_("_paddingBottom",dd,57,eb,8d)},
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,_paddingLeft),HX_("_paddingLeft",79,f8,ef,eb)},
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,_gap),HX_("_gap",17,c2,19,3f)},
	{::hx::fsFloat,(int)offsetof(VerticalListLayout_obj,_minGap),HX_("_minGap",43,fc,5b,c1)},
	{::hx::fsObject /*  ::feathers::layout::VerticalAlign */ ,(int)offsetof(VerticalListLayout_obj,_verticalAlign),HX_("_verticalAlign",b0,0e,ce,22)},
	{::hx::fsBool,(int)offsetof(VerticalListLayout_obj,_contentJustify),HX_("_contentJustify",b6,cb,e6,32)},
	{::hx::fsBool,(int)offsetof(VerticalListLayout_obj,_widthResetEnabled),HX_("_widthResetEnabled",59,e2,55,dc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VerticalListLayout_obj_sStaticStorageInfo = 0;
#endif

static ::String VerticalListLayout_obj_sMemberFields[] = {
	HX_("_scrollX",2c,8d,90,6a),
	HX_("get_scrollX",c2,93,d2,b6),
	HX_("set_scrollX",ce,9a,3f,c1),
	HX_("_scrollY",2d,8d,90,6a),
	HX_("get_scrollY",c3,93,d2,b6),
	HX_("set_scrollY",cf,9a,3f,c1),
	HX_("_virtualCache",16,37,ef,2a),
	HX_("get_virtualCache",c0,90,1f,4d),
	HX_("set_virtualCache",34,7e,61,a3),
	HX_("get_elasticTop",09,b8,99,c3),
	HX_("get_elasticRight",50,a2,b3,fc),
	HX_("get_elasticBottom",f7,f5,cc,37),
	HX_("get_elasticLeft",13,fc,95,5d),
	HX_("_requestedRowCount",a4,5c,58,f8),
	HX_("get_requestedRowCount",ba,ba,f0,a3),
	HX_("set_requestedRowCount",c6,88,f9,f7),
	HX_("_requestedMinRowCount",18,17,98,fb),
	HX_("get_requestedMinRowCount",c2,2a,99,cf),
	HX_("set_requestedMinRowCount",36,ac,73,e2),
	HX_("_requestedMaxRowCount",2a,72,b2,36),
	HX_("get_requestedMaxRowCount",d4,85,b3,0a),
	HX_("set_requestedMaxRowCount",48,07,8e,1d),
	HX_("_paddingTop",63,ca,8f,0c),
	HX_("get_paddingTop",8d,85,fb,af),
	HX_("set_paddingTop",01,6e,1b,d0),
	HX_("_paddingRight",2a,7f,16,fd),
	HX_("get_paddingRight",d4,d8,46,1f),
	HX_("set_paddingRight",48,c6,88,75),
	HX_("_paddingBottom",dd,57,eb,8d),
	HX_("get_paddingBottom",f3,72,09,56),
	HX_("set_paddingBottom",ff,4a,77,79),
	HX_("_paddingLeft",79,f8,ef,eb),
	HX_("get_paddingLeft",0f,02,c8,46),
	HX_("set_paddingLeft",1b,7f,93,42),
	HX_("_gap",17,c2,19,3f),
	HX_("get_gap",ad,45,c3,26),
	HX_("set_gap",b9,d6,c4,19),
	HX_("_minGap",43,fc,5b,c1),
	HX_("get_minGap",6d,5a,6c,43),
	HX_("set_minGap",e1,f8,e9,46),
	HX_("_verticalAlign",b0,0e,ce,22),
	HX_("get_verticalAlign",c6,29,ec,ea),
	HX_("set_verticalAlign",d2,01,5a,0e),
	HX_("_contentJustify",b6,cb,e6,32),
	HX_("get_contentJustify",e0,63,20,85),
	HX_("set_contentJustify",54,96,cf,61),
	HX_("_widthResetEnabled",59,e2,55,dc),
	HX_("get_widthResetEnabled",6f,40,ee,87),
	HX_("set_widthResetEnabled",7b,0e,f7,db),
	HX_("setPadding",4f,7e,5c,23),
	HX_("layout",aa,ae,b8,58),
	HX_("calculateMaxItemWidth",35,df,0b,7a),
	HX_("calculateViewPortWidth",5a,da,4c,6f),
	HX_("calculateVirtualRowHeight",9c,b3,50,4b),
	HX_("getVisibleIndices",0b,78,6a,0a),
	HX_("getNearestScrollPositionForIndex",c7,8f,9f,e2),
	HX_("findNextKeyboardIndex",7f,9f,d9,86),
	HX_("applyVerticalAlign",21,9c,1b,72),
	::String(null()) };

::hx::Class VerticalListLayout_obj::__mClass;

void VerticalListLayout_obj::__register()
{
	VerticalListLayout_obj _hx_dummy;
	VerticalListLayout_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.layout.VerticalListLayout",24,c4,25,5f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VerticalListLayout_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VerticalListLayout_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VerticalListLayout_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VerticalListLayout_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace layout
