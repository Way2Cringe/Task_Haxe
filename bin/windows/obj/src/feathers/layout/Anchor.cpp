// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_feathers_events_FeathersEvent
#include <feathers/events/FeathersEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_Anchor
#include <feathers/layout/Anchor.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b24ce3bed0f2538b_391_new,"feathers.layout.Anchor","new",0x98379e4d,"feathers.layout.Anchor.new","feathers/layout/AnchorLayout.hx",391,0x3c8824d9)
HX_LOCAL_STACK_FRAME(_hx_pos_b24ce3bed0f2538b_409_get_value,"feathers.layout.Anchor","get_value",0xc8fc5975,"feathers.layout.Anchor.get_value","feathers/layout/AnchorLayout.hx",409,0x3c8824d9)
HX_LOCAL_STACK_FRAME(_hx_pos_b24ce3bed0f2538b_412_set_value,"feathers.layout.Anchor","set_value",0xac4d4581,"feathers.layout.Anchor.set_value","feathers/layout/AnchorLayout.hx",412,0x3c8824d9)
HX_LOCAL_STACK_FRAME(_hx_pos_b24ce3bed0f2538b_433_get_relativeTo,"feathers.layout.Anchor","get_relativeTo",0x7e0a28e3,"feathers.layout.Anchor.get_relativeTo","feathers/layout/AnchorLayout.hx",433,0x3c8824d9)
HX_LOCAL_STACK_FRAME(_hx_pos_b24ce3bed0f2538b_436_set_relativeTo,"feathers.layout.Anchor","set_relativeTo",0x9e2a1157,"feathers.layout.Anchor.set_relativeTo","feathers/layout/AnchorLayout.hx",436,0x3c8824d9)
namespace feathers{
namespace layout{

void Anchor_obj::__construct(Float value, ::openfl::display::DisplayObject relativeTo){
            	HX_STACKFRAME(&_hx_pos_b24ce3bed0f2538b_391_new)
HXLINE( 392)		super::__construct(null());
HXLINE( 393)		this->_value = value;
HXLINE( 394)		this->_relativeTo = relativeTo;
            	}

Dynamic Anchor_obj::__CreateEmpty() { return new Anchor_obj; }

void *Anchor_obj::_hx_vtable = 0;

Dynamic Anchor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Anchor_obj > _hx_result = new Anchor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Anchor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x3447846f;
	}
}

Float Anchor_obj::get_value(){
            	HX_STACKFRAME(&_hx_pos_b24ce3bed0f2538b_409_get_value)
HXDLIN( 409)		return this->_value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Anchor_obj,get_value,return )

Float Anchor_obj::set_value(Float newValue){
            	HX_STACKFRAME(&_hx_pos_b24ce3bed0f2538b_412_set_value)
HXLINE( 413)		if ((this->_value == newValue)) {
HXLINE( 414)			return this->_value;
            		}
HXLINE( 416)		this->_value = newValue;
HXLINE( 417)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 418)		return this->_value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Anchor_obj,set_value,return )

 ::openfl::display::DisplayObject Anchor_obj::get_relativeTo(){
            	HX_STACKFRAME(&_hx_pos_b24ce3bed0f2538b_433_get_relativeTo)
HXDLIN( 433)		return this->_relativeTo;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Anchor_obj,get_relativeTo,return )

 ::openfl::display::DisplayObject Anchor_obj::set_relativeTo( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_b24ce3bed0f2538b_436_set_relativeTo)
HXLINE( 437)		if (::hx::IsInstanceEq( this->_relativeTo,value )) {
HXLINE( 438)			return this->_relativeTo;
            		}
HXLINE( 440)		this->_relativeTo = value;
HXLINE( 441)		::feathers::events::FeathersEvent_obj::dispatch(::hx::ObjectPtr<OBJ_>(this),HX_("change",70,91,72,b7),null(),null());
HXLINE( 442)		return this->_relativeTo;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Anchor_obj,set_relativeTo,return )


::hx::ObjectPtr< Anchor_obj > Anchor_obj::__new(Float value, ::openfl::display::DisplayObject relativeTo) {
	::hx::ObjectPtr< Anchor_obj > __this = new Anchor_obj();
	__this->__construct(value,relativeTo);
	return __this;
}

::hx::ObjectPtr< Anchor_obj > Anchor_obj::__alloc(::hx::Ctx *_hx_ctx,Float value, ::openfl::display::DisplayObject relativeTo) {
	Anchor_obj *__this = (Anchor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Anchor_obj), true, "feathers.layout.Anchor"));
	*(void **)__this = Anchor_obj::_hx_vtable;
	__this->__construct(value,relativeTo);
	return __this;
}

Anchor_obj::Anchor_obj()
{
}

void Anchor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Anchor);
	HX_MARK_MEMBER_NAME(_value,"_value");
	HX_MARK_MEMBER_NAME(_relativeTo,"_relativeTo");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Anchor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_value,"_value");
	HX_VISIT_MEMBER_NAME(_relativeTo,"_relativeTo");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Anchor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_value() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_value") ) { return ::hx::Val( _value ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_value") ) { return ::hx::Val( get_value_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_value") ) { return ::hx::Val( set_value_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"relativeTo") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_relativeTo() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_relativeTo") ) { return ::hx::Val( _relativeTo ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_relativeTo") ) { return ::hx::Val( get_relativeTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_relativeTo") ) { return ::hx::Val( set_relativeTo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Anchor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_value(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_value") ) { _value=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"relativeTo") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_relativeTo(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_relativeTo") ) { _relativeTo=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Anchor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_value",b2,c6,9f,2d));
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("_relativeTo",86,9e,a0,b4));
	outFields->push(HX_("relativeTo",67,d1,16,e2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Anchor_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Anchor_obj,_value),HX_("_value",b2,c6,9f,2d)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(Anchor_obj,_relativeTo),HX_("_relativeTo",86,9e,a0,b4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Anchor_obj_sStaticStorageInfo = 0;
#endif

static ::String Anchor_obj_sMemberFields[] = {
	HX_("_value",b2,c6,9f,2d),
	HX_("get_value",c8,db,61,75),
	HX_("set_value",d4,c7,b2,58),
	HX_("_relativeTo",86,9e,a0,b4),
	HX_("get_relativeTo",b0,59,0c,58),
	HX_("set_relativeTo",24,42,2c,78),
	::String(null()) };

::hx::Class Anchor_obj::__mClass;

void Anchor_obj::__register()
{
	Anchor_obj _hx_dummy;
	Anchor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.layout.Anchor",db,73,85,a5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Anchor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Anchor_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Anchor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Anchor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace layout
