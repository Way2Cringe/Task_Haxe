// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_BaseDividedBox
#include <feathers/controls/supportClasses/BaseDividedBox.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_InvalidationFlag
#include <feathers/core/InvalidationFlag.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_layout_AutoSizeMode
#include <feathers/layout/AutoSizeMode.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayout
#include <feathers/layout/ILayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_LayoutBoundsResult
#include <feathers/layout/LayoutBoundsResult.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_skins_IProgrammaticSkin
#include <feathers/skins/IProgrammaticSkin.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_utils_DisplayObjectFactory
#include <feathers/utils/DisplayObjectFactory.h>
#endif
#ifndef INCLUDED_feathers_utils_ExclusivePointer
#include <feathers/utils/ExclusivePointer.h>
#endif
#ifndef INCLUDED_feathers_utils_MeasurementsUtil
#include <feathers/utils/MeasurementsUtil.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_errors_TypeError
#include <openfl/errors/TypeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_ui_Mouse
#include <openfl/ui/Mouse.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_49_new,"feathers.controls.supportClasses.BaseDividedBox","new",0x49e90b80,"feathers.controls.supportClasses.BaseDividedBox.new","feathers/controls/supportClasses/BaseDividedBox.hx",49,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_87_get_autoSizeMode,"feathers.controls.supportClasses.BaseDividedBox","get_autoSizeMode",0x0d4af4bc,"feathers.controls.supportClasses.BaseDividedBox.get_autoSizeMode","feathers/controls/supportClasses/BaseDividedBox.hx",87,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_90_set_autoSizeMode,"feathers.controls.supportClasses.BaseDividedBox","set_autoSizeMode",0x638ce230,"feathers.controls.supportClasses.BaseDividedBox.set_autoSizeMode","feathers/controls/supportClasses/BaseDividedBox.hx",90,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_208_get_dividerFactory,"feathers.controls.supportClasses.BaseDividedBox","get_dividerFactory",0x7638109a,"feathers.controls.supportClasses.BaseDividedBox.get_dividerFactory","feathers/controls/supportClasses/BaseDividedBox.hx",208,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_212_set_dividerFactory,"feathers.controls.supportClasses.BaseDividedBox","set_dividerFactory",0x52e7430e,"feathers.controls.supportClasses.BaseDividedBox.set_dividerFactory","feathers/controls/supportClasses/BaseDividedBox.hx",212,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_254_get_xmlContent,"feathers.controls.supportClasses.BaseDividedBox","get_xmlContent",0xec74a14b,"feathers.controls.supportClasses.BaseDividedBox.get_xmlContent","feathers/controls/supportClasses/BaseDividedBox.hx",254,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_257_set_xmlContent,"feathers.controls.supportClasses.BaseDividedBox","set_xmlContent",0x0c9489bf,"feathers.controls.supportClasses.BaseDividedBox.set_xmlContent","feathers/controls/supportClasses/BaseDividedBox.hx",257,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_278_get_numRawChildren,"feathers.controls.supportClasses.BaseDividedBox","get_numRawChildren",0x62e2704a,"feathers.controls.supportClasses.BaseDividedBox.get_numRawChildren","feathers/controls/supportClasses/BaseDividedBox.hx",278,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_286_get_numChildren,"feathers.controls.supportClasses.BaseDividedBox","get_numChildren",0x07738c5c,"feathers.controls.supportClasses.BaseDividedBox.get_numChildren","feathers/controls/supportClasses/BaseDividedBox.hx",286,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_293_addChild,"feathers.controls.supportClasses.BaseDividedBox","addChild",0x7317409b,"feathers.controls.supportClasses.BaseDividedBox.addChild","feathers/controls/supportClasses/BaseDividedBox.hx",293,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_300_addChildAt,"feathers.controls.supportClasses.BaseDividedBox","addChildAt",0xd7dd166e,"feathers.controls.supportClasses.BaseDividedBox.addChildAt","feathers/controls/supportClasses/BaseDividedBox.hx",300,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_321_removeChild,"feathers.controls.supportClasses.BaseDividedBox","removeChild",0xabe2e1d8,"feathers.controls.supportClasses.BaseDividedBox.removeChild","feathers/controls/supportClasses/BaseDividedBox.hx",321,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_336_removeChildAt,"feathers.controls.supportClasses.BaseDividedBox","removeChildAt",0x93c140eb,"feathers.controls.supportClasses.BaseDividedBox.removeChildAt","feathers/controls/supportClasses/BaseDividedBox.hx",336,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_343_getChildAt,"feathers.controls.supportClasses.BaseDividedBox","getChildAt",0xbfb47099,"feathers.controls.supportClasses.BaseDividedBox.getChildAt","feathers/controls/supportClasses/BaseDividedBox.hx",343,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_350_getChildIndex,"feathers.controls.supportClasses.BaseDividedBox","getChildIndex",0x0d5ccb2c,"feathers.controls.supportClasses.BaseDividedBox.getChildIndex","feathers/controls/supportClasses/BaseDividedBox.hx",350,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_357_setChildIndex,"feathers.controls.supportClasses.BaseDividedBox","setChildIndex",0x5262ad38,"feathers.controls.supportClasses.BaseDividedBox.setChildIndex","feathers/controls/supportClasses/BaseDividedBox.hx",357,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_365_getChildByName,"feathers.controls.supportClasses.BaseDividedBox","getChildByName",0x1e301268,"feathers.controls.supportClasses.BaseDividedBox.getChildByName","feathers/controls/supportClasses/BaseDividedBox.hx",365,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_377_removeChildren,"feathers.controls.supportClasses.BaseDividedBox","removeChildren",0xb57cae83,"feathers.controls.supportClasses.BaseDividedBox.removeChildren","feathers/controls/supportClasses/BaseDividedBox.hx",377,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_403_addRawChild,"feathers.controls.supportClasses.BaseDividedBox","addRawChild",0x40c96cf5,"feathers.controls.supportClasses.BaseDividedBox.addRawChild","feathers/controls/supportClasses/BaseDividedBox.hx",403,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_411_addRawChildAt,"feathers.controls.supportClasses.BaseDividedBox","addRawChildAt",0x17b68d48,"feathers.controls.supportClasses.BaseDividedBox.addRawChildAt","feathers/controls/supportClasses/BaseDividedBox.hx",411,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_419_removeRawChild,"feathers.controls.supportClasses.BaseDividedBox","removeRawChild",0xec8a6fd8,"feathers.controls.supportClasses.BaseDividedBox.removeRawChild","feathers/controls/supportClasses/BaseDividedBox.hx",419,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_427_removeRawChildAt,"feathers.controls.supportClasses.BaseDividedBox","removeRawChildAt",0xf7e84eeb,"feathers.controls.supportClasses.BaseDividedBox.removeRawChildAt","feathers/controls/supportClasses/BaseDividedBox.hx",427,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_435_getRawChildByName,"feathers.controls.supportClasses.BaseDividedBox","getRawChildByName",0xc330c3cc,"feathers.controls.supportClasses.BaseDividedBox.getRawChildByName","feathers/controls/supportClasses/BaseDividedBox.hx",435,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_443_getRawChildAt,"feathers.controls.supportClasses.BaseDividedBox","getRawChildAt",0x09df9ffd,"feathers.controls.supportClasses.BaseDividedBox.getRawChildAt","feathers/controls/supportClasses/BaseDividedBox.hx",443,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_451_getRawChildIndex,"feathers.controls.supportClasses.BaseDividedBox","getRawChildIndex",0x83325248,"feathers.controls.supportClasses.BaseDividedBox.getRawChildIndex","feathers/controls/supportClasses/BaseDividedBox.hx",451,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_459_setRawChildIndex,"feathers.controls.supportClasses.BaseDividedBox","setRawChildIndex",0xd9743fbc,"feathers.controls.supportClasses.BaseDividedBox.setRawChildIndex","feathers/controls/supportClasses/BaseDividedBox.hx",459,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_466_removeRawChildren,"feathers.controls.supportClasses.BaseDividedBox","removeRawChildren",0xf381e083,"feathers.controls.supportClasses.BaseDividedBox.removeRawChildren","feathers/controls/supportClasses/BaseDividedBox.hx",466,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_473_addItemAt,"feathers.controls.supportClasses.BaseDividedBox","addItemAt",0x8d903107,"feathers.controls.supportClasses.BaseDividedBox.addItemAt","feathers/controls/supportClasses/BaseDividedBox.hx",473,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_487_removeItem,"feathers.controls.supportClasses.BaseDividedBox","removeItem",0xcc856857,"feathers.controls.supportClasses.BaseDividedBox.removeItem","feathers/controls/supportClasses/BaseDividedBox.hx",487,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_500_update,"feathers.controls.supportClasses.BaseDividedBox","update",0xbd4dfee9,"feathers.controls.supportClasses.BaseDividedBox.update","feathers/controls/supportClasses/BaseDividedBox.hx",500,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_521_refreshBackgroundSkin,"feathers.controls.supportClasses.BaseDividedBox","refreshBackgroundSkin",0x25b3bfe6,"feathers.controls.supportClasses.BaseDividedBox.refreshBackgroundSkin","feathers/controls/supportClasses/BaseDividedBox.hx",521,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_531_getCurrentBackgroundSkin,"feathers.controls.supportClasses.BaseDividedBox","getCurrentBackgroundSkin",0x93149c0e,"feathers.controls.supportClasses.BaseDividedBox.getCurrentBackgroundSkin","feathers/controls/supportClasses/BaseDividedBox.hx",531,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_538_addCurrentBackgroundSkin,"feathers.controls.supportClasses.BaseDividedBox","addCurrentBackgroundSkin",0xc48feca3,"feathers.controls.supportClasses.BaseDividedBox.addCurrentBackgroundSkin","feathers/controls/supportClasses/BaseDividedBox.hx",538,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_557_removeCurrentBackgroundSkin,"feathers.controls.supportClasses.BaseDividedBox","removeCurrentBackgroundSkin",0x0e8697e0,"feathers.controls.supportClasses.BaseDividedBox.removeCurrentBackgroundSkin","feathers/controls/supportClasses/BaseDividedBox.hx",557,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_572_refreshResizeDraggingSkin,"feathers.controls.supportClasses.BaseDividedBox","refreshResizeDraggingSkin",0x50917adb,"feathers.controls.supportClasses.BaseDividedBox.refreshResizeDraggingSkin","feathers/controls/supportClasses/BaseDividedBox.hx",572,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_599_getCurrentResizeDraggingSkin,"feathers.controls.supportClasses.BaseDividedBox","getCurrentResizeDraggingSkin",0x1d978b03,"feathers.controls.supportClasses.BaseDividedBox.getCurrentResizeDraggingSkin","feathers/controls/supportClasses/BaseDividedBox.hx",599,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_602_removeCurrentResizeDraggingSkin,"feathers.controls.supportClasses.BaseDividedBox","removeCurrentResizeDraggingSkin",0x2348d7d5,"feathers.controls.supportClasses.BaseDividedBox.removeCurrentResizeDraggingSkin","feathers/controls/supportClasses/BaseDividedBox.hx",602,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_614_createDivider,"feathers.controls.supportClasses.BaseDividedBox","createDivider",0xad74965d,"feathers.controls.supportClasses.BaseDividedBox.createDivider","feathers/controls/supportClasses/BaseDividedBox.hx",614,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_624_destroyDivider,"feathers.controls.supportClasses.BaseDividedBox","destroyDivider",0x57ffa1df,"feathers.controls.supportClasses.BaseDividedBox.destroyDivider","feathers/controls/supportClasses/BaseDividedBox.hx",624,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_634_refreshViewPortBounds,"feathers.controls.supportClasses.BaseDividedBox","refreshViewPortBounds",0xaddaf5f6,"feathers.controls.supportClasses.BaseDividedBox.refreshViewPortBounds","feathers/controls/supportClasses/BaseDividedBox.hx",634,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_717_handleLayout,"feathers.controls.supportClasses.BaseDividedBox","handleLayout",0x359f3552,"feathers.controls.supportClasses.BaseDividedBox.handleLayout","feathers/controls/supportClasses/BaseDividedBox.hx",717,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_725_handleLayoutResult,"feathers.controls.supportClasses.BaseDividedBox","handleLayoutResult",0x376ddbcf,"feathers.controls.supportClasses.BaseDividedBox.handleLayoutResult","feathers/controls/supportClasses/BaseDividedBox.hx",725,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_731_refreshBackgroundLayout,"feathers.controls.supportClasses.BaseDividedBox","refreshBackgroundLayout",0x46234453,"feathers.controls.supportClasses.BaseDividedBox.refreshBackgroundLayout","feathers/controls/supportClasses/BaseDividedBox.hx",731,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_753_validateChildren,"feathers.controls.supportClasses.BaseDividedBox","validateChildren",0x0def7cd5,"feathers.controls.supportClasses.BaseDividedBox.validateChildren","feathers/controls/supportClasses/BaseDividedBox.hx",753,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_761_prepareResize,"feathers.controls.supportClasses.BaseDividedBox","prepareResize",0x231c21fb,"feathers.controls.supportClasses.BaseDividedBox.prepareResize","feathers/controls/supportClasses/BaseDividedBox.hx",761,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_765_commitResize,"feathers.controls.supportClasses.BaseDividedBox","commitResize",0x172b722b,"feathers.controls.supportClasses.BaseDividedBox.commitResize","feathers/controls/supportClasses/BaseDividedBox.hx",765,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_768_resizeTouchBegin,"feathers.controls.supportClasses.BaseDividedBox","resizeTouchBegin",0x3d46f5de,"feathers.controls.supportClasses.BaseDividedBox.resizeTouchBegin","feathers/controls/supportClasses/BaseDividedBox.hx",768,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_800_resizeTouchMove,"feathers.controls.supportClasses.BaseDividedBox","resizeTouchMove",0x547d84fc,"feathers.controls.supportClasses.BaseDividedBox.resizeTouchMove","feathers/controls/supportClasses/BaseDividedBox.hx",800,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_809_resizeTouchEnd,"feathers.controls.supportClasses.BaseDividedBox","resizeTouchEnd",0xcb8c4850,"feathers.controls.supportClasses.BaseDividedBox.resizeTouchEnd","feathers/controls/supportClasses/BaseDividedBox.hx",809,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_841_baseDividedBox_child_resizeHandler,"feathers.controls.supportClasses.BaseDividedBox","baseDividedBox_child_resizeHandler",0x8b73ace5,"feathers.controls.supportClasses.BaseDividedBox.baseDividedBox_child_resizeHandler","feathers/controls/supportClasses/BaseDividedBox.hx",841,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_849_baseDividedBox_addedToStageHandler,"feathers.controls.supportClasses.BaseDividedBox","baseDividedBox_addedToStageHandler",0x3f2bad79,"feathers.controls.supportClasses.BaseDividedBox.baseDividedBox_addedToStageHandler","feathers/controls/supportClasses/BaseDividedBox.hx",849,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_859_baseDividedBox_removedFromStageHandler,"feathers.controls.supportClasses.BaseDividedBox","baseDividedBox_removedFromStageHandler",0xa689ebc8,"feathers.controls.supportClasses.BaseDividedBox.baseDividedBox_removedFromStageHandler","feathers/controls/supportClasses/BaseDividedBox.hx",859,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_865_baseDividedBox_stage_resizeHandler,"feathers.controls.supportClasses.BaseDividedBox","baseDividedBox_stage_resizeHandler",0x52606587,"feathers.controls.supportClasses.BaseDividedBox.baseDividedBox_stage_resizeHandler","feathers/controls/supportClasses/BaseDividedBox.hx",865,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_868_baseDividedBox_divider_rollOverHandler,"feathers.controls.supportClasses.BaseDividedBox","baseDividedBox_divider_rollOverHandler",0xdd597285,"feathers.controls.supportClasses.BaseDividedBox.baseDividedBox_divider_rollOverHandler","feathers/controls/supportClasses/BaseDividedBox.hx",868,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_879_baseDividedBox_divider_rollOutHandler,"feathers.controls.supportClasses.BaseDividedBox","baseDividedBox_divider_rollOutHandler",0x692af60d,"feathers.controls.supportClasses.BaseDividedBox.baseDividedBox_divider_rollOutHandler","feathers/controls/supportClasses/BaseDividedBox.hx",879,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_888_baseDividedBox_divider_mouseDownHandler,"feathers.controls.supportClasses.BaseDividedBox","baseDividedBox_divider_mouseDownHandler",0xc1f589b7,"feathers.controls.supportClasses.BaseDividedBox.baseDividedBox_divider_mouseDownHandler","feathers/controls/supportClasses/BaseDividedBox.hx",888,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_893_baseDividedBox_divider_stage_mouseMoveHandler,"feathers.controls.supportClasses.BaseDividedBox","baseDividedBox_divider_stage_mouseMoveHandler",0x50e667c9,"feathers.controls.supportClasses.BaseDividedBox.baseDividedBox_divider_stage_mouseMoveHandler","feathers/controls/supportClasses/BaseDividedBox.hx",893,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_898_baseDividedBox_divider_stage_mouseUpHandler,"feathers.controls.supportClasses.BaseDividedBox","baseDividedBox_divider_stage_mouseUpHandler",0x9db95dbf,"feathers.controls.supportClasses.BaseDividedBox.baseDividedBox_divider_stage_mouseUpHandler","feathers/controls/supportClasses/BaseDividedBox.hx",898,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_903_baseDividedBox_divider_touchBeginHandler,"feathers.controls.supportClasses.BaseDividedBox","baseDividedBox_divider_touchBeginHandler",0x786a642c,"feathers.controls.supportClasses.BaseDividedBox.baseDividedBox_divider_touchBeginHandler","feathers/controls/supportClasses/BaseDividedBox.hx",903,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_913_baseDividedBox_divider_stage_touchMoveHandler,"feathers.controls.supportClasses.BaseDividedBox","baseDividedBox_divider_stage_touchMoveHandler",0x2c6df86f,"feathers.controls.supportClasses.BaseDividedBox.baseDividedBox_divider_stage_touchMoveHandler","feathers/controls/supportClasses/BaseDividedBox.hx",913,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_917_baseDividedBox_divider_stage_touchEndHandler,"feathers.controls.supportClasses.BaseDividedBox","baseDividedBox_divider_stage_touchEndHandler",0xef79ae39,"feathers.controls.supportClasses.BaseDividedBox.baseDividedBox_divider_stage_touchEndHandler","feathers/controls/supportClasses/BaseDividedBox.hx",917,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ffdce0585e9f6d_85_get_backgroundSkin,"feathers.controls.supportClasses.BaseDividedBox","get_backgroundSkin",0x81938f34,"feathers.controls.supportClasses.BaseDividedBox.get_backgroundSkin","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ffdce0585e9f6d_99_set_backgroundSkin,"feathers.controls.supportClasses.BaseDividedBox","set_backgroundSkin",0x5e42c1a8,"feathers.controls.supportClasses.BaseDividedBox.set_backgroundSkin","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ffdce0585e9f6d_131_clearStyle_backgroundSkin,"feathers.controls.supportClasses.BaseDividedBox","clearStyle_backgroundSkin",0xc3eaed66,"feathers.controls.supportClasses.BaseDividedBox.clearStyle_backgroundSkin","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ffdce0585e9f6d_85_get_disabledBackgroundSkin,"feathers.controls.supportClasses.BaseDividedBox","get_disabledBackgroundSkin",0xe38dd6d0,"feathers.controls.supportClasses.BaseDividedBox.get_disabledBackgroundSkin","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ffdce0585e9f6d_99_set_disabledBackgroundSkin,"feathers.controls.supportClasses.BaseDividedBox","set_disabledBackgroundSkin",0x43229d44,"feathers.controls.supportClasses.BaseDividedBox.set_disabledBackgroundSkin","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ffdce0585e9f6d_131_clearStyle_disabledBackgroundSkin,"feathers.controls.supportClasses.BaseDividedBox","clearStyle_disabledBackgroundSkin",0xac99b702,"feathers.controls.supportClasses.BaseDividedBox.clearStyle_disabledBackgroundSkin","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ffdce0585e9f6d_85_get_resizeDraggingSkin,"feathers.controls.supportClasses.BaseDividedBox","get_resizeDraggingSkin",0x63460929,"feathers.controls.supportClasses.BaseDividedBox.get_resizeDraggingSkin","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ffdce0585e9f6d_99_set_resizeDraggingSkin,"feathers.controls.supportClasses.BaseDividedBox","set_resizeDraggingSkin",0x96f1859d,"feathers.controls.supportClasses.BaseDividedBox.set_resizeDraggingSkin","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_e2ffdce0585e9f6d_131_clearStyle_resizeDraggingSkin,"feathers.controls.supportClasses.BaseDividedBox","clearStyle_resizeDraggingSkin",0x91ad685b,"feathers.controls.supportClasses.BaseDividedBox.clearStyle_resizeDraggingSkin","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_49_boot,"feathers.controls.supportClasses.BaseDividedBox","boot",0x5a1a0512,"feathers.controls.supportClasses.BaseDividedBox.boot","feathers/controls/supportClasses/BaseDividedBox.hx",49,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_51_boot,"feathers.controls.supportClasses.BaseDividedBox","boot",0x5a1a0512,"feathers.controls.supportClasses.BaseDividedBox.boot","feathers/controls/supportClasses/BaseDividedBox.hx",51,0xaebccaaf)
HX_LOCAL_STACK_FRAME(_hx_pos_0b64870ea0f8de5e_181_boot,"feathers.controls.supportClasses.BaseDividedBox","boot",0x5a1a0512,"feathers.controls.supportClasses.BaseDividedBox.boot","feathers/controls/supportClasses/BaseDividedBox.hx",181,0xaebccaaf)
namespace feathers{
namespace controls{
namespace supportClasses{

void BaseDividedBox_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_49_new)
HXLINE( 161)		this->_hx___resizeDraggingSkin = null();
HXLINE( 148)		this->_hx___disabledBackgroundSkin = null();
HXLINE( 128)		this->_hx___backgroundSkin = null();
HXLINE( 247)		this->_xmlContent = null();
HXLINE( 246)		this->layout = null();
HXLINE( 245)		this->_layoutResult =  ::feathers::layout::LayoutBoundsResult_obj::__alloc( HX_CTX );
HXLINE( 244)		this->_layoutMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,null());
HXLINE( 243)		this->_ignoreChildChanges = false;
HXLINE( 242)		this->_displayListBypassEnabled = true;
HXLINE( 241)		this->_layoutItems = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 240)		this->dividers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 239)		this->items = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 179)		this->liveDragging = true;
HXLINE( 109)		this->_backgroundSkinMeasurements = null();
HXLINE( 108)		this->_currentBackgroundSkin = null();
HXLINE(  64)		this->_autoSizeMode = ::feathers::layout::AutoSizeMode_obj::CONTENT_dyn();
HXLINE(  62)		this->_resizingDividerIndex = -1;
HXLINE(  61)		this->_resizingTouchPointIsMouse = false;
HXLINE(  60)		this->_resizingTouchPointID = null();
HXLINE(  54)		super::__construct();
HXLINE(  55)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->baseDividedBox_addedToStageHandler_dyn(),null(),null(),null());
            	}

Dynamic BaseDividedBox_obj::__CreateEmpty() { return new BaseDividedBox_obj; }

void *BaseDividedBox_obj::_hx_vtable = 0;

Dynamic BaseDividedBox_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BaseDividedBox_obj > _hx_result = new BaseDividedBox_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BaseDividedBox_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x28751316) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x28751316;
		}
	} else {
		if (inClassId<=(int)0x58123034) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x4033f4be || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x58123034;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

 ::feathers::layout::AutoSizeMode BaseDividedBox_obj::get_autoSizeMode(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_87_get_autoSizeMode)
HXDLIN(  87)		return this->_autoSizeMode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,get_autoSizeMode,return )

 ::feathers::layout::AutoSizeMode BaseDividedBox_obj::set_autoSizeMode( ::feathers::layout::AutoSizeMode value){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_90_set_autoSizeMode)
HXLINE(  91)		if (::hx::IsPointerEq( this->_autoSizeMode,value )) {
HXLINE(  92)			return this->_autoSizeMode;
            		}
HXLINE(  94)		this->_autoSizeMode = value;
HXLINE(  95)		this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
HXLINE(  96)		if (::hx::IsNotNull( this->stage )) {
HXLINE(  97)			if (::hx::IsPointerEq( this->_autoSizeMode,::feathers::layout::AutoSizeMode_obj::STAGE_dyn() )) {
HXLINE(  98)				this->stage->addEventListener(HX_("resize",f4,59,7b,08),this->baseDividedBox_stage_resizeHandler_dyn(),null(),null(),null());
HXLINE(  99)				this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->baseDividedBox_removedFromStageHandler_dyn(),null(),null(),null());
            			}
            			else {
HXLINE( 101)				this->stage->removeEventListener(HX_("resize",f4,59,7b,08),this->baseDividedBox_stage_resizeHandler_dyn(),null());
HXLINE( 102)				this->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->baseDividedBox_removedFromStageHandler_dyn(),null());
            			}
            		}
HXLINE( 105)		return this->_autoSizeMode;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,set_autoSizeMode,return )

 ::feathers::utils::DisplayObjectFactory BaseDividedBox_obj::get_dividerFactory(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_208_get_dividerFactory)
HXDLIN( 208)		return this->_dividerFactory;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,get_dividerFactory,return )

 ::feathers::utils::DisplayObjectFactory BaseDividedBox_obj::set_dividerFactory( ::feathers::utils::DisplayObjectFactory value){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_212_set_dividerFactory)
HXLINE( 213)		if (::hx::IsInstanceEq( this->_dividerFactory,value )) {
HXLINE( 214)			return this->_dividerFactory;
            		}
HXLINE( 216)		if ((this->items->length > 1)) {
HXLINE( 217)			int _g = 1;
HXDLIN( 217)			int _g1 = this->items->length;
HXDLIN( 217)			while((_g < _g1)){
HXLINE( 217)				_g = (_g + 1);
HXDLIN( 217)				int i = (_g - 1);
HXLINE( 218)				int layoutIndex = (i * 2);
HXLINE( 219)				int childIndex;
HXDLIN( 219)				if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 219)					childIndex = 1;
            				}
            				else {
HXLINE( 219)					childIndex = 0;
            				}
HXDLIN( 219)				int childIndex1 = (layoutIndex + childIndex);
HXLINE( 220)				 ::openfl::display::DisplayObject oldDivider = this->removeRawChildAt((childIndex1 - 1));
HXLINE( 221)				this->destroyDivider(::hx::TCast<  ::openfl::display::InteractiveObject >::cast(oldDivider),this->_dividerFactory);
            			}
            		}
HXLINE( 224)		this->_dividerFactory = value;
HXLINE( 225)		if ((this->items->length > 1)) {
HXLINE( 226)			int _g2 = 1;
HXDLIN( 226)			int _g3 = this->items->length;
HXDLIN( 226)			while((_g2 < _g3)){
HXLINE( 226)				_g2 = (_g2 + 1);
HXDLIN( 226)				int i1 = (_g2 - 1);
HXLINE( 227)				int layoutIndex1 = (i1 * 2);
HXLINE( 228)				int childIndex2;
HXDLIN( 228)				if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 228)					childIndex2 = 1;
            				}
            				else {
HXLINE( 228)					childIndex2 = 0;
            				}
HXDLIN( 228)				int childIndex3 = (layoutIndex1 + childIndex2);
HXLINE( 229)				 ::openfl::display::InteractiveObject newDivider = this->createDivider();
HXLINE( 230)				this->addRawChildAt(newDivider,(childIndex3 - 1));
HXLINE( 231)				this->dividers[(i1 - 1)] = newDivider;
HXLINE( 232)				this->_layoutItems[(layoutIndex1 - 1)] = newDivider;
            			}
            		}
HXLINE( 235)		this->setInvalid(::feathers::core::InvalidationFlag_obj::LAYOUT_dyn());
HXLINE( 236)		return this->_dividerFactory;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,set_dividerFactory,return )

::Array< ::Dynamic> BaseDividedBox_obj::get_xmlContent(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_254_get_xmlContent)
HXDLIN( 254)		return this->_xmlContent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,get_xmlContent,return )

::Array< ::Dynamic> BaseDividedBox_obj::set_xmlContent(::Array< ::Dynamic> value){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_257_set_xmlContent)
HXLINE( 258)		if (::hx::IsPointerEq( this->_xmlContent,value )) {
HXLINE( 259)			return this->_xmlContent;
            		}
HXLINE( 261)		if (::hx::IsNotNull( this->_xmlContent )) {
HXLINE( 262)			int _g = 0;
HXDLIN( 262)			::Array< ::Dynamic> _g1 = this->_xmlContent;
HXDLIN( 262)			while((_g < _g1->length)){
HXLINE( 262)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 262)				_g = (_g + 1);
HXLINE( 263)				this->removeChild(child);
            			}
            		}
HXLINE( 266)		this->_xmlContent = value;
HXLINE( 267)		if (::hx::IsNotNull( this->_xmlContent )) {
HXLINE( 268)			int _g2 = 0;
HXDLIN( 268)			::Array< ::Dynamic> _g3 = this->_xmlContent;
HXDLIN( 268)			while((_g2 < _g3->length)){
HXLINE( 268)				 ::openfl::display::DisplayObject child1 = _g3->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 268)				_g2 = (_g2 + 1);
HXLINE( 269)				this->addChild(child1);
            			}
            		}
HXLINE( 272)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 273)		return this->_xmlContent;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,set_xmlContent,return )

int BaseDividedBox_obj::get_numRawChildren(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_278_get_numRawChildren)
HXLINE( 279)		bool oldBypass = this->_displayListBypassEnabled;
HXLINE( 280)		this->_displayListBypassEnabled = false;
HXLINE( 281)		int result = this->get_numChildren();
HXLINE( 282)		this->_displayListBypassEnabled = oldBypass;
HXLINE( 283)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,get_numRawChildren,return )

int BaseDividedBox_obj::get_numChildren(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_286_get_numChildren)
HXLINE( 287)		if (!(this->_displayListBypassEnabled)) {
HXLINE( 288)			return this->super::get_numChildren();
            		}
HXLINE( 290)		return this->items->length;
            	}


 ::openfl::display::DisplayObject BaseDividedBox_obj::addChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_293_addChild)
HXLINE( 294)		if (!(this->_displayListBypassEnabled)) {
HXLINE( 295)			return this->super::addChild(child);
            		}
HXLINE( 297)		return this->addChildAt(child,this->items->length);
            	}


 ::openfl::display::DisplayObject BaseDividedBox_obj::addChildAt( ::openfl::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_300_addChildAt)
HXLINE( 301)		if (!(this->_displayListBypassEnabled)) {
HXLINE( 302)			return this->super::addChildAt(child,index);
            		}
HXLINE( 304)		int oldIndex = this->items->indexOf(child,null());
HXLINE( 305)		if ((oldIndex == index)) {
HXLINE( 306)			return child;
            		}
HXLINE( 308)		if ((oldIndex >= 0)) {
HXLINE( 309)			this->removeItem(child);
            		}
HXLINE( 313)		 ::openfl::display::DisplayObject result = this->addItemAt(child,index);
HXLINE( 316)		child->addEventListener(HX_("resize",f4,59,7b,08),this->baseDividedBox_child_resizeHandler_dyn(),null(),null(),null());
HXLINE( 317)		this->setInvalid(::feathers::core::InvalidationFlag_obj::LAYOUT_dyn());
HXLINE( 318)		return result;
            	}


 ::openfl::display::DisplayObject BaseDividedBox_obj::removeChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_321_removeChild)
HXLINE( 322)		if (!(this->_displayListBypassEnabled)) {
HXLINE( 323)			return this->super::removeChild(child);
            		}
HXLINE( 325)		bool _hx_tmp;
HXDLIN( 325)		if (::hx::IsNotNull( child )) {
HXLINE( 325)			_hx_tmp = ::hx::IsInstanceNotEq( child->parent,::hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 325)			_hx_tmp = true;
            		}
HXDLIN( 325)		if (_hx_tmp) {
HXLINE( 326)			return child;
            		}
HXLINE( 328)		 ::openfl::display::DisplayObject result = this->removeItem(child);
HXLINE( 331)		child->removeEventListener(HX_("resize",f4,59,7b,08),this->baseDividedBox_child_resizeHandler_dyn(),null());
HXLINE( 332)		this->setInvalid(::feathers::core::InvalidationFlag_obj::LAYOUT_dyn());
HXLINE( 333)		return result;
            	}


 ::openfl::display::DisplayObject BaseDividedBox_obj::removeChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_336_removeChildAt)
HXLINE( 337)		if (!(this->_displayListBypassEnabled)) {
HXLINE( 338)			return this->super::removeChildAt(index);
            		}
HXLINE( 340)		return this->removeChild(this->items->__get(index).StaticCast<  ::openfl::display::DisplayObject >());
            	}


 ::openfl::display::DisplayObject BaseDividedBox_obj::getChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_343_getChildAt)
HXLINE( 344)		if (!(this->_displayListBypassEnabled)) {
HXLINE( 345)			return this->super::removeChildAt(index);
            		}
HXLINE( 347)		return this->items->__get(index).StaticCast<  ::openfl::display::DisplayObject >();
            	}


int BaseDividedBox_obj::getChildIndex( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_350_getChildIndex)
HXLINE( 351)		if (!(this->_displayListBypassEnabled)) {
HXLINE( 352)			return this->super::getChildIndex(child);
            		}
HXLINE( 354)		return this->items->indexOf(child,null());
            	}


void BaseDividedBox_obj::setChildIndex( ::openfl::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_357_setChildIndex)
HXLINE( 358)		if (!(this->_displayListBypassEnabled)) {
HXLINE( 359)			this->super::setChildIndex(child,index);
HXDLIN( 359)			return;
            		}
HXLINE( 361)		this->items->remove(child);
HXLINE( 362)		this->items->insert(index,child);
            	}


 ::openfl::display::DisplayObject BaseDividedBox_obj::getChildByName(::String name){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_365_getChildByName)
HXLINE( 366)		if (!(this->_displayListBypassEnabled)) {
HXLINE( 367)			return this->super::getChildByName(name);
            		}
HXLINE( 369)		{
HXLINE( 369)			int _g = 0;
HXDLIN( 369)			::Array< ::Dynamic> _g1 = this->items;
HXDLIN( 369)			while((_g < _g1->length)){
HXLINE( 369)				 ::openfl::display::DisplayObject child = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 369)				_g = (_g + 1);
HXLINE( 370)				if ((child->get_name() == name)) {
HXLINE( 371)					return child;
            				}
            			}
            		}
HXLINE( 374)		return null();
            	}


void BaseDividedBox_obj::removeChildren(::hx::Null< int >  __o_beginIndex,::hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(0);
            		int endIndex = __o_endIndex.Default(2147483647);
            	HX_GC_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_377_removeChildren)
HXLINE( 378)		if (!(this->_displayListBypassEnabled)) {
HXLINE( 379)			this->super::removeChildren(beginIndex,endIndex);
HXDLIN( 379)			return;
            		}
HXLINE( 382)		if ((endIndex == (int)2147483647)) {
HXLINE( 383)			endIndex = (this->items->length - 1);
HXLINE( 385)			if ((endIndex < 0)) {
HXLINE( 386)				return;
            			}
            		}
HXLINE( 390)		if ((beginIndex > (this->items->length - 1))) {
HXLINE( 391)			return;
            		}
            		else {
HXLINE( 392)			bool _hx_tmp;
HXDLIN( 392)			bool _hx_tmp1;
HXDLIN( 392)			if ((endIndex >= beginIndex)) {
HXLINE( 392)				_hx_tmp1 = (beginIndex < 0);
            			}
            			else {
HXLINE( 392)				_hx_tmp1 = true;
            			}
HXDLIN( 392)			if (!(_hx_tmp1)) {
HXLINE( 392)				_hx_tmp = (endIndex > this->items->length);
            			}
            			else {
HXLINE( 392)				_hx_tmp = true;
            			}
HXDLIN( 392)			if (_hx_tmp) {
HXLINE( 393)				HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("The supplied index is out of bounds.",17,96,1b,51)));
            			}
            		}
HXLINE( 396)		int numRemovals = (endIndex - beginIndex);
HXLINE( 397)		while((numRemovals >= 0)){
HXLINE( 398)			this->removeChildAt(beginIndex);
HXLINE( 399)			numRemovals = (numRemovals - 1);
            		}
            	}


 ::openfl::display::DisplayObject BaseDividedBox_obj::addRawChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_403_addRawChild)
HXLINE( 404)		bool oldBypass = this->_displayListBypassEnabled;
HXLINE( 405)		this->_displayListBypassEnabled = false;
HXLINE( 406)		 ::openfl::display::DisplayObject result = this->addChild(child);
HXLINE( 407)		this->_displayListBypassEnabled = oldBypass;
HXLINE( 408)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,addRawChild,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::addRawChildAt( ::openfl::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_411_addRawChildAt)
HXLINE( 412)		bool oldBypass = this->_displayListBypassEnabled;
HXLINE( 413)		this->_displayListBypassEnabled = false;
HXLINE( 414)		 ::openfl::display::DisplayObject result = this->addChildAt(child,index);
HXLINE( 415)		this->_displayListBypassEnabled = oldBypass;
HXLINE( 416)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseDividedBox_obj,addRawChildAt,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::removeRawChild( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_419_removeRawChild)
HXLINE( 420)		bool oldBypass = this->_displayListBypassEnabled;
HXLINE( 421)		this->_displayListBypassEnabled = false;
HXLINE( 422)		 ::openfl::display::DisplayObject result = this->removeChild(child);
HXLINE( 423)		this->_displayListBypassEnabled = oldBypass;
HXLINE( 424)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,removeRawChild,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::removeRawChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_427_removeRawChildAt)
HXLINE( 428)		bool oldBypass = this->_displayListBypassEnabled;
HXLINE( 429)		this->_displayListBypassEnabled = false;
HXLINE( 430)		 ::openfl::display::DisplayObject result = this->removeChildAt(index);
HXLINE( 431)		this->_displayListBypassEnabled = oldBypass;
HXLINE( 432)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,removeRawChildAt,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::getRawChildByName(::String name){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_435_getRawChildByName)
HXLINE( 436)		bool oldBypass = this->_displayListBypassEnabled;
HXLINE( 437)		this->_displayListBypassEnabled = false;
HXLINE( 438)		 ::openfl::display::DisplayObject result = this->getChildByName(name);
HXLINE( 439)		this->_displayListBypassEnabled = oldBypass;
HXLINE( 440)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,getRawChildByName,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::getRawChildAt(int index){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_443_getRawChildAt)
HXLINE( 444)		bool oldBypass = this->_displayListBypassEnabled;
HXLINE( 445)		this->_displayListBypassEnabled = false;
HXLINE( 446)		 ::openfl::display::DisplayObject result = this->getChildAt(index);
HXLINE( 447)		this->_displayListBypassEnabled = oldBypass;
HXLINE( 448)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,getRawChildAt,return )

int BaseDividedBox_obj::getRawChildIndex( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_451_getRawChildIndex)
HXLINE( 452)		bool oldBypass = this->_displayListBypassEnabled;
HXLINE( 453)		this->_displayListBypassEnabled = false;
HXLINE( 454)		int result = this->getChildIndex(child);
HXLINE( 455)		this->_displayListBypassEnabled = oldBypass;
HXLINE( 456)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,getRawChildIndex,return )

void BaseDividedBox_obj::setRawChildIndex( ::openfl::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_459_setRawChildIndex)
HXLINE( 460)		bool oldBypass = this->_displayListBypassEnabled;
HXLINE( 461)		this->_displayListBypassEnabled = false;
HXLINE( 462)		this->setChildIndex(child,index);
HXLINE( 463)		this->_displayListBypassEnabled = oldBypass;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseDividedBox_obj,setRawChildIndex,(void))

void BaseDividedBox_obj::removeRawChildren(::hx::Null< int >  __o_beginIndex,::hx::Null< int >  __o_endIndex){
            		int beginIndex = __o_beginIndex.Default(0);
            		int endIndex = __o_endIndex.Default(2147483647);
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_466_removeRawChildren)
HXLINE( 467)		bool oldBypass = this->_displayListBypassEnabled;
HXLINE( 468)		this->_displayListBypassEnabled = false;
HXLINE( 469)		this->removeRawChildren(beginIndex,endIndex);
HXLINE( 470)		this->_displayListBypassEnabled = oldBypass;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseDividedBox_obj,removeRawChildren,(void))

 ::openfl::display::DisplayObject BaseDividedBox_obj::addItemAt( ::openfl::display::DisplayObject child,int index){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_473_addItemAt)
HXLINE( 474)		this->items->insert(index,child);
HXLINE( 475)		int layoutIndex = (index * 2);
HXLINE( 476)		int childIndex;
HXDLIN( 476)		if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 476)			childIndex = 1;
            		}
            		else {
HXLINE( 476)			childIndex = 0;
            		}
HXDLIN( 476)		int childIndex1 = (layoutIndex + childIndex);
HXLINE( 477)		if ((index != 0)) {
HXLINE( 478)			 ::openfl::display::InteractiveObject divider = this->createDivider();
HXLINE( 479)			this->super::addChildAt(divider,(childIndex1 - 1));
HXLINE( 480)			this->dividers->insert((index - 1),divider);
HXLINE( 481)			this->_layoutItems->insert((layoutIndex - 1),divider);
            		}
HXLINE( 483)		this->_layoutItems->insert(layoutIndex,child);
HXLINE( 484)		return this->super::addChildAt(child,childIndex1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseDividedBox_obj,addItemAt,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::removeItem( ::openfl::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_487_removeItem)
HXLINE( 488)		this->items->remove(child);
HXLINE( 489)		int index = this->getRawChildIndex(child);
HXLINE( 490)		if ((index != 0)) {
HXLINE( 491)			 ::openfl::display::DisplayObject divider = this->super::getChildAt((index - 1));
HXLINE( 492)			this->dividers->removeRange((index - 1),1);
HXLINE( 493)			this->_layoutItems->remove(divider);
HXLINE( 494)			this->destroyDivider(::hx::TCast<  ::openfl::display::InteractiveObject >::cast(divider),this->_dividerFactory);
            		}
HXLINE( 496)		this->_layoutItems->remove(child);
HXLINE( 497)		return this->super::removeChild(child);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,removeItem,return )

void BaseDividedBox_obj::update(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_500_update)
HXLINE( 501)		bool stateInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::STATE_dyn());
HXLINE( 502)		bool stylesInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 504)		bool _hx_tmp;
HXDLIN( 504)		if (!(stylesInvalid)) {
HXLINE( 504)			_hx_tmp = stateInvalid;
            		}
            		else {
HXLINE( 504)			_hx_tmp = true;
            		}
HXDLIN( 504)		if (_hx_tmp) {
HXLINE( 505)			this->refreshBackgroundSkin();
            		}
HXLINE( 508)		bool _hx_tmp1;
HXDLIN( 508)		if (!(stylesInvalid)) {
HXLINE( 508)			_hx_tmp1 = stateInvalid;
            		}
            		else {
HXLINE( 508)			_hx_tmp1 = true;
            		}
HXDLIN( 508)		if (_hx_tmp1) {
HXLINE( 509)			this->refreshResizeDraggingSkin();
            		}
HXLINE( 512)		this->refreshViewPortBounds();
HXLINE( 513)		this->handleLayout();
HXLINE( 514)		this->handleLayoutResult();
HXLINE( 515)		this->refreshBackgroundLayout();
HXLINE( 518)		this->validateChildren();
            	}


void BaseDividedBox_obj::refreshBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_521_refreshBackgroundSkin)
HXLINE( 522)		 ::openfl::display::DisplayObject oldSkin = this->_currentBackgroundSkin;
HXLINE( 523)		this->_currentBackgroundSkin = this->getCurrentBackgroundSkin();
HXLINE( 524)		if (::hx::IsInstanceEq( this->_currentBackgroundSkin,oldSkin )) {
HXLINE( 525)			return;
            		}
HXLINE( 527)		this->removeCurrentBackgroundSkin(oldSkin);
HXLINE( 528)		this->addCurrentBackgroundSkin(this->_currentBackgroundSkin);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,refreshBackgroundSkin,(void))

 ::openfl::display::DisplayObject BaseDividedBox_obj::getCurrentBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_531_getCurrentBackgroundSkin)
HXLINE( 532)		bool _hx_tmp;
HXDLIN( 532)		if (!(this->_enabled)) {
HXLINE( 532)			_hx_tmp = ::hx::IsNotNull( this->get_disabledBackgroundSkin() );
            		}
            		else {
HXLINE( 532)			_hx_tmp = false;
            		}
HXDLIN( 532)		if (_hx_tmp) {
HXLINE( 533)			return this->get_disabledBackgroundSkin();
            		}
HXLINE( 535)		return this->get_backgroundSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,getCurrentBackgroundSkin,return )

void BaseDividedBox_obj::addCurrentBackgroundSkin( ::openfl::display::DisplayObject skin){
            	HX_GC_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_538_addCurrentBackgroundSkin)
HXLINE( 539)		if (::hx::IsNull( skin )) {
HXLINE( 540)			this->_backgroundSkinMeasurements = null();
HXLINE( 541)			return;
            		}
HXLINE( 543)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::core::IUIControl >())) {
HXLINE( 544)			::feathers::core::IUIControl_obj::initializeNow( ::hx::interface_check(skin,0x2696a04f));
            		}
HXLINE( 546)		if (::hx::IsNull( this->_backgroundSkinMeasurements )) {
HXLINE( 547)			this->_backgroundSkinMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,skin);
            		}
            		else {
HXLINE( 549)			this->_backgroundSkinMeasurements->save(skin);
            		}
HXLINE( 551)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE( 552)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(skin,0x32a0d8d6),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 554)		this->addRawChildAt(skin,0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,addCurrentBackgroundSkin,(void))

void BaseDividedBox_obj::removeCurrentBackgroundSkin( ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_557_removeCurrentBackgroundSkin)
HXLINE( 558)		if (::hx::IsNull( skin )) {
HXLINE( 559)			return;
            		}
HXLINE( 561)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE( 562)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(skin,0x32a0d8d6),null());
            		}
HXLINE( 566)		this->_backgroundSkinMeasurements->restore(skin);
HXLINE( 567)		if (::hx::IsInstanceEq( skin->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 568)			this->removeRawChild(skin);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,removeCurrentBackgroundSkin,(void))

void BaseDividedBox_obj::refreshResizeDraggingSkin(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_572_refreshResizeDraggingSkin)
HXLINE( 573)		 ::openfl::display::DisplayObject oldSkin = this->_currentResizeDraggingSkin;
HXLINE( 574)		this->_currentResizeDraggingSkin = this->getCurrentResizeDraggingSkin();
HXLINE( 575)		if (::hx::IsInstanceEq( this->_currentResizeDraggingSkin,oldSkin )) {
HXLINE( 576)			return;
            		}
HXLINE( 578)		this->removeCurrentResizeDraggingSkin(oldSkin);
HXLINE( 579)		if (::hx::IsNull( this->_currentResizeDraggingSkin )) {
HXLINE( 580)			return;
            		}
HXLINE( 582)		if (::Std_obj::isOfType(this->_currentResizeDraggingSkin,::hx::ClassOf< ::feathers::core::IUIControl >())) {
HXLINE( 583)			::feathers::core::IUIControl_obj::initializeNow( ::hx::interface_check(this->_currentResizeDraggingSkin,0x2696a04f));
            		}
HXLINE( 585)		if (::Std_obj::isOfType(this->_currentResizeDraggingSkin,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE( 586)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(this->_currentResizeDraggingSkin,0x32a0d8d6),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 588)		this->_currentResizeDraggingSkin->set_visible(false);
HXLINE( 589)		if (::Std_obj::isOfType(this->_currentResizeDraggingSkin,::hx::ClassOf< ::openfl::display::InteractiveObject >())) {
HXLINE( 590)			::hx::TCast<  ::openfl::display::InteractiveObject >::cast(this->_currentResizeDraggingSkin)->mouseEnabled = false;
            		}
HXLINE( 592)		if (::Std_obj::isOfType(this->_currentResizeDraggingSkin,::hx::ClassOf< ::openfl::display::DisplayObjectContainer >())) {
HXLINE( 593)			::hx::TCast<  ::openfl::display::DisplayObjectContainer >::cast(this->_currentResizeDraggingSkin)->mouseChildren = false;
            		}
HXLINE( 595)		this->addRawChild(this->_currentResizeDraggingSkin);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,refreshResizeDraggingSkin,(void))

 ::openfl::display::DisplayObject BaseDividedBox_obj::getCurrentResizeDraggingSkin(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_599_getCurrentResizeDraggingSkin)
HXDLIN( 599)		return this->get_resizeDraggingSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,getCurrentResizeDraggingSkin,return )

void BaseDividedBox_obj::removeCurrentResizeDraggingSkin( ::openfl::display::DisplayObject skin){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_602_removeCurrentResizeDraggingSkin)
HXLINE( 603)		if (::hx::IsNull( skin )) {
HXLINE( 604)			return;
            		}
HXLINE( 606)		if (::Std_obj::isOfType(skin,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE( 607)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(skin,0x32a0d8d6),null());
            		}
HXLINE( 609)		if (::hx::IsInstanceEq( skin->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 610)			this->removeRawChild(skin);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,removeCurrentResizeDraggingSkin,(void))

 ::openfl::display::InteractiveObject BaseDividedBox_obj::createDivider(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_614_createDivider)
HXLINE( 615)		 ::feathers::utils::DisplayObjectFactory dividerFactory;
HXDLIN( 615)		if (::hx::IsNotNull( this->_dividerFactory )) {
HXLINE( 615)			dividerFactory = this->_dividerFactory;
            		}
            		else {
HXLINE( 615)			dividerFactory = ::feathers::controls::supportClasses::BaseDividedBox_obj::defaultDividerFactory;
            		}
HXLINE( 616)		 ::openfl::display::InteractiveObject divider = ( ( ::openfl::display::InteractiveObject)(dividerFactory->create()) );
HXLINE( 617)		divider->addEventListener(HX_("rollOver",71,ab,a8,12),this->baseDividedBox_divider_rollOverHandler_dyn(),null(),null(),null());
HXLINE( 618)		divider->addEventListener(HX_("rollOut",11,f9,11,5d),this->baseDividedBox_divider_rollOutHandler_dyn(),null(),null(),null());
HXLINE( 619)		divider->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->baseDividedBox_divider_mouseDownHandler_dyn(),null(),null(),null());
HXLINE( 620)		divider->addEventListener(HX_("touchBegin",ea,cd,e6,a9),this->baseDividedBox_divider_touchBeginHandler_dyn(),null(),null(),null());
HXLINE( 621)		return divider;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,createDivider,return )

void BaseDividedBox_obj::destroyDivider( ::openfl::display::InteractiveObject divider, ::feathers::utils::DisplayObjectFactory factory){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_624_destroyDivider)
HXLINE( 625)		divider->removeEventListener(HX_("rollOver",71,ab,a8,12),this->baseDividedBox_divider_rollOverHandler_dyn(),null());
HXLINE( 626)		divider->removeEventListener(HX_("rollOut",11,f9,11,5d),this->baseDividedBox_divider_rollOutHandler_dyn(),null());
HXLINE( 627)		divider->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->baseDividedBox_divider_mouseDownHandler_dyn(),null());
HXLINE( 628)		divider->removeEventListener(HX_("touchBegin",ea,cd,e6,a9),this->baseDividedBox_divider_touchBeginHandler_dyn(),null());
HXLINE( 629)		bool _hx_tmp;
HXDLIN( 629)		if (::hx::IsNotNull( factory )) {
HXLINE( 629)			_hx_tmp = ::hx::IsNotNull( factory->destroy );
            		}
            		else {
HXLINE( 629)			_hx_tmp = false;
            		}
HXDLIN( 629)		if (_hx_tmp) {
HXLINE( 630)			factory->destroy(divider);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BaseDividedBox_obj,destroyDivider,(void))

void BaseDividedBox_obj::refreshViewPortBounds(){
            	HX_GC_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_634_refreshViewPortBounds)
HXLINE( 635)		bool needsWidth = ::hx::IsNull( this->get_explicitWidth() );
HXLINE( 636)		bool needsHeight = ::hx::IsNull( this->get_explicitHeight() );
HXLINE( 637)		bool needsMinWidth = ::hx::IsNull( this->get_explicitMinWidth() );
HXLINE( 638)		bool needsMinHeight = ::hx::IsNull( this->get_explicitMinHeight() );
HXLINE( 639)		bool needsMaxWidth = ::hx::IsNull( this->get_explicitMaxWidth() );
HXLINE( 640)		bool needsMaxHeight = ::hx::IsNull( this->get_explicitMaxHeight() );
HXLINE( 642)		if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 643)			::feathers::utils::MeasurementsUtil_obj::resetFluidlyWithParent(this->_backgroundSkinMeasurements,this->_currentBackgroundSkin,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 644)			if (::Std_obj::isOfType(this->_currentBackgroundSkin,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 645)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentBackgroundSkin,0x64d4b3cd));
            			}
            		}
HXLINE( 649)		bool needsToMeasureContent;
HXDLIN( 649)		if (::hx::IsPointerNotEq( this->_autoSizeMode,::feathers::layout::AutoSizeMode_obj::CONTENT_dyn() )) {
HXLINE( 649)			needsToMeasureContent = ::hx::IsNull( this->stage );
            		}
            		else {
HXLINE( 649)			needsToMeasureContent = true;
            		}
HXLINE( 650)		Float stageWidth = ((Float)0.0);
HXLINE( 651)		Float stageHeight = ((Float)0.0);
HXLINE( 652)		if (!(needsToMeasureContent)) {
HXLINE( 654)			 ::openfl::geom::Point topLeft = this->globalToLocal( ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null()));
HXLINE( 655)			 ::openfl::geom::Point bottomRight = this->globalToLocal( ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->stage->stageWidth,this->stage->stageHeight));
HXLINE( 656)			stageWidth = (bottomRight->x - topLeft->x);
HXLINE( 657)			stageHeight = (bottomRight->y - topLeft->y);
            		}
HXLINE( 660)		bool _hx_tmp;
HXDLIN( 660)		if (needsWidth) {
HXLINE( 660)			_hx_tmp = !(needsToMeasureContent);
            		}
            		else {
HXLINE( 660)			_hx_tmp = false;
            		}
HXDLIN( 660)		if (_hx_tmp) {
HXLINE( 661)			this->_layoutMeasurements->width = stageWidth;
            		}
            		else {
HXLINE( 663)			this->_layoutMeasurements->width = this->get_explicitWidth();
            		}
HXLINE( 666)		bool _hx_tmp1;
HXDLIN( 666)		if (needsHeight) {
HXLINE( 666)			_hx_tmp1 = !(needsToMeasureContent);
            		}
            		else {
HXLINE( 666)			_hx_tmp1 = false;
            		}
HXDLIN( 666)		if (_hx_tmp1) {
HXLINE( 667)			this->_layoutMeasurements->height = stageHeight;
            		}
            		else {
HXLINE( 669)			this->_layoutMeasurements->height = this->get_explicitHeight();
            		}
HXLINE( 672)		 ::Dynamic viewPortMinWidth = this->get_explicitMinWidth();
HXLINE( 673)		if (needsMinWidth) {
HXLINE( 674)			viewPortMinWidth = ((Float)0.0);
            		}
HXLINE( 676)		 ::Dynamic viewPortMinHeight = this->get_explicitMinHeight();
HXLINE( 677)		if (needsMinHeight) {
HXLINE( 678)			viewPortMinHeight = ((Float)0.0);
            		}
HXLINE( 680)		 ::Dynamic viewPortMaxWidth = this->get_explicitMaxWidth();
HXLINE( 681)		if (needsMaxWidth) {
HXLINE( 682)			viewPortMaxWidth = ::hx::DivByZero(((Float)1.0));
            		}
HXLINE( 684)		 ::Dynamic viewPortMaxHeight = this->get_explicitMaxHeight();
HXLINE( 685)		if (needsMaxHeight) {
HXLINE( 686)			viewPortMaxHeight = ::hx::DivByZero(((Float)1.0));
            		}
HXLINE( 688)		if (::hx::IsNotNull( this->_backgroundSkinMeasurements )) {
HXLINE( 692)			if (::hx::IsNotNull( this->_backgroundSkinMeasurements->width )) {
HXLINE( 693)				if (::hx::IsGreater( this->_backgroundSkinMeasurements->width,viewPortMinWidth )) {
HXLINE( 694)					viewPortMinWidth = this->_backgroundSkinMeasurements->width;
            				}
            			}
            			else {
HXLINE( 696)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements->minWidth )) {
HXLINE( 697)					if (::hx::IsGreater( this->_backgroundSkinMeasurements->minWidth,viewPortMinWidth )) {
HXLINE( 698)						viewPortMinWidth = this->_backgroundSkinMeasurements->minWidth;
            					}
            				}
            			}
HXLINE( 701)			if (::hx::IsNotNull( this->_backgroundSkinMeasurements->height )) {
HXLINE( 702)				if (::hx::IsGreater( this->_backgroundSkinMeasurements->height,viewPortMinHeight )) {
HXLINE( 703)					viewPortMinHeight = this->_backgroundSkinMeasurements->height;
            				}
            			}
            			else {
HXLINE( 705)				if (::hx::IsNotNull( this->_backgroundSkinMeasurements->minHeight )) {
HXLINE( 706)					if (::hx::IsGreater( this->_backgroundSkinMeasurements->minHeight,viewPortMinHeight )) {
HXLINE( 707)						viewPortMinHeight = this->_backgroundSkinMeasurements->minHeight;
            					}
            				}
            			}
            		}
HXLINE( 711)		this->_layoutMeasurements->minWidth = viewPortMinWidth;
HXLINE( 712)		this->_layoutMeasurements->minHeight = viewPortMinHeight;
HXLINE( 713)		this->_layoutMeasurements->maxWidth = viewPortMaxWidth;
HXLINE( 714)		this->_layoutMeasurements->maxHeight = viewPortMaxHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,refreshViewPortBounds,(void))

void BaseDividedBox_obj::handleLayout(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_717_handleLayout)
HXLINE( 718)		bool oldIgnoreChildChanges = this->_ignoreChildChanges;
HXLINE( 719)		this->_ignoreChildChanges = true;
HXLINE( 720)		this->_layoutResult->reset();
HXLINE( 721)		::feathers::layout::ILayout_obj::layout(this->layout,this->_layoutItems,this->_layoutMeasurements,this->_layoutResult);
HXLINE( 722)		this->_ignoreChildChanges = oldIgnoreChildChanges;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,handleLayout,(void))

void BaseDividedBox_obj::handleLayoutResult(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_725_handleLayoutResult)
HXLINE( 726)		Float viewPortWidth = this->_layoutResult->viewPortWidth;
HXLINE( 727)		Float viewPortHeight = this->_layoutResult->viewPortHeight;
HXLINE( 728)		this->saveMeasurements(viewPortWidth,viewPortHeight,viewPortWidth,viewPortHeight,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,handleLayoutResult,(void))

void BaseDividedBox_obj::refreshBackgroundLayout(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_731_refreshBackgroundLayout)
HXLINE( 732)		if (::hx::IsNull( this->_currentBackgroundSkin )) {
HXLINE( 733)			return;
            		}
HXLINE( 735)		this->_currentBackgroundSkin->set_x(((Float)0.0));
HXLINE( 736)		this->_currentBackgroundSkin->set_y(((Float)0.0));
HXLINE( 741)		Float _hx_tmp = this->_currentBackgroundSkin->get_width();
HXDLIN( 741)		if ((_hx_tmp != this->actualWidth)) {
HXLINE( 742)			this->_currentBackgroundSkin->set_width(this->actualWidth);
            		}
HXLINE( 744)		Float _hx_tmp1 = this->_currentBackgroundSkin->get_height();
HXDLIN( 744)		if ((_hx_tmp1 != this->actualHeight)) {
HXLINE( 745)			this->_currentBackgroundSkin->set_height(this->actualHeight);
            		}
HXLINE( 747)		if (::Std_obj::isOfType(this->_currentBackgroundSkin,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 748)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentBackgroundSkin,0x64d4b3cd));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,refreshBackgroundLayout,(void))

void BaseDividedBox_obj::validateChildren(){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_753_validateChildren)
HXDLIN( 753)		int _g = 0;
HXDLIN( 753)		::Array< ::Dynamic> _g1 = this->_layoutItems;
HXDLIN( 753)		while((_g < _g1->length)){
HXDLIN( 753)			 ::openfl::display::DisplayObject layoutItem = _g1->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 753)			_g = (_g + 1);
HXLINE( 754)			if (::Std_obj::isOfType(layoutItem,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 755)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(layoutItem,0x64d4b3cd));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,validateChildren,(void))

void BaseDividedBox_obj::prepareResize(int dividerIndex,Float stageX,Float stageY){
            	HX_GC_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_761_prepareResize)
HXDLIN( 761)		HX_STACK_DO_THROW( ::openfl::errors::TypeError_obj::__alloc( HX_CTX ,(HX_("Missing override for 'prepareResize' in type ",09,20,73,46) + ::Type_obj::getClassName(::Type_obj::getClass(::hx::ObjectPtr<OBJ_>(this))))));
            	}


HX_DEFINE_DYNAMIC_FUNC3(BaseDividedBox_obj,prepareResize,(void))

void BaseDividedBox_obj::commitResize(int dividerIndex,Float stageX,Float stageY,bool live){
            	HX_GC_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_765_commitResize)
HXDLIN( 765)		HX_STACK_DO_THROW( ::openfl::errors::TypeError_obj::__alloc( HX_CTX ,(HX_("Missing override for 'commitResize' in type ",65,c8,8f,f4) + ::Type_obj::getClassName(::Type_obj::getClass(::hx::ObjectPtr<OBJ_>(this))))));
            	}


HX_DEFINE_DYNAMIC_FUNC4(BaseDividedBox_obj,commitResize,(void))

void BaseDividedBox_obj::resizeTouchBegin(int touchPointID,bool isMouse, ::openfl::display::InteractiveObject divider,Float stageX,Float stageY){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_768_resizeTouchBegin)
HXLINE( 769)		bool _hx_tmp;
HXDLIN( 769)		bool _hx_tmp1;
HXDLIN( 769)		if (this->_enabled) {
HXLINE( 769)			_hx_tmp1 = (this->_resizingDividerIndex != -1);
            		}
            		else {
HXLINE( 769)			_hx_tmp1 = true;
            		}
HXDLIN( 769)		if (!(_hx_tmp1)) {
HXLINE( 769)			_hx_tmp = ::hx::IsNull( this->stage );
            		}
            		else {
HXLINE( 769)			_hx_tmp = true;
            		}
HXDLIN( 769)		if (_hx_tmp) {
HXLINE( 770)			return;
            		}
HXLINE( 773)		 ::feathers::utils::ExclusivePointer exclusivePointer = ::feathers::utils::ExclusivePointer_obj::forStage(this->stage);
HXLINE( 774)		bool result = false;
HXLINE( 775)		if (isMouse) {
HXLINE( 776)			result = exclusivePointer->claimMouse(divider);
            		}
            		else {
HXLINE( 778)			result = exclusivePointer->claimTouch(touchPointID,divider);
            		}
HXLINE( 780)		if (!(result)) {
HXLINE( 781)			return;
            		}
HXLINE( 784)		this->_resizingTouchPointID = touchPointID;
HXLINE( 785)		this->_resizingTouchPointIsMouse = isMouse;
HXLINE( 786)		this->_resizingDividerIndex = this->dividers->indexOf(divider,null());
HXLINE( 787)		this->prepareResize(this->_resizingDividerIndex,stageX,stageY);
HXLINE( 788)		bool _hx_tmp2;
HXDLIN( 788)		if (!(this->liveDragging)) {
HXLINE( 788)			_hx_tmp2 = ::hx::IsNotNull( this->_currentResizeDraggingSkin );
            		}
            		else {
HXLINE( 788)			_hx_tmp2 = false;
            		}
HXDLIN( 788)		if (_hx_tmp2) {
HXLINE( 789)			this->_currentResizeDraggingSkin->set_visible(true);
            		}
HXLINE( 791)		if (isMouse) {
HXLINE( 792)			this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->baseDividedBox_divider_stage_mouseMoveHandler_dyn(),false,0,true);
HXLINE( 793)			this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->baseDividedBox_divider_stage_mouseUpHandler_dyn(),false,0,true);
            		}
            		else {
HXLINE( 795)			this->stage->addEventListener(HX_("touchMove",70,72,cd,0d),this->baseDividedBox_divider_stage_touchMoveHandler_dyn(),false,0,true);
HXLINE( 796)			this->stage->addEventListener(HX_("touchEnd",5c,c5,09,00),this->baseDividedBox_divider_stage_touchEndHandler_dyn(),false,0,true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BaseDividedBox_obj,resizeTouchBegin,(void))

void BaseDividedBox_obj::resizeTouchMove(int touchPointID,bool isMouse,Float stageX,Float stageY){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_800_resizeTouchMove)
HXLINE( 801)		bool _hx_tmp;
HXDLIN( 801)		bool _hx_tmp1;
HXDLIN( 801)		if (::hx::IsNotNull( this->_resizingTouchPointID )) {
HXLINE( 801)			_hx_tmp1 = ::hx::IsNotEq( this->_resizingTouchPointID,touchPointID );
            		}
            		else {
HXLINE( 801)			_hx_tmp1 = true;
            		}
HXDLIN( 801)		if (!(_hx_tmp1)) {
HXLINE( 801)			_hx_tmp = (this->_resizingTouchPointIsMouse != isMouse);
            		}
            		else {
HXLINE( 801)			_hx_tmp = true;
            		}
HXDLIN( 801)		if (_hx_tmp) {
HXLINE( 804)			return;
            		}
HXLINE( 806)		this->commitResize(this->_resizingDividerIndex,stageX,stageY,true);
            	}


HX_DEFINE_DYNAMIC_FUNC4(BaseDividedBox_obj,resizeTouchMove,(void))

void BaseDividedBox_obj::resizeTouchEnd(int touchPointID,bool isMouse,Float stageX,Float stageY){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_809_resizeTouchEnd)
HXLINE( 810)		bool _hx_tmp;
HXDLIN( 810)		bool _hx_tmp1;
HXDLIN( 810)		if (::hx::IsNotNull( this->_resizingTouchPointID )) {
HXLINE( 810)			_hx_tmp1 = ::hx::IsNotEq( this->_resizingTouchPointID,touchPointID );
            		}
            		else {
HXLINE( 810)			_hx_tmp1 = true;
            		}
HXDLIN( 810)		if (!(_hx_tmp1)) {
HXLINE( 810)			_hx_tmp = (this->_resizingTouchPointIsMouse != isMouse);
            		}
            		else {
HXLINE( 810)			_hx_tmp = true;
            		}
HXDLIN( 810)		if (_hx_tmp) {
HXLINE( 813)			return;
            		}
HXLINE( 816)		if (isMouse) {
HXLINE( 817)			this->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->baseDividedBox_divider_stage_mouseMoveHandler_dyn(),null());
HXLINE( 818)			this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->baseDividedBox_divider_stage_mouseUpHandler_dyn(),null());
            		}
            		else {
HXLINE( 820)			this->stage->removeEventListener(HX_("touchMove",70,72,cd,0d),this->baseDividedBox_divider_stage_touchMoveHandler_dyn(),null());
HXLINE( 821)			this->stage->removeEventListener(HX_("touchEnd",5c,c5,09,00),this->baseDividedBox_divider_stage_touchEndHandler_dyn(),null());
            		}
HXLINE( 824)		if (!(this->liveDragging)) {
HXLINE( 825)			this->commitResize(this->_resizingDividerIndex,stageX,stageY,false);
            		}
HXLINE( 827)		if (::hx::IsNotNull( this->_currentResizeDraggingSkin )) {
HXLINE( 828)			this->_currentResizeDraggingSkin->set_visible(false);
            		}
HXLINE( 831)		this->_resizingTouchPointID = null();
HXLINE( 832)		this->_resizingTouchPointIsMouse = false;
HXLINE( 833)		this->_resizingDividerIndex = -1;
HXLINE( 835)		if (::hx::IsNotNull( this->_oldDividerMouseCursor )) {
HXLINE( 836)			::openfl::ui::Mouse_obj::set_cursor(this->_oldDividerMouseCursor);
HXLINE( 837)			this->_oldDividerMouseCursor = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(BaseDividedBox_obj,resizeTouchEnd,(void))

void BaseDividedBox_obj::baseDividedBox_child_resizeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_841_baseDividedBox_child_resizeHandler)
HXLINE( 842)		if (this->_ignoreChildChanges) {
HXLINE( 843)			return;
            		}
HXLINE( 845)		this->setInvalid(::feathers::core::InvalidationFlag_obj::LAYOUT_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,baseDividedBox_child_resizeHandler,(void))

void BaseDividedBox_obj::baseDividedBox_addedToStageHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_849_baseDividedBox_addedToStageHandler)
HXDLIN( 849)		if (::hx::IsPointerEq( this->_autoSizeMode,::feathers::layout::AutoSizeMode_obj::STAGE_dyn() )) {
HXLINE( 853)			this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
HXLINE( 854)			this->stage->addEventListener(HX_("resize",f4,59,7b,08),this->baseDividedBox_stage_resizeHandler_dyn(),null(),null(),null());
HXLINE( 855)			this->addEventListener(HX_("removedFromStage",34,21,76,ba),this->baseDividedBox_removedFromStageHandler_dyn(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,baseDividedBox_addedToStageHandler,(void))

void BaseDividedBox_obj::baseDividedBox_removedFromStageHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_859_baseDividedBox_removedFromStageHandler)
HXLINE( 860)		this->removeEventListener(HX_("removedFromStage",34,21,76,ba),this->baseDividedBox_removedFromStageHandler_dyn(),null());
HXLINE( 861)		this->stage->removeEventListener(HX_("resize",f4,59,7b,08),this->baseDividedBox_stage_resizeHandler_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,baseDividedBox_removedFromStageHandler,(void))

void BaseDividedBox_obj::baseDividedBox_stage_resizeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_865_baseDividedBox_stage_resizeHandler)
HXDLIN( 865)		this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,baseDividedBox_stage_resizeHandler,(void))

void BaseDividedBox_obj::baseDividedBox_divider_rollOverHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_868_baseDividedBox_divider_rollOverHandler)
HXLINE( 869)		bool _hx_tmp;
HXDLIN( 869)		bool _hx_tmp1;
HXDLIN( 869)		if (this->_enabled) {
HXLINE( 869)			_hx_tmp1 = (this->_resizingDividerIndex != -1);
            		}
            		else {
HXLINE( 869)			_hx_tmp1 = true;
            		}
HXDLIN( 869)		if (!(_hx_tmp1)) {
HXLINE( 869)			_hx_tmp = (::openfl::ui::Mouse_obj::get_cursor() != HX_("auto",6f,df,76,40));
            		}
            		else {
HXLINE( 869)			_hx_tmp = true;
            		}
HXDLIN( 869)		if (_hx_tmp) {
HXLINE( 871)			return;
            		}
HXLINE( 874)		this->_oldDividerMouseCursor = ::openfl::ui::Mouse_obj::get_cursor();
HXLINE( 875)		::openfl::ui::Mouse_obj::set_cursor(this->resizeCursor);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,baseDividedBox_divider_rollOverHandler,(void))

void BaseDividedBox_obj::baseDividedBox_divider_rollOutHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_879_baseDividedBox_divider_rollOutHandler)
HXLINE( 880)		bool _hx_tmp;
HXDLIN( 880)		bool _hx_tmp1;
HXDLIN( 880)		if (this->_enabled) {
HXLINE( 880)			_hx_tmp1 = (this->_resizingDividerIndex != -1);
            		}
            		else {
HXLINE( 880)			_hx_tmp1 = true;
            		}
HXDLIN( 880)		if (!(_hx_tmp1)) {
HXLINE( 880)			_hx_tmp = ::hx::IsNull( this->_oldDividerMouseCursor );
            		}
            		else {
HXLINE( 880)			_hx_tmp = true;
            		}
HXDLIN( 880)		if (_hx_tmp) {
HXLINE( 882)			return;
            		}
HXLINE( 884)		::openfl::ui::Mouse_obj::set_cursor(this->_oldDividerMouseCursor);
HXLINE( 885)		this->_oldDividerMouseCursor = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,baseDividedBox_divider_rollOutHandler,(void))

void BaseDividedBox_obj::baseDividedBox_divider_mouseDownHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_888_baseDividedBox_divider_mouseDownHandler)
HXLINE( 889)		 ::openfl::display::InteractiveObject divider = ::hx::TCast<  ::openfl::display::InteractiveObject >::cast(event->currentTarget);
HXLINE( 890)		Float _hx_tmp = this->stage->get_mouseX();
HXDLIN( 890)		this->resizeTouchBegin(::feathers::controls::supportClasses::BaseDividedBox_obj::POINTER_ID_MOUSE,true,divider,_hx_tmp,this->stage->get_mouseY());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,baseDividedBox_divider_mouseDownHandler,(void))

void BaseDividedBox_obj::baseDividedBox_divider_stage_mouseMoveHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_893_baseDividedBox_divider_stage_mouseMoveHandler)
HXLINE( 894)		 ::openfl::display::Stage stage = ::hx::TCast<  ::openfl::display::Stage >::cast(event->currentTarget);
HXLINE( 895)		Float _hx_tmp = stage->get_mouseX();
HXDLIN( 895)		this->resizeTouchMove(::feathers::controls::supportClasses::BaseDividedBox_obj::POINTER_ID_MOUSE,true,_hx_tmp,stage->get_mouseY());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,baseDividedBox_divider_stage_mouseMoveHandler,(void))

void BaseDividedBox_obj::baseDividedBox_divider_stage_mouseUpHandler( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_898_baseDividedBox_divider_stage_mouseUpHandler)
HXLINE( 899)		 ::openfl::display::Stage stage = ::hx::TCast<  ::openfl::display::Stage >::cast(event->currentTarget);
HXLINE( 900)		Float _hx_tmp = stage->get_mouseX();
HXDLIN( 900)		this->resizeTouchEnd(::feathers::controls::supportClasses::BaseDividedBox_obj::POINTER_ID_MOUSE,true,_hx_tmp,stage->get_mouseY());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,baseDividedBox_divider_stage_mouseUpHandler,(void))

void BaseDividedBox_obj::baseDividedBox_divider_touchBeginHandler( ::openfl::events::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_903_baseDividedBox_divider_touchBeginHandler)
HXLINE( 904)		if (event->isPrimaryTouchPoint) {
HXLINE( 906)			return;
            		}
HXLINE( 908)		 ::openfl::display::InteractiveObject divider = ::hx::TCast<  ::openfl::display::InteractiveObject >::cast(event->currentTarget);
HXLINE( 909)		this->resizeTouchBegin(event->touchPointID,false,divider,event->stageX,event->stageY);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,baseDividedBox_divider_touchBeginHandler,(void))

void BaseDividedBox_obj::baseDividedBox_divider_stage_touchMoveHandler( ::openfl::events::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_913_baseDividedBox_divider_stage_touchMoveHandler)
HXDLIN( 913)		this->resizeTouchMove(event->touchPointID,false,event->stageX,event->stageY);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,baseDividedBox_divider_stage_touchMoveHandler,(void))

void BaseDividedBox_obj::baseDividedBox_divider_stage_touchEndHandler( ::openfl::events::TouchEvent event){
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_917_baseDividedBox_divider_stage_touchEndHandler)
HXDLIN( 917)		this->resizeTouchEnd(event->touchPointID,false,event->stageX,event->stageY);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,baseDividedBox_divider_stage_touchEndHandler,(void))

 ::openfl::display::DisplayObject BaseDividedBox_obj::get_backgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_e2ffdce0585e9f6d_85_get_backgroundSkin)
HXDLIN(  85)		return this->_hx___backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,get_backgroundSkin,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::set_backgroundSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_e2ffdce0585e9f6d_99_set_backgroundSkin)
HXLINE( 106)		if (!(this->setStyle(HX_("backgroundSkin",8b,65,6f,20),null()))) {
HXLINE( 107)			return this->_hx___backgroundSkin;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___backgroundSkin,value )) {
HXLINE( 110)			return this->_hx___backgroundSkin;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_backgroundSkin_dyn();
HXLINE( 116)		this->_hx___backgroundSkin = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___backgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,set_backgroundSkin,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::clearStyle_backgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_e2ffdce0585e9f6d_131_clearStyle_backgroundSkin)
HXLINE( 132)		this->set_backgroundSkin(null());
HXLINE( 133)		return this->get_backgroundSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,clearStyle_backgroundSkin,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::get_disabledBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_e2ffdce0585e9f6d_85_get_disabledBackgroundSkin)
HXDLIN(  85)		return this->_hx___disabledBackgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,get_disabledBackgroundSkin,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::set_disabledBackgroundSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_e2ffdce0585e9f6d_99_set_disabledBackgroundSkin)
HXLINE( 106)		if (!(this->setStyle(HX_("disabledBackgroundSkin",27,5c,3a,d3),null()))) {
HXLINE( 107)			return this->_hx___disabledBackgroundSkin;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___disabledBackgroundSkin,value )) {
HXLINE( 110)			return this->_hx___disabledBackgroundSkin;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_disabledBackgroundSkin_dyn();
HXLINE( 116)		this->_hx___disabledBackgroundSkin = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___disabledBackgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,set_disabledBackgroundSkin,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::clearStyle_disabledBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_e2ffdce0585e9f6d_131_clearStyle_disabledBackgroundSkin)
HXLINE( 132)		this->set_disabledBackgroundSkin(null());
HXLINE( 133)		return this->get_disabledBackgroundSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,clearStyle_disabledBackgroundSkin,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::get_resizeDraggingSkin(){
            	HX_STACKFRAME(&_hx_pos_e2ffdce0585e9f6d_85_get_resizeDraggingSkin)
HXDLIN(  85)		return this->_hx___resizeDraggingSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,get_resizeDraggingSkin,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::set_resizeDraggingSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_e2ffdce0585e9f6d_99_set_resizeDraggingSkin)
HXLINE( 106)		if (!(this->setStyle(HX_("resizeDraggingSkin",00,57,a1,e3),null()))) {
HXLINE( 107)			return this->_hx___resizeDraggingSkin;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___resizeDraggingSkin,value )) {
HXLINE( 110)			return this->_hx___resizeDraggingSkin;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_resizeDraggingSkin_dyn();
HXLINE( 116)		this->_hx___resizeDraggingSkin = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___resizeDraggingSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseDividedBox_obj,set_resizeDraggingSkin,return )

 ::openfl::display::DisplayObject BaseDividedBox_obj::clearStyle_resizeDraggingSkin(){
            	HX_STACKFRAME(&_hx_pos_e2ffdce0585e9f6d_131_clearStyle_resizeDraggingSkin)
HXLINE( 132)		this->set_resizeDraggingSkin(null());
HXLINE( 133)		return this->get_resizeDraggingSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseDividedBox_obj,clearStyle_resizeDraggingSkin,return )

int BaseDividedBox_obj::POINTER_ID_MOUSE;

 ::feathers::utils::DisplayObjectFactory BaseDividedBox_obj::defaultDividerFactory;


::hx::ObjectPtr< BaseDividedBox_obj > BaseDividedBox_obj::__new() {
	::hx::ObjectPtr< BaseDividedBox_obj > __this = new BaseDividedBox_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BaseDividedBox_obj > BaseDividedBox_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BaseDividedBox_obj *__this = (BaseDividedBox_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BaseDividedBox_obj), true, "feathers.controls.supportClasses.BaseDividedBox"));
	*(void **)__this = BaseDividedBox_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BaseDividedBox_obj::BaseDividedBox_obj()
{
}

void BaseDividedBox_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BaseDividedBox);
	HX_MARK_MEMBER_NAME(resizeCursor,"resizeCursor");
	HX_MARK_MEMBER_NAME(_oldDividerMouseCursor,"_oldDividerMouseCursor");
	HX_MARK_MEMBER_NAME(_resizingTouchPointID,"_resizingTouchPointID");
	HX_MARK_MEMBER_NAME(_resizingTouchPointIsMouse,"_resizingTouchPointIsMouse");
	HX_MARK_MEMBER_NAME(_resizingDividerIndex,"_resizingDividerIndex");
	HX_MARK_MEMBER_NAME(_autoSizeMode,"_autoSizeMode");
	HX_MARK_MEMBER_NAME(_currentBackgroundSkin,"_currentBackgroundSkin");
	HX_MARK_MEMBER_NAME(_backgroundSkinMeasurements,"_backgroundSkinMeasurements");
	HX_MARK_MEMBER_NAME(_currentResizeDraggingSkin,"_currentResizeDraggingSkin");
	HX_MARK_MEMBER_NAME(liveDragging,"liveDragging");
	HX_MARK_MEMBER_NAME(_dividerFactory,"_dividerFactory");
	HX_MARK_MEMBER_NAME(items,"items");
	HX_MARK_MEMBER_NAME(dividers,"dividers");
	HX_MARK_MEMBER_NAME(_layoutItems,"_layoutItems");
	HX_MARK_MEMBER_NAME(_displayListBypassEnabled,"_displayListBypassEnabled");
	HX_MARK_MEMBER_NAME(_ignoreChildChanges,"_ignoreChildChanges");
	HX_MARK_MEMBER_NAME(_layoutMeasurements,"_layoutMeasurements");
	HX_MARK_MEMBER_NAME(_layoutResult,"_layoutResult");
	HX_MARK_MEMBER_NAME(layout,"layout");
	HX_MARK_MEMBER_NAME(_xmlContent,"_xmlContent");
	HX_MARK_MEMBER_NAME(_hx___backgroundSkin,"__backgroundSkin");
	HX_MARK_MEMBER_NAME(_hx___disabledBackgroundSkin,"__disabledBackgroundSkin");
	HX_MARK_MEMBER_NAME(_hx___resizeDraggingSkin,"__resizeDraggingSkin");
	 ::feathers::core::FeathersControl_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BaseDividedBox_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(resizeCursor,"resizeCursor");
	HX_VISIT_MEMBER_NAME(_oldDividerMouseCursor,"_oldDividerMouseCursor");
	HX_VISIT_MEMBER_NAME(_resizingTouchPointID,"_resizingTouchPointID");
	HX_VISIT_MEMBER_NAME(_resizingTouchPointIsMouse,"_resizingTouchPointIsMouse");
	HX_VISIT_MEMBER_NAME(_resizingDividerIndex,"_resizingDividerIndex");
	HX_VISIT_MEMBER_NAME(_autoSizeMode,"_autoSizeMode");
	HX_VISIT_MEMBER_NAME(_currentBackgroundSkin,"_currentBackgroundSkin");
	HX_VISIT_MEMBER_NAME(_backgroundSkinMeasurements,"_backgroundSkinMeasurements");
	HX_VISIT_MEMBER_NAME(_currentResizeDraggingSkin,"_currentResizeDraggingSkin");
	HX_VISIT_MEMBER_NAME(liveDragging,"liveDragging");
	HX_VISIT_MEMBER_NAME(_dividerFactory,"_dividerFactory");
	HX_VISIT_MEMBER_NAME(items,"items");
	HX_VISIT_MEMBER_NAME(dividers,"dividers");
	HX_VISIT_MEMBER_NAME(_layoutItems,"_layoutItems");
	HX_VISIT_MEMBER_NAME(_displayListBypassEnabled,"_displayListBypassEnabled");
	HX_VISIT_MEMBER_NAME(_ignoreChildChanges,"_ignoreChildChanges");
	HX_VISIT_MEMBER_NAME(_layoutMeasurements,"_layoutMeasurements");
	HX_VISIT_MEMBER_NAME(_layoutResult,"_layoutResult");
	HX_VISIT_MEMBER_NAME(layout,"layout");
	HX_VISIT_MEMBER_NAME(_xmlContent,"_xmlContent");
	HX_VISIT_MEMBER_NAME(_hx___backgroundSkin,"__backgroundSkin");
	HX_VISIT_MEMBER_NAME(_hx___disabledBackgroundSkin,"__disabledBackgroundSkin");
	HX_VISIT_MEMBER_NAME(_hx___resizeDraggingSkin,"__resizeDraggingSkin");
	 ::feathers::core::FeathersControl_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BaseDividedBox_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"items") ) { return ::hx::Val( items ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"layout") ) { return ::hx::Val( layout ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dividers") ) { return ::hx::Val( dividers ); }
		if (HX_FIELD_EQ(inName,"addChild") ) { return ::hx::Val( addChild_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addItemAt") ) { return ::hx::Val( addItemAt_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"xmlContent") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_xmlContent() ); }
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return ::hx::Val( addChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChildAt") ) { return ::hx::Val( getChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeItem") ) { return ::hx::Val( removeItem_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_xmlContent") ) { return ::hx::Val( _xmlContent ); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return ::hx::Val( removeChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"addRawChild") ) { return ::hx::Val( addRawChild_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resizeCursor") ) { return ::hx::Val( resizeCursor ); }
		if (HX_FIELD_EQ(inName,"autoSizeMode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_autoSizeMode() ); }
		if (HX_FIELD_EQ(inName,"liveDragging") ) { return ::hx::Val( liveDragging ); }
		if (HX_FIELD_EQ(inName,"_layoutItems") ) { return ::hx::Val( _layoutItems ); }
		if (HX_FIELD_EQ(inName,"handleLayout") ) { return ::hx::Val( handleLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"commitResize") ) { return ::hx::Val( commitResize_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_autoSizeMode") ) { return ::hx::Val( _autoSizeMode ); }
		if (HX_FIELD_EQ(inName,"_layoutResult") ) { return ::hx::Val( _layoutResult ); }
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return ::hx::Val( removeChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChildIndex") ) { return ::hx::Val( getChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"setChildIndex") ) { return ::hx::Val( setChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"addRawChildAt") ) { return ::hx::Val( addRawChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRawChildAt") ) { return ::hx::Val( getRawChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"createDivider") ) { return ::hx::Val( createDivider_dyn() ); }
		if (HX_FIELD_EQ(inName,"prepareResize") ) { return ::hx::Val( prepareResize_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"backgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_backgroundSkin() ); }
		if (HX_FIELD_EQ(inName,"dividerFactory") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_dividerFactory() ); }
		if (HX_FIELD_EQ(inName,"get_xmlContent") ) { return ::hx::Val( get_xmlContent_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_xmlContent") ) { return ::hx::Val( set_xmlContent_dyn() ); }
		if (HX_FIELD_EQ(inName,"numRawChildren") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_numRawChildren() ); }
		if (HX_FIELD_EQ(inName,"getChildByName") ) { return ::hx::Val( getChildByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeChildren") ) { return ::hx::Val( removeChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeRawChild") ) { return ::hx::Val( removeRawChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroyDivider") ) { return ::hx::Val( destroyDivider_dyn() ); }
		if (HX_FIELD_EQ(inName,"resizeTouchEnd") ) { return ::hx::Val( resizeTouchEnd_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_dividerFactory") ) { return ::hx::Val( _dividerFactory ); }
		if (HX_FIELD_EQ(inName,"get_numChildren") ) { return ::hx::Val( get_numChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"resizeTouchMove") ) { return ::hx::Val( resizeTouchMove_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_autoSizeMode") ) { return ::hx::Val( get_autoSizeMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSizeMode") ) { return ::hx::Val( set_autoSizeMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeRawChildAt") ) { return ::hx::Val( removeRawChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRawChildIndex") ) { return ::hx::Val( getRawChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRawChildIndex") ) { return ::hx::Val( setRawChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"validateChildren") ) { return ::hx::Val( validateChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"resizeTouchBegin") ) { return ::hx::Val( resizeTouchBegin_dyn() ); }
		if (HX_FIELD_EQ(inName,"__backgroundSkin") ) { return ::hx::Val( _hx___backgroundSkin ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getRawChildByName") ) { return ::hx::Val( getRawChildByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeRawChildren") ) { return ::hx::Val( removeRawChildren_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"resizeDraggingSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_resizeDraggingSkin() ); }
		if (HX_FIELD_EQ(inName,"get_dividerFactory") ) { return ::hx::Val( get_dividerFactory_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_dividerFactory") ) { return ::hx::Val( set_dividerFactory_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numRawChildren") ) { return ::hx::Val( get_numRawChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleLayoutResult") ) { return ::hx::Val( handleLayoutResult_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_backgroundSkin") ) { return ::hx::Val( get_backgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundSkin") ) { return ::hx::Val( set_backgroundSkin_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_ignoreChildChanges") ) { return ::hx::Val( _ignoreChildChanges ); }
		if (HX_FIELD_EQ(inName,"_layoutMeasurements") ) { return ::hx::Val( _layoutMeasurements ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__resizeDraggingSkin") ) { return ::hx::Val( _hx___resizeDraggingSkin ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_resizingTouchPointID") ) { return ::hx::Val( _resizingTouchPointID ); }
		if (HX_FIELD_EQ(inName,"_resizingDividerIndex") ) { return ::hx::Val( _resizingDividerIndex ); }
		if (HX_FIELD_EQ(inName,"refreshBackgroundSkin") ) { return ::hx::Val( refreshBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshViewPortBounds") ) { return ::hx::Val( refreshViewPortBounds_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_oldDividerMouseCursor") ) { return ::hx::Val( _oldDividerMouseCursor ); }
		if (HX_FIELD_EQ(inName,"_currentBackgroundSkin") ) { return ::hx::Val( _currentBackgroundSkin ); }
		if (HX_FIELD_EQ(inName,"disabledBackgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_disabledBackgroundSkin() ); }
		if (HX_FIELD_EQ(inName,"get_resizeDraggingSkin") ) { return ::hx::Val( get_resizeDraggingSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_resizeDraggingSkin") ) { return ::hx::Val( set_resizeDraggingSkin_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"refreshBackgroundLayout") ) { return ::hx::Val( refreshBackgroundLayout_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"getCurrentBackgroundSkin") ) { return ::hx::Val( getCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"addCurrentBackgroundSkin") ) { return ::hx::Val( addCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"__disabledBackgroundSkin") ) { return ::hx::Val( _hx___disabledBackgroundSkin ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_displayListBypassEnabled") ) { return ::hx::Val( _displayListBypassEnabled ); }
		if (HX_FIELD_EQ(inName,"refreshResizeDraggingSkin") ) { return ::hx::Val( refreshResizeDraggingSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_backgroundSkin") ) { return ::hx::Val( clearStyle_backgroundSkin_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_resizingTouchPointIsMouse") ) { return ::hx::Val( _resizingTouchPointIsMouse ); }
		if (HX_FIELD_EQ(inName,"_currentResizeDraggingSkin") ) { return ::hx::Val( _currentResizeDraggingSkin ); }
		if (HX_FIELD_EQ(inName,"get_disabledBackgroundSkin") ) { return ::hx::Val( get_disabledBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_disabledBackgroundSkin") ) { return ::hx::Val( set_disabledBackgroundSkin_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_backgroundSkinMeasurements") ) { return ::hx::Val( _backgroundSkinMeasurements ); }
		if (HX_FIELD_EQ(inName,"removeCurrentBackgroundSkin") ) { return ::hx::Val( removeCurrentBackgroundSkin_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"getCurrentResizeDraggingSkin") ) { return ::hx::Val( getCurrentResizeDraggingSkin_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"clearStyle_resizeDraggingSkin") ) { return ::hx::Val( clearStyle_resizeDraggingSkin_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"removeCurrentResizeDraggingSkin") ) { return ::hx::Val( removeCurrentResizeDraggingSkin_dyn() ); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"clearStyle_disabledBackgroundSkin") ) { return ::hx::Val( clearStyle_disabledBackgroundSkin_dyn() ); }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"baseDividedBox_child_resizeHandler") ) { return ::hx::Val( baseDividedBox_child_resizeHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"baseDividedBox_addedToStageHandler") ) { return ::hx::Val( baseDividedBox_addedToStageHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"baseDividedBox_stage_resizeHandler") ) { return ::hx::Val( baseDividedBox_stage_resizeHandler_dyn() ); }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"baseDividedBox_divider_rollOutHandler") ) { return ::hx::Val( baseDividedBox_divider_rollOutHandler_dyn() ); }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"baseDividedBox_removedFromStageHandler") ) { return ::hx::Val( baseDividedBox_removedFromStageHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"baseDividedBox_divider_rollOverHandler") ) { return ::hx::Val( baseDividedBox_divider_rollOverHandler_dyn() ); }
		break;
	case 39:
		if (HX_FIELD_EQ(inName,"baseDividedBox_divider_mouseDownHandler") ) { return ::hx::Val( baseDividedBox_divider_mouseDownHandler_dyn() ); }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"baseDividedBox_divider_touchBeginHandler") ) { return ::hx::Val( baseDividedBox_divider_touchBeginHandler_dyn() ); }
		break;
	case 43:
		if (HX_FIELD_EQ(inName,"baseDividedBox_divider_stage_mouseUpHandler") ) { return ::hx::Val( baseDividedBox_divider_stage_mouseUpHandler_dyn() ); }
		break;
	case 44:
		if (HX_FIELD_EQ(inName,"baseDividedBox_divider_stage_touchEndHandler") ) { return ::hx::Val( baseDividedBox_divider_stage_touchEndHandler_dyn() ); }
		break;
	case 45:
		if (HX_FIELD_EQ(inName,"baseDividedBox_divider_stage_mouseMoveHandler") ) { return ::hx::Val( baseDividedBox_divider_stage_mouseMoveHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"baseDividedBox_divider_stage_touchMoveHandler") ) { return ::hx::Val( baseDividedBox_divider_stage_touchMoveHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BaseDividedBox_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"POINTER_ID_MOUSE") ) { outValue = ( POINTER_ID_MOUSE ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"defaultDividerFactory") ) { outValue = ( defaultDividerFactory ); return true; }
	}
	return false;
}

::hx::Val BaseDividedBox_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"items") ) { items=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"layout") ) { layout=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dividers") ) { dividers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"xmlContent") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_xmlContent(inValue.Cast< ::Array< ::Dynamic> >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_xmlContent") ) { _xmlContent=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resizeCursor") ) { resizeCursor=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoSizeMode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_autoSizeMode(inValue.Cast<  ::feathers::layout::AutoSizeMode >()) ); }
		if (HX_FIELD_EQ(inName,"liveDragging") ) { liveDragging=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_layoutItems") ) { _layoutItems=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_autoSizeMode") ) { _autoSizeMode=inValue.Cast<  ::feathers::layout::AutoSizeMode >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_layoutResult") ) { _layoutResult=inValue.Cast<  ::feathers::layout::LayoutBoundsResult >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"backgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_backgroundSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"dividerFactory") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_dividerFactory(inValue.Cast<  ::feathers::utils::DisplayObjectFactory >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_dividerFactory") ) { _dividerFactory=inValue.Cast<  ::feathers::utils::DisplayObjectFactory >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__backgroundSkin") ) { _hx___backgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"resizeDraggingSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_resizeDraggingSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_ignoreChildChanges") ) { _ignoreChildChanges=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_layoutMeasurements") ) { _layoutMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__resizeDraggingSkin") ) { _hx___resizeDraggingSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_resizingTouchPointID") ) { _resizingTouchPointID=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_resizingDividerIndex") ) { _resizingDividerIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_oldDividerMouseCursor") ) { _oldDividerMouseCursor=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_currentBackgroundSkin") ) { _currentBackgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disabledBackgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_disabledBackgroundSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__disabledBackgroundSkin") ) { _hx___disabledBackgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_displayListBypassEnabled") ) { _displayListBypassEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_resizingTouchPointIsMouse") ) { _resizingTouchPointIsMouse=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_currentResizeDraggingSkin") ) { _currentResizeDraggingSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_backgroundSkinMeasurements") ) { _backgroundSkinMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BaseDividedBox_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"POINTER_ID_MOUSE") ) { POINTER_ID_MOUSE=ioValue.Cast< int >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"defaultDividerFactory") ) { defaultDividerFactory=ioValue.Cast<  ::feathers::utils::DisplayObjectFactory >(); return true; }
	}
	return false;
}

void BaseDividedBox_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("resizeCursor",ea,4b,f6,22));
	outFields->push(HX_("_oldDividerMouseCursor",4a,b8,6c,82));
	outFields->push(HX_("_resizingTouchPointID",dc,41,25,01));
	outFields->push(HX_("_resizingTouchPointIsMouse",1a,fc,0a,4c));
	outFields->push(HX_("_resizingDividerIndex",29,41,97,dc));
	outFields->push(HX_("_autoSizeMode",32,4a,ee,05));
	outFields->push(HX_("autoSizeMode",53,b7,7f,23));
	outFields->push(HX_("_currentBackgroundSkin",e5,c0,55,58));
	outFields->push(HX_("_backgroundSkinMeasurements",41,46,9b,f8));
	outFields->push(HX_("backgroundSkin",8b,65,6f,20));
	outFields->push(HX_("disabledBackgroundSkin",27,5c,3a,d3));
	outFields->push(HX_("_currentResizeDraggingSkin",5a,67,61,4f));
	outFields->push(HX_("resizeDraggingSkin",00,57,a1,e3));
	outFields->push(HX_("liveDragging",db,e3,cb,84));
	outFields->push(HX_("_dividerFactory",90,2f,74,5e));
	outFields->push(HX_("dividerFactory",f1,e6,13,15));
	outFields->push(HX_("items",00,ac,0c,c2));
	outFields->push(HX_("dividers",7a,23,98,4b));
	outFields->push(HX_("_layoutItems",f7,b2,ff,d8));
	outFields->push(HX_("_displayListBypassEnabled",b8,f0,0d,31));
	outFields->push(HX_("_ignoreChildChanges",18,b7,88,de));
	outFields->push(HX_("_layoutMeasurements",e0,8a,1d,e1));
	outFields->push(HX_("_layoutResult",06,7a,37,06));
	outFields->push(HX_("layout",aa,ae,b8,58));
	outFields->push(HX_("_xmlContent",41,8d,4c,ce));
	outFields->push(HX_("xmlContent",22,c0,c2,fb));
	outFields->push(HX_("numRawChildren",a1,46,be,01));
	outFields->push(HX_("__backgroundSkin",ab,f0,ae,54));
	outFields->push(HX_("__disabledBackgroundSkin",47,07,aa,50));
	outFields->push(HX_("__resizeDraggingSkin",20,f2,d4,c2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BaseDividedBox_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(BaseDividedBox_obj,resizeCursor),HX_("resizeCursor",ea,4b,f6,22)},
	{::hx::fsString,(int)offsetof(BaseDividedBox_obj,_oldDividerMouseCursor),HX_("_oldDividerMouseCursor",4a,b8,6c,82)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BaseDividedBox_obj,_resizingTouchPointID),HX_("_resizingTouchPointID",dc,41,25,01)},
	{::hx::fsBool,(int)offsetof(BaseDividedBox_obj,_resizingTouchPointIsMouse),HX_("_resizingTouchPointIsMouse",1a,fc,0a,4c)},
	{::hx::fsInt,(int)offsetof(BaseDividedBox_obj,_resizingDividerIndex),HX_("_resizingDividerIndex",29,41,97,dc)},
	{::hx::fsObject /*  ::feathers::layout::AutoSizeMode */ ,(int)offsetof(BaseDividedBox_obj,_autoSizeMode),HX_("_autoSizeMode",32,4a,ee,05)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BaseDividedBox_obj,_currentBackgroundSkin),HX_("_currentBackgroundSkin",e5,c0,55,58)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(BaseDividedBox_obj,_backgroundSkinMeasurements),HX_("_backgroundSkinMeasurements",41,46,9b,f8)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BaseDividedBox_obj,_currentResizeDraggingSkin),HX_("_currentResizeDraggingSkin",5a,67,61,4f)},
	{::hx::fsBool,(int)offsetof(BaseDividedBox_obj,liveDragging),HX_("liveDragging",db,e3,cb,84)},
	{::hx::fsObject /*  ::feathers::utils::DisplayObjectFactory */ ,(int)offsetof(BaseDividedBox_obj,_dividerFactory),HX_("_dividerFactory",90,2f,74,5e)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BaseDividedBox_obj,items),HX_("items",00,ac,0c,c2)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BaseDividedBox_obj,dividers),HX_("dividers",7a,23,98,4b)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BaseDividedBox_obj,_layoutItems),HX_("_layoutItems",f7,b2,ff,d8)},
	{::hx::fsBool,(int)offsetof(BaseDividedBox_obj,_displayListBypassEnabled),HX_("_displayListBypassEnabled",b8,f0,0d,31)},
	{::hx::fsBool,(int)offsetof(BaseDividedBox_obj,_ignoreChildChanges),HX_("_ignoreChildChanges",18,b7,88,de)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(BaseDividedBox_obj,_layoutMeasurements),HX_("_layoutMeasurements",e0,8a,1d,e1)},
	{::hx::fsObject /*  ::feathers::layout::LayoutBoundsResult */ ,(int)offsetof(BaseDividedBox_obj,_layoutResult),HX_("_layoutResult",06,7a,37,06)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(BaseDividedBox_obj,layout),HX_("layout",aa,ae,b8,58)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BaseDividedBox_obj,_xmlContent),HX_("_xmlContent",41,8d,4c,ce)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BaseDividedBox_obj,_hx___backgroundSkin),HX_("__backgroundSkin",ab,f0,ae,54)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BaseDividedBox_obj,_hx___disabledBackgroundSkin),HX_("__disabledBackgroundSkin",47,07,aa,50)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(BaseDividedBox_obj,_hx___resizeDraggingSkin),HX_("__resizeDraggingSkin",20,f2,d4,c2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo BaseDividedBox_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &BaseDividedBox_obj::POINTER_ID_MOUSE,HX_("POINTER_ID_MOUSE",83,12,4a,0c)},
	{::hx::fsObject /*  ::feathers::utils::DisplayObjectFactory */ ,(void *) &BaseDividedBox_obj::defaultDividerFactory,HX_("defaultDividerFactory",92,c3,ea,ea)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String BaseDividedBox_obj_sMemberFields[] = {
	HX_("resizeCursor",ea,4b,f6,22),
	HX_("_oldDividerMouseCursor",4a,b8,6c,82),
	HX_("_resizingTouchPointID",dc,41,25,01),
	HX_("_resizingTouchPointIsMouse",1a,fc,0a,4c),
	HX_("_resizingDividerIndex",29,41,97,dc),
	HX_("_autoSizeMode",32,4a,ee,05),
	HX_("get_autoSizeMode",dc,a3,1e,28),
	HX_("set_autoSizeMode",50,91,60,7e),
	HX_("_currentBackgroundSkin",e5,c0,55,58),
	HX_("_backgroundSkinMeasurements",41,46,9b,f8),
	HX_("_currentResizeDraggingSkin",5a,67,61,4f),
	HX_("liveDragging",db,e3,cb,84),
	HX_("_dividerFactory",90,2f,74,5e),
	HX_("get_dividerFactory",ba,c7,ad,b0),
	HX_("set_dividerFactory",2e,fa,5c,8d),
	HX_("items",00,ac,0c,c2),
	HX_("dividers",7a,23,98,4b),
	HX_("_layoutItems",f7,b2,ff,d8),
	HX_("_displayListBypassEnabled",b8,f0,0d,31),
	HX_("_ignoreChildChanges",18,b7,88,de),
	HX_("_layoutMeasurements",e0,8a,1d,e1),
	HX_("_layoutResult",06,7a,37,06),
	HX_("layout",aa,ae,b8,58),
	HX_("_xmlContent",41,8d,4c,ce),
	HX_("get_xmlContent",6b,48,b8,71),
	HX_("set_xmlContent",df,30,d8,91),
	HX_("get_numRawChildren",6a,27,58,9d),
	HX_("get_numChildren",3c,21,62,1d),
	HX_("addChild",bb,cf,16,bf),
	HX_("addChildAt",8e,ad,36,ce),
	HX_("removeChild",b8,86,ed,43),
	HX_("removeChildAt",cb,dd,66,3f),
	HX_("getChildAt",b9,07,0e,b6),
	HX_("getChildIndex",0c,68,02,b9),
	HX_("setChildIndex",18,4a,08,fe),
	HX_("getChildByName",88,b9,73,a3),
	HX_("removeChildren",a3,55,c0,3a),
	HX_("addRawChild",d5,11,d4,d8),
	HX_("addRawChildAt",28,2a,5c,c3),
	HX_("removeRawChild",f8,16,ce,71),
	HX_("removeRawChildAt",0b,fe,bb,12),
	HX_("getRawChildByName",ac,50,96,21),
	HX_("getRawChildAt",dd,3c,85,b5),
	HX_("getRawChildIndex",68,01,06,9e),
	HX_("setRawChildIndex",dc,ee,47,f4),
	HX_("removeRawChildren",63,6d,e7,51),
	HX_("addItemAt",e7,dd,2d,c1),
	HX_("removeItem",77,ff,de,c2),
	HX_("update",09,86,05,87),
	HX_("refreshBackgroundSkin",c6,3c,91,2d),
	HX_("getCurrentBackgroundSkin",2e,6b,dc,9d),
	HX_("addCurrentBackgroundSkin",c3,bb,57,cf),
	HX_("removeCurrentBackgroundSkin",c0,fc,70,a2),
	HX_("refreshResizeDraggingSkin",bb,e7,9e,b4),
	HX_("getCurrentResizeDraggingSkin",23,6a,c5,f6),
	HX_("removeCurrentResizeDraggingSkin",b5,2c,f7,ff),
	HX_("createDivider",3d,33,1a,59),
	HX_("destroyDivider",ff,48,43,dd),
	HX_("refreshViewPortBounds",d6,72,b8,b5),
	HX_("handleLayout",72,d4,e4,a6),
	HX_("handleLayoutResult",ef,92,e3,71),
	HX_("refreshBackgroundLayout",33,b9,01,1e),
	HX_("validateChildren",f5,2b,c3,28),
	HX_("prepareResize",db,be,c1,ce),
	HX_("commitResize",4b,11,71,88),
	HX_("resizeTouchBegin",fe,a4,1a,58),
	HX_("resizeTouchMove",dc,19,6c,6a),
	HX_("resizeTouchEnd",70,ef,cf,50),
	HX_("baseDividedBox_child_resizeHandler",05,a4,81,69),
	HX_("baseDividedBox_addedToStageHandler",99,a4,39,1d),
	HX_("baseDividedBox_removedFromStageHandler",e8,f2,31,75),
	HX_("baseDividedBox_stage_resizeHandler",a7,5c,6e,30),
	HX_("baseDividedBox_divider_rollOverHandler",a5,79,01,ac),
	HX_("baseDividedBox_divider_rollOutHandler",ed,32,18,6a),
	HX_("baseDividedBox_divider_mouseDownHandler",97,be,53,c6),
	HX_("baseDividedBox_divider_stage_mouseMoveHandler",a9,84,ab,ae),
	HX_("baseDividedBox_divider_stage_mouseUpHandler",9f,82,03,f9),
	HX_("baseDividedBox_divider_touchBeginHandler",4c,73,7a,46),
	HX_("baseDividedBox_divider_stage_touchMoveHandler",4f,15,33,8a),
	HX_("baseDividedBox_divider_stage_touchEndHandler",59,cd,0f,75),
	HX_("__backgroundSkin",ab,f0,ae,54),
	HX_("get_backgroundSkin",54,46,09,bc),
	HX_("set_backgroundSkin",c8,78,b8,98),
	HX_("clearStyle_backgroundSkin",46,5a,f8,27),
	HX_("__disabledBackgroundSkin",47,07,aa,50),
	HX_("get_disabledBackgroundSkin",f0,ad,3f,0b),
	HX_("set_disabledBackgroundSkin",64,74,d4,6a),
	HX_("clearStyle_disabledBackgroundSkin",e2,03,2f,d1),
	HX_("__resizeDraggingSkin",20,f2,d4,c2),
	HX_("get_resizeDraggingSkin",49,d0,35,3d),
	HX_("set_resizeDraggingSkin",bd,4c,e1,70),
	HX_("clearStyle_resizeDraggingSkin",3b,c5,a2,c0),
	::String(null()) };

static void BaseDividedBox_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BaseDividedBox_obj::POINTER_ID_MOUSE,"POINTER_ID_MOUSE");
	HX_MARK_MEMBER_NAME(BaseDividedBox_obj::defaultDividerFactory,"defaultDividerFactory");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BaseDividedBox_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BaseDividedBox_obj::POINTER_ID_MOUSE,"POINTER_ID_MOUSE");
	HX_VISIT_MEMBER_NAME(BaseDividedBox_obj::defaultDividerFactory,"defaultDividerFactory");
};

#endif

::hx::Class BaseDividedBox_obj::__mClass;

static ::String BaseDividedBox_obj_sStaticFields[] = {
	HX_("POINTER_ID_MOUSE",83,12,4a,0c),
	HX_("defaultDividerFactory",92,c3,ea,ea),
	::String(null())
};

void BaseDividedBox_obj::__register()
{
	BaseDividedBox_obj _hx_dummy;
	BaseDividedBox_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.supportClasses.BaseDividedBox",8e,8b,25,bf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BaseDividedBox_obj::__GetStatic;
	__mClass->mSetStaticField = &BaseDividedBox_obj::__SetStatic;
	__mClass->mMarkFunc = BaseDividedBox_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BaseDividedBox_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BaseDividedBox_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BaseDividedBox_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BaseDividedBox_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BaseDividedBox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BaseDividedBox_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BaseDividedBox_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_49_boot)
HXDLIN(  49)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("defaultXmlProperty",0b,06,d9,8a),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("xmlContent",22,c0,c2,fb))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_51_boot)
HXDLIN(  51)		POINTER_ID_MOUSE = -1000;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::openfl::display::Sprite _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_181_boot)
HXLINE( 182)			 ::openfl::display::Sprite divider =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 183)			divider->get_graphics()->beginFill(16711935,((Float)0.0));
HXLINE( 184)			divider->get_graphics()->drawRect(((Float)0.0),((Float)0.0),((Float)6.0),((Float)6.0));
HXLINE( 185)			divider->get_graphics()->endFill();
HXLINE( 186)			return divider;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_0b64870ea0f8de5e_181_boot)
HXDLIN( 181)		defaultDividerFactory = ::feathers::utils::DisplayObjectFactory_obj::withFunction( ::Dynamic(new _hx_Closure_0()),null());
            	}
}

} // end namespace feathers
} // end namespace controls
} // end namespace supportClasses
