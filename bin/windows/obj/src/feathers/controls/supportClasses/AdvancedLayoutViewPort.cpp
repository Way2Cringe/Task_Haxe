// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_AdvancedLayoutViewPort
#include <feathers/controls/supportClasses/AdvancedLayoutViewPort.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_IViewPort
#include <feathers/controls/supportClasses/IViewPort.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_InvalidationFlag
#include <feathers/core/InvalidationFlag.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_events_ScrollEvent
#include <feathers/events/ScrollEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayout
#include <feathers/layout/ILayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_IScrollLayout
#include <feathers/layout/IScrollLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ISnapLayout
#include <feathers/layout/ISnapLayout.h>
#endif
#ifndef INCLUDED_feathers_layout_LayoutBoundsResult
#include <feathers/layout/LayoutBoundsResult.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_utils_Scroller
#include <feathers/utils/Scroller.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_339c9bf22ce0a244_26_new,"feathers.controls.supportClasses.AdvancedLayoutViewPort","new",0x7bd0d021,"feathers.controls.supportClasses.AdvancedLayoutViewPort.new","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",26,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_49_get_minVisibleWidth,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_minVisibleWidth",0x9f7161be,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_minVisibleWidth","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",49,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_56_set_minVisibleWidth,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_minVisibleWidth",0xdc0e54ca,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_minVisibleWidth","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",56,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_83_get_maxVisibleWidth,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_maxVisibleWidth",0x438badd0,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_maxVisibleWidth","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",83,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_86_set_maxVisibleWidth,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_maxVisibleWidth",0x8028a0dc,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_maxVisibleWidth","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",86,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_110_get_visibleWidth,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_visibleWidth",0xb642385c,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_visibleWidth","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",110,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_117_set_visibleWidth,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_visibleWidth",0x0c8425d0,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_visibleWidth","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",117,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_136_get_minVisibleHeight,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_minVisibleHeight",0x9a139d2f,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_minVisibleHeight","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",136,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_143_set_minVisibleHeight,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_minVisibleHeight",0x66cb54a3,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_minVisibleHeight","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",143,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_170_get_maxVisibleHeight,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_maxVisibleHeight",0x8cfbe0dd,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_maxVisibleHeight","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",170,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_173_set_maxVisibleHeight,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_maxVisibleHeight",0x59b39851,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_maxVisibleHeight","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",173,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_197_get_visibleHeight,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_visibleHeight",0x79fe90d1,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_visibleHeight","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",197,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_204_set_visibleHeight,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_visibleHeight",0x9d6c68dd,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_visibleHeight","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",204,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_220_get_layout,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_layout",0xd3f908d2,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_layout","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",220,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_223_set_layout,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_layout",0xd776a746,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_layout","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",223,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_254_get_scrollX,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_scrollX",0x8de6bc83,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_scrollX","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",254,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_257_set_scrollX,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_scrollX",0x9853c38f,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_scrollX","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",257,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_274_get_scrollY,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_scrollY",0x8de6bc84,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_scrollY","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",274,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_277_set_scrollY,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_scrollY",0x9853c390,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_scrollY","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",277,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_291_get_snapPositionsX,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_snapPositionsX",0xb560de80,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_snapPositionsX","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",291,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_299_get_snapPositionsY,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_snapPositionsY",0xb560de81,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_snapPositionsY","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",299,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_307_get_scroller,"feathers.controls.supportClasses.AdvancedLayoutViewPort","get_scroller",0x9bfe41e2,"feathers.controls.supportClasses.AdvancedLayoutViewPort.get_scroller","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",307,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_310_set_scroller,"feathers.controls.supportClasses.AdvancedLayoutViewPort","set_scroller",0xb0f76556,"feathers.controls.supportClasses.AdvancedLayoutViewPort.set_scroller","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",310,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_321___default_refreshChildren,"feathers.controls.supportClasses.AdvancedLayoutViewPort","__default_refreshChildren",0xd66a98dd,"feathers.controls.supportClasses.AdvancedLayoutViewPort.__default_refreshChildren","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",321,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_329_update,"feathers.controls.supportClasses.AdvancedLayoutViewPort","update",0x6e0414e8,"feathers.controls.supportClasses.AdvancedLayoutViewPort.update","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",329,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_323_update,"feathers.controls.supportClasses.AdvancedLayoutViewPort","update",0x6e0414e8,"feathers.controls.supportClasses.AdvancedLayoutViewPort.update","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",323,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_349_refreshLayout,"feathers.controls.supportClasses.AdvancedLayoutViewPort","refreshLayout",0x39f3ede6,"feathers.controls.supportClasses.AdvancedLayoutViewPort.refreshLayout","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",349,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_358_refreshLayoutProperties,"feathers.controls.supportClasses.AdvancedLayoutViewPort","refreshLayoutProperties",0x50928979,"feathers.controls.supportClasses.AdvancedLayoutViewPort.refreshLayoutProperties","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",358,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_369_refreshLayoutMeasurements,"feathers.controls.supportClasses.AdvancedLayoutViewPort","refreshLayoutMeasurements",0x06fe2ffd,"feathers.controls.supportClasses.AdvancedLayoutViewPort.refreshLayoutMeasurements","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",369,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_400_handleLayoutResult,"feathers.controls.supportClasses.AdvancedLayoutViewPort","handleLayoutResult",0x662c744e,"feathers.controls.supportClasses.AdvancedLayoutViewPort.handleLayoutResult","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",400,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_425_advancedLayoutViewPort_layout_changeHandler,"feathers.controls.supportClasses.AdvancedLayoutViewPort","advancedLayoutViewPort_layout_changeHandler",0x75f41773,"feathers.controls.supportClasses.AdvancedLayoutViewPort.advancedLayoutViewPort_layout_changeHandler","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",425,0xbf058c2e)
HX_LOCAL_STACK_FRAME(_hx_pos_339c9bf22ce0a244_436_advancedLayoutViewPort_layout_scrollHandler,"feathers.controls.supportClasses.AdvancedLayoutViewPort","advancedLayoutViewPort_layout_scrollHandler",0x87668e76,"feathers.controls.supportClasses.AdvancedLayoutViewPort.advancedLayoutViewPort_layout_scrollHandler","feathers/controls/supportClasses/AdvancedLayoutViewPort.hx",436,0xbf058c2e)
namespace feathers{
namespace controls{
namespace supportClasses{

void AdvancedLayoutViewPort_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_339c9bf22ce0a244_26_new)
HXLINE( 319)		this->_layoutChanged = false;
HXLINE( 318)		this->_layoutActive = false;
HXLINE( 294)		this->_snapPositionsY = null();
HXLINE( 286)		this->_snapPositionsX = null();
HXLINE( 266)		this->_scrollY = ((Float)0.0);
HXLINE( 246)		this->_scrollX = ((Float)0.0);
HXLINE( 244)		this->_ignoreLayoutChanges = false;
HXLINE( 243)		this->_layoutResult =  ::feathers::layout::LayoutBoundsResult_obj::__alloc( HX_CTX );
HXLINE( 242)		this->_layoutMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,null());
HXLINE( 240)		this->_layoutItems = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 215)		this->_layout = null();
HXLINE( 190)		this->_explicitVisibleHeight = null();
HXLINE( 189)		this->_actualVisibleHeight = ((Float)0.0);
HXLINE( 162)		this->_maxVisibleHeight = ::hx::DivByZero(((Float)1.0));
HXLINE( 128)		this->_actualMinVisibleHeight = ((Float)0.0);
HXLINE( 103)		this->_explicitVisibleWidth = null();
HXLINE( 102)		this->_actualVisibleWidth = ((Float)0.0);
HXLINE(  75)		this->_maxVisibleWidth = ::hx::DivByZero(((Float)1.0));
HXLINE(  42)		this->_explicitMinVisibleWidth = null();
HXLINE(  41)		this->_actualMinVisibleWidth = ((Float)0.0);
HXLINE(  28)		super::__construct();
HXLINE(  32)		this->_viewPortBackground =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  33)		this->_viewPortBackground->get_graphics()->beginFill(16711935,((Float)0.0));
HXLINE(  34)		this->_viewPortBackground->get_graphics()->drawRect(((Float)0.0),((Float)0.0),((Float)1.0),((Float)1.0));
HXLINE(  35)		this->_viewPortBackground->get_graphics()->endFill();
HXLINE(  36)		this->addChildAt(this->_viewPortBackground,0);
            	}

Dynamic AdvancedLayoutViewPort_obj::__CreateEmpty() { return new AdvancedLayoutViewPort_obj; }

void *AdvancedLayoutViewPort_obj::_hx_vtable = 0;

Dynamic AdvancedLayoutViewPort_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AdvancedLayoutViewPort_obj > _hx_result = new AdvancedLayoutViewPort_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AdvancedLayoutViewPort_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2d343e6f) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x2d343e6f;
		}
	} else {
		if (inClassId<=(int)0x58123034) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x4033f4be || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x58123034;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

static ::feathers::controls::supportClasses::IViewPort_obj _hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_controls_supportClasses_IViewPort= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_visible,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMinWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMinHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMaxWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMaxHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_minWidth,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_minWidth,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_minHeight,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_minHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_maxWidth,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_maxWidth,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_maxHeight,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_maxHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMinWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMinHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMaxWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMaxHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_visibleWidth,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_visibleWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_visibleHeight,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_visibleHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_minVisibleWidth,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_minVisibleWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_minVisibleHeight,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_minVisibleHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_maxVisibleWidth,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_maxVisibleWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_maxVisibleHeight,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_maxVisibleHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scrollX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scrollX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scrollY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scrollY,
};

static ::openfl::events::IEventDispatcher_obj _hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::willTrigger,
};

static ::feathers::core::IMeasureObject_obj _hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IMeasureObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_visible,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMinWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMinHeight,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMaxWidth,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_explicitMaxHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_minWidth,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_minWidth,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_minHeight,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_minHeight,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_maxWidth,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_maxWidth,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_maxHeight,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_maxHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMinWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMinHeight,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMaxWidth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::resetMaxHeight,
};

static ::feathers::core::IValidating_obj _hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IValidating= {
	( int (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_depth,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::validateNow,
};

static ::feathers::core::IUIControl_obj _hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IUIControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_enabled,
	( ::String (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_toolTip,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_toolTip,
	( void (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::initializeNow,
};

static ::feathers::core::IDisplayObject_obj _hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IDisplayObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::set_visible,
};

void *AdvancedLayoutViewPort_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd5cd7712: return &_hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_controls_supportClasses_IViewPort;
		case (int)0x87530281: return &_hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_openfl_events_IEventDispatcher;
		case (int)0xcfc32883: return &_hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IMeasureObject;
		case (int)0x64d4b3cd: return &_hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IValidating;
		case (int)0x2696a04f: return &_hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IUIControl;
		case (int)0x3a979a67: return &_hx_feathers_controls_supportClasses_AdvancedLayoutViewPort__hx_feathers_core_IDisplayObject;
	}
	return super::_hx_getInterface(inHash);
}

 ::Dynamic AdvancedLayoutViewPort_obj::get_minVisibleWidth(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_49_get_minVisibleWidth)
HXLINE(  50)		if (::hx::IsNull( this->_explicitMinVisibleWidth )) {
HXLINE(  51)			return this->_actualMinVisibleWidth;
            		}
HXLINE(  53)		return this->_explicitMinVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_minVisibleWidth,return )

 ::Dynamic AdvancedLayoutViewPort_obj::set_minVisibleWidth( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_56_set_minVisibleWidth)
HXLINE(  57)		if (::hx::IsEq( this->_explicitMinVisibleWidth,value )) {
HXLINE(  58)			return this->_explicitMinVisibleWidth;
            		}
HXLINE(  60)		 ::Dynamic oldValue = this->_explicitMinVisibleWidth;
HXLINE(  61)		this->_explicitMinVisibleWidth = value;
HXLINE(  62)		if (::hx::IsNull( value )) {
HXLINE(  63)			this->_actualMinVisibleWidth = ((Float)0.0);
HXLINE(  64)			this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            		}
            		else {
HXLINE(  66)			this->_actualMinVisibleWidth = ( (Float)(value) );
HXLINE(  67)			bool _hx_tmp;
HXDLIN(  67)			if (::hx::IsNull( this->_explicitVisibleWidth )) {
HXLINE(  67)				if (!(::hx::IsLess( this->_actualVisibleWidth,value ))) {
HXLINE(  67)					_hx_tmp = ::hx::IsEq( this->_actualVisibleWidth,oldValue );
            				}
            				else {
HXLINE(  67)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(  67)				_hx_tmp = false;
            			}
HXDLIN(  67)			if (_hx_tmp) {
HXLINE(  69)				this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            			}
            		}
HXLINE(  72)		return this->_explicitMinVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_minVisibleWidth,return )

 ::Dynamic AdvancedLayoutViewPort_obj::get_maxVisibleWidth(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_83_get_maxVisibleWidth)
HXDLIN(  83)		return this->_maxVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_maxVisibleWidth,return )

 ::Dynamic AdvancedLayoutViewPort_obj::set_maxVisibleWidth( ::Dynamic value){
            	HX_GC_STACKFRAME(&_hx_pos_339c9bf22ce0a244_86_set_maxVisibleWidth)
HXLINE(  87)		if (::hx::IsEq( this->_maxVisibleWidth,value )) {
HXLINE(  88)			return this->_maxVisibleWidth;
            		}
HXLINE(  90)		if (::hx::IsNull( value )) {
HXLINE(  91)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("maxVisibleWidth cannot be null",0f,a6,fe,b9)));
            		}
HXLINE(  93)		 ::Dynamic oldValue = this->_maxVisibleWidth;
HXLINE(  94)		this->_maxVisibleWidth = value;
HXLINE(  95)		bool _hx_tmp;
HXDLIN(  95)		if (::hx::IsNull( this->_explicitVisibleWidth )) {
HXLINE(  95)			if (!(::hx::IsGreater( this->_actualVisibleWidth,value ))) {
HXLINE(  95)				_hx_tmp = ::hx::IsEq( this->_actualVisibleWidth,oldValue );
            			}
            			else {
HXLINE(  95)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(  95)			_hx_tmp = false;
            		}
HXDLIN(  95)		if (_hx_tmp) {
HXLINE(  97)			this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            		}
HXLINE(  99)		return this->_maxVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_maxVisibleWidth,return )

 ::Dynamic AdvancedLayoutViewPort_obj::get_visibleWidth(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_110_get_visibleWidth)
HXLINE( 111)		if (::hx::IsNull( this->_explicitVisibleWidth )) {
HXLINE( 112)			return this->_actualVisibleWidth;
            		}
HXLINE( 114)		return this->_explicitVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_visibleWidth,return )

 ::Dynamic AdvancedLayoutViewPort_obj::set_visibleWidth( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_117_set_visibleWidth)
HXLINE( 118)		if (::hx::IsEq( this->_explicitVisibleWidth,value )) {
HXLINE( 119)			return this->_explicitVisibleWidth;
            		}
HXLINE( 121)		this->_explicitVisibleWidth = value;
HXLINE( 122)		if (::hx::IsNotEq( this->_actualVisibleWidth,value )) {
HXLINE( 123)			this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            		}
HXLINE( 125)		return this->_explicitVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_visibleWidth,return )

 ::Dynamic AdvancedLayoutViewPort_obj::get_minVisibleHeight(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_136_get_minVisibleHeight)
HXLINE( 137)		if (::hx::IsNull( this->_explicitMinVisibleHeight )) {
HXLINE( 138)			return this->_actualMinVisibleHeight;
            		}
HXLINE( 140)		return this->_explicitMinVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_minVisibleHeight,return )

 ::Dynamic AdvancedLayoutViewPort_obj::set_minVisibleHeight( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_143_set_minVisibleHeight)
HXLINE( 144)		if (::hx::IsEq( this->_explicitMinVisibleHeight,value )) {
HXLINE( 145)			return this->_explicitMinVisibleHeight;
            		}
HXLINE( 147)		 ::Dynamic oldValue = this->_explicitMinVisibleHeight;
HXLINE( 148)		this->_explicitMinVisibleHeight = value;
HXLINE( 149)		if (::hx::IsNull( value )) {
HXLINE( 150)			this->_actualMinVisibleHeight = ((Float)0.0);
HXLINE( 151)			this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            		}
            		else {
HXLINE( 153)			this->_actualMinVisibleHeight = ( (Float)(value) );
HXLINE( 154)			bool _hx_tmp;
HXDLIN( 154)			if (::hx::IsNull( this->_explicitVisibleHeight )) {
HXLINE( 154)				if (!(::hx::IsLess( this->_actualVisibleHeight,value ))) {
HXLINE( 154)					_hx_tmp = ::hx::IsEq( this->_actualVisibleHeight,oldValue );
            				}
            				else {
HXLINE( 154)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 154)				_hx_tmp = false;
            			}
HXDLIN( 154)			if (_hx_tmp) {
HXLINE( 156)				this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            			}
            		}
HXLINE( 159)		return this->_explicitMinVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_minVisibleHeight,return )

 ::Dynamic AdvancedLayoutViewPort_obj::get_maxVisibleHeight(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_170_get_maxVisibleHeight)
HXDLIN( 170)		return this->_maxVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_maxVisibleHeight,return )

 ::Dynamic AdvancedLayoutViewPort_obj::set_maxVisibleHeight( ::Dynamic value){
            	HX_GC_STACKFRAME(&_hx_pos_339c9bf22ce0a244_173_set_maxVisibleHeight)
HXLINE( 174)		if (::hx::IsEq( this->_maxVisibleHeight,value )) {
HXLINE( 175)			return this->_maxVisibleHeight;
            		}
HXLINE( 177)		if (::hx::IsNull( value )) {
HXLINE( 178)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("maxVisibleHeight cannot be null",f2,2a,d1,66)));
            		}
HXLINE( 180)		 ::Dynamic oldValue = this->_maxVisibleHeight;
HXLINE( 181)		this->_maxVisibleHeight = value;
HXLINE( 182)		bool _hx_tmp;
HXDLIN( 182)		if (::hx::IsNull( this->_explicitVisibleHeight )) {
HXLINE( 182)			if (!(::hx::IsGreater( this->_actualVisibleHeight,value ))) {
HXLINE( 182)				_hx_tmp = ::hx::IsEq( this->_actualVisibleHeight,oldValue );
            			}
            			else {
HXLINE( 182)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 182)			_hx_tmp = false;
            		}
HXDLIN( 182)		if (_hx_tmp) {
HXLINE( 184)			this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            		}
HXLINE( 186)		return this->_maxVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_maxVisibleHeight,return )

 ::Dynamic AdvancedLayoutViewPort_obj::get_visibleHeight(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_197_get_visibleHeight)
HXLINE( 198)		if (::hx::IsNull( this->_explicitVisibleHeight )) {
HXLINE( 199)			return this->_actualVisibleHeight;
            		}
HXLINE( 201)		return this->_explicitVisibleHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_visibleHeight,return )

 ::Dynamic AdvancedLayoutViewPort_obj::set_visibleHeight( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_204_set_visibleHeight)
HXLINE( 205)		if (::hx::IsEq( this->_explicitVisibleHeight,value )) {
HXLINE( 206)			return this->_explicitVisibleHeight;
            		}
HXLINE( 208)		this->_explicitVisibleHeight = value;
HXLINE( 209)		if (::hx::IsNotEq( this->_actualVisibleHeight,value )) {
HXLINE( 210)			this->setInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
            		}
HXLINE( 212)		return this->_explicitVisibleWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_visibleHeight,return )

::Dynamic AdvancedLayoutViewPort_obj::get_layout(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_220_get_layout)
HXDLIN( 220)		return this->_layout;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_layout,return )

::Dynamic AdvancedLayoutViewPort_obj::set_layout(::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_223_set_layout)
HXLINE( 224)		if (::hx::IsInstanceEq( this->_layout,value )) {
HXLINE( 225)			return this->_layout;
            		}
HXLINE( 227)		if (::hx::IsNotNull( this->_layout )) {
HXLINE( 228)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->_layout,HX_("change",70,91,72,b7),this->advancedLayoutViewPort_layout_changeHandler_dyn(),null());
HXLINE( 229)			::openfl::events::IEventDispatcher_obj::removeEventListener(this->_layout,HX_("scroll",0d,d8,64,47),this->advancedLayoutViewPort_layout_scrollHandler_dyn(),null());
            		}
HXLINE( 231)		this->_layout = value;
HXLINE( 232)		if (::hx::IsNotNull( this->_layout )) {
HXLINE( 233)			::openfl::events::IEventDispatcher_obj::addEventListener(this->_layout,HX_("change",70,91,72,b7),this->advancedLayoutViewPort_layout_changeHandler_dyn(),null(),null(),null());
HXLINE( 234)			::openfl::events::IEventDispatcher_obj::addEventListener(this->_layout,HX_("scroll",0d,d8,64,47),this->advancedLayoutViewPort_layout_scrollHandler_dyn(),null(),null(),null());
            		}
HXLINE( 236)		this->setInvalid(::feathers::core::InvalidationFlag_obj::LAYOUT_dyn());
HXLINE( 237)		return this->_layout;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_layout,return )

Float AdvancedLayoutViewPort_obj::get_scrollX(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_254_get_scrollX)
HXDLIN( 254)		return this->_scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_scrollX,return )

Float AdvancedLayoutViewPort_obj::set_scrollX(Float value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_257_set_scrollX)
HXLINE( 258)		if ((this->_scrollX == value)) {
HXLINE( 259)			return this->_scrollX;
            		}
HXLINE( 261)		this->_scrollX = value;
HXLINE( 262)		this->setInvalid(::feathers::core::InvalidationFlag_obj::SCROLL_dyn());
HXLINE( 263)		return this->_scrollX;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_scrollX,return )

Float AdvancedLayoutViewPort_obj::get_scrollY(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_274_get_scrollY)
HXDLIN( 274)		return this->_scrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_scrollY,return )

Float AdvancedLayoutViewPort_obj::set_scrollY(Float value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_277_set_scrollY)
HXLINE( 278)		if ((this->_scrollY == value)) {
HXLINE( 279)			return this->_scrollY;
            		}
HXLINE( 281)		this->_scrollY = value;
HXLINE( 282)		this->setInvalid(::feathers::core::InvalidationFlag_obj::SCROLL_dyn());
HXLINE( 283)		return this->_scrollY;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_scrollY,return )

::Array< Float > AdvancedLayoutViewPort_obj::get_snapPositionsX(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_291_get_snapPositionsX)
HXDLIN( 291)		return this->_snapPositionsX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_snapPositionsX,return )

::Array< Float > AdvancedLayoutViewPort_obj::get_snapPositionsY(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_299_get_snapPositionsY)
HXDLIN( 299)		return this->_snapPositionsY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_snapPositionsY,return )

 ::feathers::utils::Scroller AdvancedLayoutViewPort_obj::get_scroller(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_307_get_scroller)
HXDLIN( 307)		return this->_scroller;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,get_scroller,return )

 ::feathers::utils::Scroller AdvancedLayoutViewPort_obj::set_scroller( ::feathers::utils::Scroller value){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_310_set_scroller)
HXLINE( 311)		if (::hx::IsInstanceEq( this->_scroller,value )) {
HXLINE( 312)			return this->_scroller;
            		}
HXLINE( 314)		this->_scroller = value;
HXLINE( 315)		return this->_scroller;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,set_scroller,return )

HX_BEGIN_DEFAULT_FUNC(__default_refreshChildren,AdvancedLayoutViewPort_obj)
void _hx_run(::Array< ::Dynamic> items){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_321___default_refreshChildren)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

void AdvancedLayoutViewPort_obj::update(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::feathers::controls::supportClasses::AdvancedLayoutViewPort,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_339c9bf22ce0a244_329_update)
HXLINE( 330)			_gthis->_layoutActive = true;
HXLINE( 331)			int loopCount = 0;
HXLINE( 332)			do {
HXLINE( 333)				_gthis->_layoutChanged = false;
HXLINE( 334)				_gthis->refreshLayout();
HXLINE( 335)				_gthis->_invalidationFlags->clear();
HXLINE( 336)				_gthis->_allInvalid = false;
HXLINE( 337)				loopCount = (loopCount + 1);
HXLINE( 338)				if ((loopCount >= 10)) {
HXLINE( 339)					_gthis->_layoutActive = false;
HXLINE( 340)					::String parentClassName = ::Type_obj::getClassName(::Type_obj::getClass(_gthis->parent));
HXLINE( 341)					::String layoutClassName;
HXDLIN( 341)					if (::hx::IsNotNull( _gthis->_layout )) {
HXLINE( 341)						layoutClassName = ::Type_obj::getClassName(::Type_obj::getClass(_gthis->_layout));
            					}
            					else {
HXLINE( 341)						layoutClassName = HX_("The layout",99,8a,d0,e6);
            					}
HXLINE( 342)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,((((HX_("",00,00,00,00) + parentClassName) + HX_(" is stuck in an infinite loop during layout. ",79,1b,bc,a0)) + layoutClassName) + HX_(" may be dispatching Event.CHANGE too frequently.",c5,2a,05,d8))));
            				}
            			} while(_gthis->_layoutChanged);
;
HXLINE( 345)			_gthis->_layoutActive = false;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_323_update)
HXDLIN( 323)		 ::feathers::controls::supportClasses::AdvancedLayoutViewPort _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 324)		this->refreshLayoutMeasurements();
HXLINE( 325)		this->refreshLayoutProperties();
HXLINE( 329)		this->runWithInvalidationFlagsOnly( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


void AdvancedLayoutViewPort_obj::refreshLayout(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_349_refreshLayout)
HXLINE( 350)		this->refreshChildren(this->_layoutItems);
HXLINE( 351)		this->_layoutResult->reset();
HXLINE( 352)		if (::hx::IsNotNull( this->_layout )) {
HXLINE( 353)			::feathers::layout::ILayout_obj::layout(this->_layout,this->_layoutItems,this->_layoutMeasurements,this->_layoutResult);
            		}
HXLINE( 355)		this->handleLayoutResult();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,refreshLayout,(void))

void AdvancedLayoutViewPort_obj::refreshLayoutProperties(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_358_refreshLayoutProperties)
HXLINE( 359)		bool oldIgnoreLayoutChanges = this->_ignoreLayoutChanges;
HXLINE( 360)		this->_ignoreLayoutChanges = true;
HXLINE( 361)		if (::Std_obj::isOfType(this->_layout,::hx::ClassOf< ::feathers::layout::IScrollLayout >())) {
HXLINE( 362)			::Dynamic scrollLayout = this->_layout;
HXLINE( 363)			::feathers::layout::IScrollLayout_obj::set_scrollX(scrollLayout,this->_scrollX);
HXLINE( 364)			::feathers::layout::IScrollLayout_obj::set_scrollY(scrollLayout,this->_scrollY);
            		}
HXLINE( 366)		this->_ignoreLayoutChanges = oldIgnoreLayoutChanges;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,refreshLayoutProperties,(void))

void AdvancedLayoutViewPort_obj::refreshLayoutMeasurements(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_369_refreshLayoutMeasurements)
HXLINE( 370)		bool needsMinWidth = ::hx::IsNull( this->_explicitMinVisibleWidth );
HXLINE( 371)		bool needsMinHeight = ::hx::IsNull( this->_explicitMinVisibleHeight );
HXLINE( 372)		bool needsMaxWidth = ::hx::IsNull( this->_maxVisibleWidth );
HXLINE( 373)		bool needsMaxHeight = ::hx::IsNull( this->_maxVisibleHeight );
HXLINE( 375)		this->_layoutMeasurements->width = this->_explicitVisibleWidth;
HXLINE( 376)		this->_layoutMeasurements->height = this->_explicitVisibleHeight;
HXLINE( 378)		 ::Dynamic viewPortMinWidth = this->_explicitMinVisibleWidth;
HXLINE( 379)		if (needsMinWidth) {
HXLINE( 380)			viewPortMinWidth = ((Float)0.0);
            		}
HXLINE( 382)		 ::Dynamic viewPortMinHeight = this->_explicitMinVisibleHeight;
HXLINE( 383)		if (needsMinHeight) {
HXLINE( 384)			viewPortMinHeight = ((Float)0.0);
            		}
HXLINE( 386)		 ::Dynamic viewPortMaxWidth = this->_maxVisibleWidth;
HXLINE( 387)		if (needsMaxWidth) {
HXLINE( 388)			viewPortMaxWidth = ::hx::DivByZero(((Float)1.0));
            		}
HXLINE( 390)		 ::Dynamic viewPortMaxHeight = this->_maxVisibleHeight;
HXLINE( 391)		if (needsMaxHeight) {
HXLINE( 392)			viewPortMaxHeight = ::hx::DivByZero(((Float)1.0));
            		}
HXLINE( 394)		this->_layoutMeasurements->minWidth = viewPortMinWidth;
HXLINE( 395)		this->_layoutMeasurements->minHeight = viewPortMinHeight;
HXLINE( 396)		this->_layoutMeasurements->maxWidth = viewPortMaxWidth;
HXLINE( 397)		this->_layoutMeasurements->maxHeight = viewPortMaxHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,refreshLayoutMeasurements,(void))

void AdvancedLayoutViewPort_obj::handleLayoutResult(){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_400_handleLayoutResult)
HXLINE( 401)		this->saveMeasurements(this->_layoutResult->contentWidth,this->_layoutResult->contentHeight,this->_layoutResult->contentMinWidth,this->_layoutResult->contentMinHeight,null(),null());
HXLINE( 403)		Float viewPortWidth = this->_layoutResult->viewPortWidth;
HXLINE( 404)		Float viewPortHeight = this->_layoutResult->viewPortHeight;
HXLINE( 405)		this->_actualVisibleWidth = viewPortWidth;
HXLINE( 406)		this->_actualVisibleHeight = viewPortHeight;
HXLINE( 407)		this->_actualMinVisibleWidth = this->_layoutResult->contentMinWidth;
HXLINE( 408)		this->_actualMinVisibleHeight = this->_layoutResult->contentMinHeight;
HXLINE( 410)		 ::openfl::display::Sprite _hx_tmp = this->_viewPortBackground;
HXDLIN( 410)		_hx_tmp->set_x(::Math_obj::min(this->get_scrollX(),((Float)0.0)));
HXLINE( 411)		 ::openfl::display::Sprite _hx_tmp1 = this->_viewPortBackground;
HXDLIN( 411)		_hx_tmp1->set_y(::Math_obj::min(this->get_scrollY(),((Float)0.0)));
HXLINE( 412)		this->_viewPortBackground->set_width(::Math_obj::max(this->actualWidth,this->_actualVisibleWidth));
HXLINE( 413)		this->_viewPortBackground->set_height(::Math_obj::max(this->actualHeight,this->_actualVisibleHeight));
HXLINE( 415)		if (::Std_obj::isOfType(this->get_layout(),::hx::ClassOf< ::feathers::layout::ISnapLayout >())) {
HXLINE( 416)			::Dynamic snapLayout = this->get_layout();
HXLINE( 417)			this->_snapPositionsX = ::feathers::layout::ISnapLayout_obj::getSnapPositionsX(snapLayout,this->_layoutItems,this->_actualVisibleWidth,this->_actualVisibleHeight,this->_snapPositionsX);
HXLINE( 418)			this->_snapPositionsY = ::feathers::layout::ISnapLayout_obj::getSnapPositionsY(snapLayout,this->_layoutItems,this->_actualVisibleWidth,this->_actualVisibleHeight,this->_snapPositionsY);
            		}
            		else {
HXLINE( 420)			this->_snapPositionsX = null();
HXLINE( 421)			this->_snapPositionsY = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdvancedLayoutViewPort_obj,handleLayoutResult,(void))

void AdvancedLayoutViewPort_obj::advancedLayoutViewPort_layout_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_425_advancedLayoutViewPort_layout_changeHandler)
HXLINE( 426)		if (this->_ignoreLayoutChanges) {
HXLINE( 427)			return;
            		}
HXLINE( 429)		if (this->_layoutActive) {
HXLINE( 430)			this->_layoutChanged = true;
HXLINE( 431)			return;
            		}
HXLINE( 433)		this->setInvalid(::feathers::core::InvalidationFlag_obj::LAYOUT_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,advancedLayoutViewPort_layout_changeHandler,(void))

void AdvancedLayoutViewPort_obj::advancedLayoutViewPort_layout_scrollHandler( ::feathers::events::ScrollEvent event){
            	HX_STACKFRAME(&_hx_pos_339c9bf22ce0a244_436_advancedLayoutViewPort_layout_scrollHandler)
HXLINE( 437)		bool _hx_tmp;
HXDLIN( 437)		if (::hx::IsNotNull( this->_scroller )) {
HXLINE( 437)			_hx_tmp = !(this->_scroller->get_scrolling());
            		}
            		else {
HXLINE( 437)			_hx_tmp = true;
            		}
HXDLIN( 437)		if (_hx_tmp) {
HXLINE( 438)			return;
            		}
HXLINE( 440)		this->_scroller->applyLayoutShift(event->x,event->y);
HXLINE( 441)		if (this->_layoutActive) {
HXLINE( 442)			this->_layoutChanged = true;
HXLINE( 443)			return;
            		}
HXLINE( 445)		this->setInvalid(::feathers::core::InvalidationFlag_obj::LAYOUT_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdvancedLayoutViewPort_obj,advancedLayoutViewPort_layout_scrollHandler,(void))


void AdvancedLayoutViewPort_obj::__alloc_dynamic_functions(::hx::Ctx *_hx_ctx,AdvancedLayoutViewPort_obj *_hx_obj) {
	if (!_hx_obj->refreshChildren.mPtr) _hx_obj->refreshChildren = new __default_refreshChildren(_hx_obj);
}
::hx::ObjectPtr< AdvancedLayoutViewPort_obj > AdvancedLayoutViewPort_obj::__new() {
	::hx::ObjectPtr< AdvancedLayoutViewPort_obj > __this = new AdvancedLayoutViewPort_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< AdvancedLayoutViewPort_obj > AdvancedLayoutViewPort_obj::__alloc(::hx::Ctx *_hx_ctx) {
	AdvancedLayoutViewPort_obj *__this = (AdvancedLayoutViewPort_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AdvancedLayoutViewPort_obj), true, "feathers.controls.supportClasses.AdvancedLayoutViewPort"));
	*(void **)__this = AdvancedLayoutViewPort_obj::_hx_vtable;
	feathers::controls::supportClasses::AdvancedLayoutViewPort_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct();
	return __this;
}

AdvancedLayoutViewPort_obj::AdvancedLayoutViewPort_obj()
{
	refreshChildren = new __default_refreshChildren(this);
}

void AdvancedLayoutViewPort_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AdvancedLayoutViewPort);
	HX_MARK_MEMBER_NAME(_viewPortBackground,"_viewPortBackground");
	HX_MARK_MEMBER_NAME(_actualMinVisibleWidth,"_actualMinVisibleWidth");
	HX_MARK_MEMBER_NAME(_explicitMinVisibleWidth,"_explicitMinVisibleWidth");
	HX_MARK_MEMBER_NAME(_maxVisibleWidth,"_maxVisibleWidth");
	HX_MARK_MEMBER_NAME(_actualVisibleWidth,"_actualVisibleWidth");
	HX_MARK_MEMBER_NAME(_explicitVisibleWidth,"_explicitVisibleWidth");
	HX_MARK_MEMBER_NAME(_actualMinVisibleHeight,"_actualMinVisibleHeight");
	HX_MARK_MEMBER_NAME(_explicitMinVisibleHeight,"_explicitMinVisibleHeight");
	HX_MARK_MEMBER_NAME(_maxVisibleHeight,"_maxVisibleHeight");
	HX_MARK_MEMBER_NAME(_actualVisibleHeight,"_actualVisibleHeight");
	HX_MARK_MEMBER_NAME(_explicitVisibleHeight,"_explicitVisibleHeight");
	HX_MARK_MEMBER_NAME(_layout,"_layout");
	HX_MARK_MEMBER_NAME(_layoutItems,"_layoutItems");
	HX_MARK_MEMBER_NAME(_layoutMeasurements,"_layoutMeasurements");
	HX_MARK_MEMBER_NAME(_layoutResult,"_layoutResult");
	HX_MARK_MEMBER_NAME(_ignoreLayoutChanges,"_ignoreLayoutChanges");
	HX_MARK_MEMBER_NAME(_scrollX,"_scrollX");
	HX_MARK_MEMBER_NAME(_scrollY,"_scrollY");
	HX_MARK_MEMBER_NAME(_snapPositionsX,"_snapPositionsX");
	HX_MARK_MEMBER_NAME(_snapPositionsY,"_snapPositionsY");
	HX_MARK_MEMBER_NAME(_scroller,"_scroller");
	HX_MARK_MEMBER_NAME(_layoutActive,"_layoutActive");
	HX_MARK_MEMBER_NAME(_layoutChanged,"_layoutChanged");
	HX_MARK_MEMBER_NAME(refreshChildren,"refreshChildren");
	 ::feathers::core::FeathersControl_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AdvancedLayoutViewPort_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_viewPortBackground,"_viewPortBackground");
	HX_VISIT_MEMBER_NAME(_actualMinVisibleWidth,"_actualMinVisibleWidth");
	HX_VISIT_MEMBER_NAME(_explicitMinVisibleWidth,"_explicitMinVisibleWidth");
	HX_VISIT_MEMBER_NAME(_maxVisibleWidth,"_maxVisibleWidth");
	HX_VISIT_MEMBER_NAME(_actualVisibleWidth,"_actualVisibleWidth");
	HX_VISIT_MEMBER_NAME(_explicitVisibleWidth,"_explicitVisibleWidth");
	HX_VISIT_MEMBER_NAME(_actualMinVisibleHeight,"_actualMinVisibleHeight");
	HX_VISIT_MEMBER_NAME(_explicitMinVisibleHeight,"_explicitMinVisibleHeight");
	HX_VISIT_MEMBER_NAME(_maxVisibleHeight,"_maxVisibleHeight");
	HX_VISIT_MEMBER_NAME(_actualVisibleHeight,"_actualVisibleHeight");
	HX_VISIT_MEMBER_NAME(_explicitVisibleHeight,"_explicitVisibleHeight");
	HX_VISIT_MEMBER_NAME(_layout,"_layout");
	HX_VISIT_MEMBER_NAME(_layoutItems,"_layoutItems");
	HX_VISIT_MEMBER_NAME(_layoutMeasurements,"_layoutMeasurements");
	HX_VISIT_MEMBER_NAME(_layoutResult,"_layoutResult");
	HX_VISIT_MEMBER_NAME(_ignoreLayoutChanges,"_ignoreLayoutChanges");
	HX_VISIT_MEMBER_NAME(_scrollX,"_scrollX");
	HX_VISIT_MEMBER_NAME(_scrollY,"_scrollY");
	HX_VISIT_MEMBER_NAME(_snapPositionsX,"_snapPositionsX");
	HX_VISIT_MEMBER_NAME(_snapPositionsY,"_snapPositionsY");
	HX_VISIT_MEMBER_NAME(_scroller,"_scroller");
	HX_VISIT_MEMBER_NAME(_layoutActive,"_layoutActive");
	HX_VISIT_MEMBER_NAME(_layoutChanged,"_layoutChanged");
	HX_VISIT_MEMBER_NAME(refreshChildren,"refreshChildren");
	 ::feathers::core::FeathersControl_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val AdvancedLayoutViewPort_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"layout") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_layout() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_layout") ) { return ::hx::Val( _layout ); }
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollX() ); }
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scrollY() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_scrollX") ) { return ::hx::Val( _scrollX ); }
		if (HX_FIELD_EQ(inName,"_scrollY") ) { return ::hx::Val( _scrollY ); }
		if (HX_FIELD_EQ(inName,"scroller") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scroller() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_scroller") ) { return ::hx::Val( _scroller ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_layout") ) { return ::hx::Val( get_layout_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_layout") ) { return ::hx::Val( set_layout_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_scrollX") ) { return ::hx::Val( get_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollX") ) { return ::hx::Val( set_scrollX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollY") ) { return ::hx::Val( get_scrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollY") ) { return ::hx::Val( set_scrollY_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_visibleWidth() ); }
		if (HX_FIELD_EQ(inName,"_layoutItems") ) { return ::hx::Val( _layoutItems ); }
		if (HX_FIELD_EQ(inName,"get_scroller") ) { return ::hx::Val( get_scroller_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scroller") ) { return ::hx::Val( set_scroller_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_visibleHeight() ); }
		if (HX_FIELD_EQ(inName,"_layoutResult") ) { return ::hx::Val( _layoutResult ); }
		if (HX_FIELD_EQ(inName,"_layoutActive") ) { return ::hx::Val( _layoutActive ); }
		if (HX_FIELD_EQ(inName,"refreshLayout") ) { return ::hx::Val( refreshLayout_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"snapPositionsX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_snapPositionsX() ); }
		if (HX_FIELD_EQ(inName,"snapPositionsY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_snapPositionsY() ); }
		if (HX_FIELD_EQ(inName,"_layoutChanged") ) { return ::hx::Val( _layoutChanged ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"minVisibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_minVisibleWidth() ); }
		if (HX_FIELD_EQ(inName,"maxVisibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxVisibleWidth() ); }
		if (HX_FIELD_EQ(inName,"_snapPositionsX") ) { return ::hx::Val( _snapPositionsX ); }
		if (HX_FIELD_EQ(inName,"_snapPositionsY") ) { return ::hx::Val( _snapPositionsY ); }
		if (HX_FIELD_EQ(inName,"refreshChildren") ) { return ::hx::Val( refreshChildren ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_maxVisibleWidth") ) { return ::hx::Val( _maxVisibleWidth ); }
		if (HX_FIELD_EQ(inName,"get_visibleWidth") ) { return ::hx::Val( get_visibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visibleWidth") ) { return ::hx::Val( set_visibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"minVisibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_minVisibleHeight() ); }
		if (HX_FIELD_EQ(inName,"maxVisibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_maxVisibleHeight() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_maxVisibleHeight") ) { return ::hx::Val( _maxVisibleHeight ); }
		if (HX_FIELD_EQ(inName,"get_visibleHeight") ) { return ::hx::Val( get_visibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visibleHeight") ) { return ::hx::Val( set_visibleHeight_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_snapPositionsX") ) { return ::hx::Val( get_snapPositionsX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_snapPositionsY") ) { return ::hx::Val( get_snapPositionsY_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleLayoutResult") ) { return ::hx::Val( handleLayoutResult_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_viewPortBackground") ) { return ::hx::Val( _viewPortBackground ); }
		if (HX_FIELD_EQ(inName,"get_minVisibleWidth") ) { return ::hx::Val( get_minVisibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_minVisibleWidth") ) { return ::hx::Val( set_minVisibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxVisibleWidth") ) { return ::hx::Val( get_maxVisibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxVisibleWidth") ) { return ::hx::Val( set_maxVisibleWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"_actualVisibleWidth") ) { return ::hx::Val( _actualVisibleWidth ); }
		if (HX_FIELD_EQ(inName,"_layoutMeasurements") ) { return ::hx::Val( _layoutMeasurements ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_minVisibleHeight") ) { return ::hx::Val( get_minVisibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_minVisibleHeight") ) { return ::hx::Val( set_minVisibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxVisibleHeight") ) { return ::hx::Val( get_maxVisibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxVisibleHeight") ) { return ::hx::Val( set_maxVisibleHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"_actualVisibleHeight") ) { return ::hx::Val( _actualVisibleHeight ); }
		if (HX_FIELD_EQ(inName,"_ignoreLayoutChanges") ) { return ::hx::Val( _ignoreLayoutChanges ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_explicitVisibleWidth") ) { return ::hx::Val( _explicitVisibleWidth ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_actualMinVisibleWidth") ) { return ::hx::Val( _actualMinVisibleWidth ); }
		if (HX_FIELD_EQ(inName,"_explicitVisibleHeight") ) { return ::hx::Val( _explicitVisibleHeight ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_actualMinVisibleHeight") ) { return ::hx::Val( _actualMinVisibleHeight ); }
		if (HX_FIELD_EQ(inName,"refreshLayoutProperties") ) { return ::hx::Val( refreshLayoutProperties_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"_explicitMinVisibleWidth") ) { return ::hx::Val( _explicitMinVisibleWidth ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_explicitMinVisibleHeight") ) { return ::hx::Val( _explicitMinVisibleHeight ); }
		if (HX_FIELD_EQ(inName,"refreshLayoutMeasurements") ) { return ::hx::Val( refreshLayoutMeasurements_dyn() ); }
		break;
	case 43:
		if (HX_FIELD_EQ(inName,"advancedLayoutViewPort_layout_changeHandler") ) { return ::hx::Val( advancedLayoutViewPort_layout_changeHandler_dyn() ); }
		if (HX_FIELD_EQ(inName,"advancedLayoutViewPort_layout_scrollHandler") ) { return ::hx::Val( advancedLayoutViewPort_layout_scrollHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AdvancedLayoutViewPort_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"layout") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_layout(inValue.Cast< ::Dynamic >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_layout") ) { _layout=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scrollY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scrollY(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_scrollX") ) { _scrollX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scrollY") ) { _scrollY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scroller") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_scroller(inValue.Cast<  ::feathers::utils::Scroller >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_scroller") ) { _scroller=inValue.Cast<  ::feathers::utils::Scroller >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_visibleWidth(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"_layoutItems") ) { _layoutItems=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_visibleHeight(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"_layoutResult") ) { _layoutResult=inValue.Cast<  ::feathers::layout::LayoutBoundsResult >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_layoutActive") ) { _layoutActive=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_layoutChanged") ) { _layoutChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"minVisibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_minVisibleWidth(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"maxVisibleWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxVisibleWidth(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"_snapPositionsX") ) { _snapPositionsX=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_snapPositionsY") ) { _snapPositionsY=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"refreshChildren") ) { refreshChildren=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_maxVisibleWidth") ) { _maxVisibleWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minVisibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_minVisibleHeight(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"maxVisibleHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxVisibleHeight(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_maxVisibleHeight") ) { _maxVisibleHeight=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_viewPortBackground") ) { _viewPortBackground=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_actualVisibleWidth") ) { _actualVisibleWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_layoutMeasurements") ) { _layoutMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_actualVisibleHeight") ) { _actualVisibleHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ignoreLayoutChanges") ) { _ignoreLayoutChanges=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_explicitVisibleWidth") ) { _explicitVisibleWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_actualMinVisibleWidth") ) { _actualMinVisibleWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_explicitVisibleHeight") ) { _explicitVisibleHeight=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_actualMinVisibleHeight") ) { _actualMinVisibleHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"_explicitMinVisibleWidth") ) { _explicitMinVisibleWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_explicitMinVisibleHeight") ) { _explicitMinVisibleHeight=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AdvancedLayoutViewPort_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_viewPortBackground",33,b8,59,c4));
	outFields->push(HX_("_actualMinVisibleWidth",39,a7,ae,c5));
	outFields->push(HX_("_explicitMinVisibleWidth",d3,43,12,41));
	outFields->push(HX_("minVisibleWidth",e6,40,ea,48));
	outFields->push(HX_("_maxVisibleWidth",79,cf,e3,d7));
	outFields->push(HX_("maxVisibleWidth",f8,8c,04,ed));
	outFields->push(HX_("_actualVisibleWidth",01,88,b0,0d));
	outFields->push(HX_("_explicitVisibleWidth",27,67,60,49));
	outFields->push(HX_("visibleWidth",34,d0,e7,3f));
	outFields->push(HX_("_actualMinVisibleHeight",54,23,73,e9));
	outFields->push(HX_("_explicitMinVisibleHeight",7a,8d,38,65));
	outFields->push(HX_("minVisibleHeight",07,01,5e,3a));
	outFields->push(HX_("_maxVisibleHeight",14,33,c1,c5));
	outFields->push(HX_("maxVisibleHeight",b5,44,46,2d));
	outFields->push(HX_("_actualVisibleHeight",8c,f1,15,a3));
	outFields->push(HX_("_explicitVisibleHeight",a6,53,49,a1));
	outFields->push(HX_("visibleHeight",f9,d5,3d,61));
	outFields->push(HX_("_layout",49,c0,2f,c7));
	outFields->push(HX_("layout",aa,ae,b8,58));
	outFields->push(HX_("_layoutItems",f7,b2,ff,d8));
	outFields->push(HX_("_layoutMeasurements",e0,8a,1d,e1));
	outFields->push(HX_("_layoutResult",06,7a,37,06));
	outFields->push(HX_("_ignoreLayoutChanges",08,9e,67,16));
	outFields->push(HX_("_scrollX",2c,8d,90,6a));
	outFields->push(HX_("scrollX",ab,33,d8,30));
	outFields->push(HX_("_scrollY",2d,8d,90,6a));
	outFields->push(HX_("scrollY",ac,33,d8,30));
	outFields->push(HX_("_snapPositionsX",f7,64,de,6e));
	outFields->push(HX_("snapPositionsX",58,1c,7e,25));
	outFields->push(HX_("_snapPositionsY",f8,64,de,6e));
	outFields->push(HX_("snapPositionsY",59,1c,7e,25));
	outFields->push(HX_("_scroller",19,05,eb,d3));
	outFields->push(HX_("scroller",ba,0d,55,8c));
	outFields->push(HX_("_layoutActive",ef,52,f9,13));
	outFields->push(HX_("_layoutChanged",ab,a3,c8,cb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AdvancedLayoutViewPort_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_viewPortBackground),HX_("_viewPortBackground",33,b8,59,c4)},
	{::hx::fsFloat,(int)offsetof(AdvancedLayoutViewPort_obj,_actualMinVisibleWidth),HX_("_actualMinVisibleWidth",39,a7,ae,c5)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_explicitMinVisibleWidth),HX_("_explicitMinVisibleWidth",d3,43,12,41)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_maxVisibleWidth),HX_("_maxVisibleWidth",79,cf,e3,d7)},
	{::hx::fsFloat,(int)offsetof(AdvancedLayoutViewPort_obj,_actualVisibleWidth),HX_("_actualVisibleWidth",01,88,b0,0d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_explicitVisibleWidth),HX_("_explicitVisibleWidth",27,67,60,49)},
	{::hx::fsFloat,(int)offsetof(AdvancedLayoutViewPort_obj,_actualMinVisibleHeight),HX_("_actualMinVisibleHeight",54,23,73,e9)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_explicitMinVisibleHeight),HX_("_explicitMinVisibleHeight",7a,8d,38,65)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_maxVisibleHeight),HX_("_maxVisibleHeight",14,33,c1,c5)},
	{::hx::fsFloat,(int)offsetof(AdvancedLayoutViewPort_obj,_actualVisibleHeight),HX_("_actualVisibleHeight",8c,f1,15,a3)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_explicitVisibleHeight),HX_("_explicitVisibleHeight",a6,53,49,a1)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_layout),HX_("_layout",49,c0,2f,c7)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_layoutItems),HX_("_layoutItems",f7,b2,ff,d8)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_layoutMeasurements),HX_("_layoutMeasurements",e0,8a,1d,e1)},
	{::hx::fsObject /*  ::feathers::layout::LayoutBoundsResult */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_layoutResult),HX_("_layoutResult",06,7a,37,06)},
	{::hx::fsBool,(int)offsetof(AdvancedLayoutViewPort_obj,_ignoreLayoutChanges),HX_("_ignoreLayoutChanges",08,9e,67,16)},
	{::hx::fsFloat,(int)offsetof(AdvancedLayoutViewPort_obj,_scrollX),HX_("_scrollX",2c,8d,90,6a)},
	{::hx::fsFloat,(int)offsetof(AdvancedLayoutViewPort_obj,_scrollY),HX_("_scrollY",2d,8d,90,6a)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_snapPositionsX),HX_("_snapPositionsX",f7,64,de,6e)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_snapPositionsY),HX_("_snapPositionsY",f8,64,de,6e)},
	{::hx::fsObject /*  ::feathers::utils::Scroller */ ,(int)offsetof(AdvancedLayoutViewPort_obj,_scroller),HX_("_scroller",19,05,eb,d3)},
	{::hx::fsBool,(int)offsetof(AdvancedLayoutViewPort_obj,_layoutActive),HX_("_layoutActive",ef,52,f9,13)},
	{::hx::fsBool,(int)offsetof(AdvancedLayoutViewPort_obj,_layoutChanged),HX_("_layoutChanged",ab,a3,c8,cb)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AdvancedLayoutViewPort_obj,refreshChildren),HX_("refreshChildren",3a,82,c2,6d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AdvancedLayoutViewPort_obj_sStaticStorageInfo = 0;
#endif

static ::String AdvancedLayoutViewPort_obj_sMemberFields[] = {
	HX_("_viewPortBackground",33,b8,59,c4),
	HX_("_actualMinVisibleWidth",39,a7,ae,c5),
	HX_("_explicitMinVisibleWidth",d3,43,12,41),
	HX_("get_minVisibleWidth",fd,0f,f5,d3),
	HX_("set_minVisibleWidth",09,03,92,10),
	HX_("_maxVisibleWidth",79,cf,e3,d7),
	HX_("get_maxVisibleWidth",0f,5c,0f,78),
	HX_("set_maxVisibleWidth",1b,4f,ac,b4),
	HX_("_actualVisibleWidth",01,88,b0,0d),
	HX_("_explicitVisibleWidth",27,67,60,49),
	HX_("get_visibleWidth",bd,bc,86,44),
	HX_("set_visibleWidth",31,aa,c8,9a),
	HX_("_actualMinVisibleHeight",54,23,73,e9),
	HX_("_explicitMinVisibleHeight",7a,8d,38,65),
	HX_("get_minVisibleHeight",10,66,c8,58),
	HX_("set_minVisibleHeight",84,1d,80,25),
	HX_("_maxVisibleHeight",14,33,c1,c5),
	HX_("get_maxVisibleHeight",be,a9,b0,4b),
	HX_("set_maxVisibleHeight",32,61,68,18),
	HX_("_actualVisibleHeight",8c,f1,15,a3),
	HX_("_explicitVisibleHeight",a6,53,49,a1),
	HX_("get_visibleHeight",50,e1,ad,67),
	HX_("set_visibleHeight",5c,b9,1b,8b),
	HX_("_layout",49,c0,2f,c7),
	HX_("get_layout",73,1e,40,49),
	HX_("set_layout",e7,bc,bd,4c),
	HX_("_layoutItems",f7,b2,ff,d8),
	HX_("_layoutMeasurements",e0,8a,1d,e1),
	HX_("_layoutResult",06,7a,37,06),
	HX_("_ignoreLayoutChanges",08,9e,67,16),
	HX_("_scrollX",2c,8d,90,6a),
	HX_("get_scrollX",c2,93,d2,b6),
	HX_("set_scrollX",ce,9a,3f,c1),
	HX_("_scrollY",2d,8d,90,6a),
	HX_("get_scrollY",c3,93,d2,b6),
	HX_("set_scrollY",cf,9a,3f,c1),
	HX_("_snapPositionsX",f7,64,de,6e),
	HX_("get_snapPositionsX",21,fd,17,c1),
	HX_("_snapPositionsY",f8,64,de,6e),
	HX_("get_snapPositionsY",22,fd,17,c1),
	HX_("_scroller",19,05,eb,d3),
	HX_("get_scroller",c3,c1,6e,41),
	HX_("set_scroller",37,e5,67,56),
	HX_("_layoutActive",ef,52,f9,13),
	HX_("_layoutChanged",ab,a3,c8,cb),
	HX_("refreshChildren",3a,82,c2,6d),
	HX_("update",09,86,05,87),
	HX_("refreshLayout",e5,52,f3,56),
	HX_("refreshLayoutProperties",38,c3,c3,81),
	HX_("refreshLayoutMeasurements",7c,97,40,d2),
	HX_("handleLayoutResult",ef,92,e3,71),
	HX_("advancedLayoutViewPort_layout_changeHandler",b2,4a,59,fe),
	HX_("advancedLayoutViewPort_layout_scrollHandler",b5,c1,cb,0f),
	::String(null()) };

::hx::Class AdvancedLayoutViewPort_obj::__mClass;

void AdvancedLayoutViewPort_obj::__register()
{
	AdvancedLayoutViewPort_obj _hx_dummy;
	AdvancedLayoutViewPort_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.supportClasses.AdvancedLayoutViewPort",af,2b,04,8d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AdvancedLayoutViewPort_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AdvancedLayoutViewPort_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AdvancedLayoutViewPort_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AdvancedLayoutViewPort_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace feathers
} // end namespace controls
} // end namespace supportClasses
