// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_controls_BasicToggleButton
#include <feathers/controls/BasicToggleButton.h>
#endif
#ifndef INCLUDED_feathers_controls_IToggle
#include <feathers/controls/IToggle.h>
#endif
#ifndef INCLUDED_feathers_controls_ITriggerView
#include <feathers/controls/ITriggerView.h>
#endif
#ifndef INCLUDED_feathers_controls_ToggleButton
#include <feathers/controls/ToggleButton.h>
#endif
#ifndef INCLUDED_feathers_controls_ToggleButtonState
#include <feathers/controls/ToggleButtonState.h>
#endif
#ifndef INCLUDED_feathers_controls_dataRenderers_IDataRenderer
#include <feathers/controls/dataRenderers/IDataRenderer.h>
#endif
#ifndef INCLUDED_feathers_controls_dataRenderers_ItemRenderer
#include <feathers/controls/dataRenderers/ItemRenderer.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusContainer
#include <feathers/core/IFocusContainer.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusManagerAware
#include <feathers/core/IFocusManagerAware.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IHTMLTextControl
#include <feathers/core/IHTMLTextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IPointerDelegate
#include <feathers/core/IPointerDelegate.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_core_IStateObserver
#include <feathers/core/IStateObserver.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_InvalidationFlag
#include <feathers/core/InvalidationFlag.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_layout_HorizontalAlign
#include <feathers/layout/HorizontalAlign.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutIndexObject
#include <feathers/layout/ILayoutIndexObject.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_Measurements
#include <feathers/layout/Measurements.h>
#endif
#ifndef INCLUDED_feathers_layout_RelativePosition
#include <feathers/layout/RelativePosition.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalAlign
#include <feathers/layout/VerticalAlign.h>
#endif
#ifndef INCLUDED_feathers_skins_IProgrammaticSkin
#include <feathers/skins/IProgrammaticSkin.h>
#endif
#ifndef INCLUDED_feathers_style_IDarkModeTheme
#include <feathers/style/IDarkModeTheme.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_ITheme
#include <feathers/style/ITheme.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_text_TextFormat
#include <feathers/text/TextFormat.h>
#endif
#ifndef INCLUDED_feathers_themes_ClassVariantTheme
#include <feathers/themes/ClassVariantTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_BaseSteelTheme
#include <feathers/themes/steel/BaseSteelTheme.h>
#endif
#ifndef INCLUDED_feathers_themes_steel_components_SteelItemRendererStyles
#include <feathers/themes/steel/components/SteelItemRendererStyles.h>
#endif
#ifndef INCLUDED_feathers_utils_PointerToState
#include <feathers/utils/PointerToState.h>
#endif
#ifndef INCLUDED_feathers_utils_PointerTrigger
#include <feathers/utils/PointerTrigger.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_57908de65a73485d_38_new,"feathers.controls.dataRenderers.ItemRenderer","new",0x3acc662a,"feathers.controls.dataRenderers.ItemRenderer.new","feathers/controls/dataRenderers/ItemRenderer.hx",38,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_70_get_data,"feathers.controls.dataRenderers.ItemRenderer","get_data",0x85803fa9,"feathers.controls.dataRenderers.ItemRenderer.get_data","feathers/controls/dataRenderers/ItemRenderer.hx",70,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_73_set_data,"feathers.controls.dataRenderers.ItemRenderer","set_data",0x33dd991d,"feathers.controls.dataRenderers.ItemRenderer.set_data","feathers/controls/dataRenderers/ItemRenderer.hx",73,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_111_get_secondaryText,"feathers.controls.dataRenderers.ItemRenderer","get_secondaryText",0x56cb80e2,"feathers.controls.dataRenderers.ItemRenderer.get_secondaryText","feathers/controls/dataRenderers/ItemRenderer.hx",111,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_114_set_secondaryText,"feathers.controls.dataRenderers.ItemRenderer","set_secondaryText",0x7a3958ee,"feathers.controls.dataRenderers.ItemRenderer.set_secondaryText","feathers/controls/dataRenderers/ItemRenderer.hx",114,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_145_get_secondaryHtmlText,"feathers.controls.dataRenderers.ItemRenderer","get_secondaryHtmlText",0x7b30926d,"feathers.controls.dataRenderers.ItemRenderer.get_secondaryHtmlText","feathers/controls/dataRenderers/ItemRenderer.hx",145,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_148_set_secondaryHtmlText,"feathers.controls.dataRenderers.ItemRenderer","set_secondaryHtmlText",0xcf396079,"feathers.controls.dataRenderers.ItemRenderer.set_secondaryHtmlText","feathers/controls/dataRenderers/ItemRenderer.hx",148,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_165_get_childFocusEnabled,"feathers.controls.dataRenderers.ItemRenderer","get_childFocusEnabled",0xf8b6ba66,"feathers.controls.dataRenderers.ItemRenderer.get_childFocusEnabled","feathers/controls/dataRenderers/ItemRenderer.hx",165,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_168_set_childFocusEnabled,"feathers.controls.dataRenderers.ItemRenderer","set_childFocusEnabled",0x4cbf8872,"feathers.controls.dataRenderers.ItemRenderer.set_childFocusEnabled","feathers/controls/dataRenderers/ItemRenderer.hx",168,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_184_get_layoutIndex,"feathers.controls.dataRenderers.ItemRenderer","get_layoutIndex",0x5146c869,"feathers.controls.dataRenderers.ItemRenderer.get_layoutIndex","feathers/controls/dataRenderers/ItemRenderer.hx",184,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_187_set_layoutIndex,"feathers.controls.dataRenderers.ItemRenderer","set_layoutIndex",0x4d124575,"feathers.controls.dataRenderers.ItemRenderer.set_layoutIndex","feathers/controls/dataRenderers/ItemRenderer.hx",187,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_205_get_pointerTarget,"feathers.controls.dataRenderers.ItemRenderer","get_pointerTarget",0x8d3b428f,"feathers.controls.dataRenderers.ItemRenderer.get_pointerTarget","feathers/controls/dataRenderers/ItemRenderer.hx",205,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_208_set_pointerTarget,"feathers.controls.dataRenderers.ItemRenderer","set_pointerTarget",0xb0a91a9b,"feathers.controls.dataRenderers.ItemRenderer.set_pointerTarget","feathers/controls/dataRenderers/ItemRenderer.hx",208,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_349_get_baseline,"feathers.controls.dataRenderers.ItemRenderer","get_baseline",0x8f50f184,"feathers.controls.dataRenderers.ItemRenderer.get_baseline","feathers/controls/dataRenderers/ItemRenderer.hx",349,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_397_getSecondaryTextFormatForState,"feathers.controls.dataRenderers.ItemRenderer","getSecondaryTextFormatForState",0x1198ec40,"feathers.controls.dataRenderers.ItemRenderer.getSecondaryTextFormatForState","feathers/controls/dataRenderers/ItemRenderer.hx",397,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_415_setSecondaryTextFormatForState,"feathers.controls.dataRenderers.ItemRenderer","setSecondaryTextFormatForState",0xec83fcb4,"feathers.controls.dataRenderers.ItemRenderer.setSecondaryTextFormatForState","feathers/controls/dataRenderers/ItemRenderer.hx",415,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_429_initializeItemRendererTheme,"feathers.controls.dataRenderers.ItemRenderer","initializeItemRendererTheme",0x82b0090d,"feathers.controls.dataRenderers.ItemRenderer.initializeItemRendererTheme","feathers/controls/dataRenderers/ItemRenderer.hx",429,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_433_initialize,"feathers.controls.dataRenderers.ItemRenderer","initialize",0xef7d48c6,"feathers.controls.dataRenderers.ItemRenderer.initialize","feathers/controls/dataRenderers/ItemRenderer.hx",433,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_439_update,"feathers.controls.dataRenderers.ItemRenderer","update",0x29dd2a7f,"feathers.controls.dataRenderers.ItemRenderer.update","feathers/controls/dataRenderers/ItemRenderer.hx",439,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_467_refreshSecondaryTextField,"feathers.controls.dataRenderers.ItemRenderer","refreshSecondaryTextField",0x3af674be,"feathers.controls.dataRenderers.ItemRenderer.refreshSecondaryTextField","feathers/controls/dataRenderers/ItemRenderer.hx",467,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_488_refreshSecondaryTextStyles,"feathers.controls.dataRenderers.ItemRenderer","refreshSecondaryTextStyles",0xf1f4099e,"feathers.controls.dataRenderers.ItemRenderer.refreshSecondaryTextStyles","feathers/controls/dataRenderers/ItemRenderer.hx",488,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_514_refreshSecondaryText,"feathers.controls.dataRenderers.ItemRenderer","refreshSecondaryText",0xf988825c,"feathers.controls.dataRenderers.ItemRenderer.refreshSecondaryText","feathers/controls/dataRenderers/ItemRenderer.hx",514,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_548_getCurrentSecondaryTextFormat,"feathers.controls.dataRenderers.ItemRenderer","getCurrentSecondaryTextFormat",0x49e4921f,"feathers.controls.dataRenderers.ItemRenderer.getCurrentSecondaryTextFormat","feathers/controls/dataRenderers/ItemRenderer.hx",548,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_562_refreshAccessoryView,"feathers.controls.dataRenderers.ItemRenderer","refreshAccessoryView",0xcbc5c672,"feathers.controls.dataRenderers.ItemRenderer.refreshAccessoryView","feathers/controls/dataRenderers/ItemRenderer.hx",562,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_573_getCurrentAccessoryView,"feathers.controls.dataRenderers.ItemRenderer","getCurrentAccessoryView",0x7bf40cde,"feathers.controls.dataRenderers.ItemRenderer.getCurrentAccessoryView","feathers/controls/dataRenderers/ItemRenderer.hx",573,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_576_removeCurrentAccessoryView,"feathers.controls.dataRenderers.ItemRenderer","removeCurrentAccessoryView",0xc0204038,"feathers.controls.dataRenderers.ItemRenderer.removeCurrentAccessoryView","feathers/controls/dataRenderers/ItemRenderer.hx",576,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_595_addCurrentAccessoryView,"feathers.controls.dataRenderers.ItemRenderer","addCurrentAccessoryView",0x1bbea5e9,"feathers.controls.dataRenderers.ItemRenderer.addCurrentAccessoryView","feathers/controls/dataRenderers/ItemRenderer.hx",595,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_618_customHitTest,"feathers.controls.dataRenderers.ItemRenderer","customHitTest",0xb0f33ede,"feathers.controls.dataRenderers.ItemRenderer.customHitTest","feathers/controls/dataRenderers/ItemRenderer.hx",618,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_653_refreshTextFieldDimensions,"feathers.controls.dataRenderers.ItemRenderer","refreshTextFieldDimensions",0xa926bfd5,"feathers.controls.dataRenderers.ItemRenderer.refreshTextFieldDimensions","feathers/controls/dataRenderers/ItemRenderer.hx",653,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_741_calculateExplicitWidthForTextMeasurement,"feathers.controls.dataRenderers.ItemRenderer","calculateExplicitWidthForTextMeasurement",0x4eb00188,"feathers.controls.dataRenderers.ItemRenderer.calculateExplicitWidthForTextMeasurement","feathers/controls/dataRenderers/ItemRenderer.hx",741,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_766_measureContentWidth,"feathers.controls.dataRenderers.ItemRenderer","measureContentWidth",0x2f3e3055,"feathers.controls.dataRenderers.ItemRenderer.measureContentWidth","feathers/controls/dataRenderers/ItemRenderer.hx",766,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_805_measureContentHeight,"feathers.controls.dataRenderers.ItemRenderer","measureContentHeight",0xdd7b92b8,"feathers.controls.dataRenderers.ItemRenderer.measureContentHeight","feathers/controls/dataRenderers/ItemRenderer.hx",805,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_845_measureContentMinWidth,"feathers.controls.dataRenderers.ItemRenderer","measureContentMinWidth",0x6fdec425,"feathers.controls.dataRenderers.ItemRenderer.measureContentMinWidth","feathers/controls/dataRenderers/ItemRenderer.hx",845,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_884_measureContentMinHeight,"feathers.controls.dataRenderers.ItemRenderer","measureContentMinHeight",0x295c54e8,"feathers.controls.dataRenderers.ItemRenderer.measureContentMinHeight","feathers/controls/dataRenderers/ItemRenderer.hx",884,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_923_hasAccessoryViewInLayout,"feathers.controls.dataRenderers.ItemRenderer","hasAccessoryViewInLayout",0xa8226a22,"feathers.controls.dataRenderers.ItemRenderer.hasAccessoryViewInLayout","feathers/controls/dataRenderers/ItemRenderer.hx",923,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_933_getCurrentBackgroundSkin,"feathers.controls.dataRenderers.ItemRenderer","getCurrentBackgroundSkin",0x77746524,"feathers.controls.dataRenderers.ItemRenderer.getCurrentBackgroundSkin","feathers/controls/dataRenderers/ItemRenderer.hx",933,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_947_layoutChildren,"feathers.controls.dataRenderers.ItemRenderer","layoutChildren",0xf8e4487f,"feathers.controls.dataRenderers.ItemRenderer.layoutChildren","feathers/controls/dataRenderers/ItemRenderer.hx",947,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_1134_itemRenderer_secondaryTextFormat_changeHandler,"feathers.controls.dataRenderers.ItemRenderer","itemRenderer_secondaryTextFormat_changeHandler",0xad4af700,"feathers.controls.dataRenderers.ItemRenderer.itemRenderer_secondaryTextFormat_changeHandler","feathers/controls/dataRenderers/ItemRenderer.hx",1134,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_1137_itemRenderer_accessoryView_resizeHandler,"feathers.controls.dataRenderers.ItemRenderer","itemRenderer_accessoryView_resizeHandler",0x7e70f17b,"feathers.controls.dataRenderers.ItemRenderer.itemRenderer_accessoryView_resizeHandler","feathers/controls/dataRenderers/ItemRenderer.hx",1137,0xff6591c5)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_85_get_secondaryTextFormat,"feathers.controls.dataRenderers.ItemRenderer","get_secondaryTextFormat",0xa48159b9,"feathers.controls.dataRenderers.ItemRenderer.get_secondaryTextFormat","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_99_set_secondaryTextFormat,"feathers.controls.dataRenderers.ItemRenderer","set_secondaryTextFormat",0xa6e2c2c5,"feathers.controls.dataRenderers.ItemRenderer.set_secondaryTextFormat","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_131_clearStyle_secondaryTextFormat,"feathers.controls.dataRenderers.ItemRenderer","clearStyle_secondaryTextFormat",0xe1039833,"feathers.controls.dataRenderers.ItemRenderer.clearStyle_secondaryTextFormat","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_85_get_disabledSecondaryTextFormat,"feathers.controls.dataRenderers.ItemRenderer","get_disabledSecondaryTextFormat",0xf7c4b69d,"feathers.controls.dataRenderers.ItemRenderer.get_disabledSecondaryTextFormat","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_99_set_disabledSecondaryTextFormat,"feathers.controls.dataRenderers.ItemRenderer","set_disabledSecondaryTextFormat",0xaa880ba9,"feathers.controls.dataRenderers.ItemRenderer.set_disabledSecondaryTextFormat","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_131_clearStyle_disabledSecondaryTextFormat,"feathers.controls.dataRenderers.ItemRenderer","clearStyle_disabledSecondaryTextFormat",0x84c0ff17,"feathers.controls.dataRenderers.ItemRenderer.clearStyle_disabledSecondaryTextFormat","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_85_get_selectedSecondaryTextFormat,"feathers.controls.dataRenderers.ItemRenderer","get_selectedSecondaryTextFormat",0x2a38351e,"feathers.controls.dataRenderers.ItemRenderer.get_selectedSecondaryTextFormat","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_99_set_selectedSecondaryTextFormat,"feathers.controls.dataRenderers.ItemRenderer","set_selectedSecondaryTextFormat",0xdcfb8a2a,"feathers.controls.dataRenderers.ItemRenderer.set_selectedSecondaryTextFormat","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_131_clearStyle_selectedSecondaryTextFormat,"feathers.controls.dataRenderers.ItemRenderer","clearStyle_selectedSecondaryTextFormat",0xb7347d98,"feathers.controls.dataRenderers.ItemRenderer.clearStyle_selectedSecondaryTextFormat","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_85_get_alternateBackgroundSkin,"feathers.controls.dataRenderers.ItemRenderer","get_alternateBackgroundSkin",0xe8cf1646,"feathers.controls.dataRenderers.ItemRenderer.get_alternateBackgroundSkin","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_99_set_alternateBackgroundSkin,"feathers.controls.dataRenderers.ItemRenderer","set_alternateBackgroundSkin",0x2b67f552,"feathers.controls.dataRenderers.ItemRenderer.set_alternateBackgroundSkin","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_131_clearStyle_alternateBackgroundSkin,"feathers.controls.dataRenderers.ItemRenderer","clearStyle_alternateBackgroundSkin",0xa52b19c0,"feathers.controls.dataRenderers.ItemRenderer.clearStyle_alternateBackgroundSkin","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_85_get_showSecondaryText,"feathers.controls.dataRenderers.ItemRenderer","get_showSecondaryText",0x20524625,"feathers.controls.dataRenderers.ItemRenderer.get_showSecondaryText","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_99_set_showSecondaryText,"feathers.controls.dataRenderers.ItemRenderer","set_showSecondaryText",0x745b1431,"feathers.controls.dataRenderers.ItemRenderer.set_showSecondaryText","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_131_clearStyle_showSecondaryText,"feathers.controls.dataRenderers.ItemRenderer","clearStyle_showSecondaryText",0x4d4e121f,"feathers.controls.dataRenderers.ItemRenderer.clearStyle_showSecondaryText","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_85_get_accessoryView,"feathers.controls.dataRenderers.ItemRenderer","get_accessoryView",0x2908c4f8,"feathers.controls.dataRenderers.ItemRenderer.get_accessoryView","feathers/macros/StyleMacro.hx",85,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_99_set_accessoryView,"feathers.controls.dataRenderers.ItemRenderer","set_accessoryView",0x4c769d04,"feathers.controls.dataRenderers.ItemRenderer.set_accessoryView","feathers/macros/StyleMacro.hx",99,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_cdea1590a25f7680_131_clearStyle_accessoryView,"feathers.controls.dataRenderers.ItemRenderer","clearStyle_accessoryView",0x577c8bf2,"feathers.controls.dataRenderers.ItemRenderer.clearStyle_accessoryView","feathers/macros/StyleMacro.hx",131,0x3426f2ba)
HX_LOCAL_STACK_FRAME(_hx_pos_a7fc358dfef2f496_42_get_styleContext,"feathers.controls.dataRenderers.ItemRenderer","get_styleContext",0x63f2913d,"feathers.controls.dataRenderers.ItemRenderer.get_styleContext","feathers/macros/StyleContextMacro.hx",42,0xea61cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_57908de65a73485d_38_boot,"feathers.controls.dataRenderers.ItemRenderer","boot",0x3025ff28,"feathers.controls.dataRenderers.ItemRenderer.boot","feathers/controls/dataRenderers/ItemRenderer.hx",38,0xff6591c5)
namespace feathers{
namespace controls{
namespace dataRenderers{

void ItemRenderer_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_57908de65a73485d_38_new)
HXLINE( 347)		this->_hx___accessoryView = null();
HXLINE( 330)		this->_hx___showSecondaryText = true;
HXLINE( 320)		this->_hx___alternateBackgroundSkin = null();
HXLINE( 299)		this->_hx___selectedSecondaryTextFormat = null();
HXLINE( 265)		this->_hx___disabledSecondaryTextFormat = null();
HXLINE( 232)		this->_hx___secondaryTextFormat = null();
HXLINE( 380)		this->_stateToSecondaryTextFormat =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 332)		this->_ignoreAccessoryResizes = false;
HXLINE( 176)		this->_layoutIndex = -1;
HXLINE( 157)		this->_childFocusEnabled = true;
HXLINE( 123)		this->_secondaryHtmlText = null();
HXLINE(  89)		this->_updatedSecondaryTextStyles = false;
HXLINE(  88)		this->_previousSecondarySimpleTextFormat = null();
HXLINE(  87)		this->_previousSecondaryTextFormat = null();
HXLINE(  86)		this->_previousSecondaryHTMLText = null();
HXLINE(  85)		this->_previousSecondaryText = null();
HXLINE(  45)		this->initializeItemRendererTheme();
HXLINE(  47)		super::__construct(null(),null(),null());
HXLINE(  50)		this->mouseChildren = true;
HXLINE(  53)		this->set_buttonMode(false);
HXLINE(  56)		this->set_toggleable(false);
HXLINE(  58)		this->set_tabEnabled(false);
HXLINE(  59)		this->set_tabChildren(true);
            	}

Dynamic ItemRenderer_obj::__CreateEmpty() { return new ItemRenderer_obj; }

void *ItemRenderer_obj::_hx_vtable = 0;

Dynamic ItemRenderer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ItemRenderer_obj > _hx_result = new ItemRenderer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ItemRenderer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4033f4be) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x093ab78b) {
				if (inClassId<=(int)0x0330636f) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
				} else {
					return inClassId==(int)0x093ab78b;
				}
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			if (inClassId<=(int)0x1f4df417) {
				return inClassId==(int)0x1727ecc2 || inClassId==(int)0x1f4df417;
			} else {
				return inClassId==(int)0x4033f4be;
			}
		}
	} else {
		if (inClassId<=(int)0x58123034) {
			if (inClassId<=(int)0x4af7dd8e) {
				return inClassId==(int)0x482d5eec || inClassId==(int)0x4af7dd8e;
			} else {
				return inClassId==(int)0x58123034;
			}
		} else {
			return inClassId==(int)0x67cf6db6 || inClassId==(int)0x6b353933;
		}
	}
}

static ::openfl::events::IEventDispatcher_obj _hx_feathers_controls_dataRenderers_ItemRenderer__hx_openfl_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::dataRenderers::ItemRenderer_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::dataRenderers::ItemRenderer_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::dataRenderers::ItemRenderer_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::willTrigger,
};

static ::feathers::core::IPointerDelegate_obj _hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_core_IPointerDelegate= {
	(  ::openfl::display::InteractiveObject (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_pointerTarget,
	(  ::openfl::display::InteractiveObject (::hx::Object::*)( ::openfl::display::InteractiveObject))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_pointerTarget,
};

static ::feathers::core::IFocusContainer_obj _hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_core_IFocusContainer= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::dataRenderers::ItemRenderer_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::dataRenderers::ItemRenderer_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::dataRenderers::ItemRenderer_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_focusEnabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_focusEnabled,
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_focusOwner,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_focusOwner,
	( void (::hx::Object::*)(bool))&::feathers::controls::dataRenderers::ItemRenderer_obj::showFocus,
	( bool (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_childFocusEnabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_childFocusEnabled,
};

static ::feathers::core::IUIControl_obj _hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_core_IUIControl= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::dataRenderers::ItemRenderer_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::dataRenderers::ItemRenderer_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::dataRenderers::ItemRenderer_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_enabled,
	( ::String (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_toolTip,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_toolTip,
	( void (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::initializeNow,
};

static ::feathers::core::IFocusObject_obj _hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_core_IFocusObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::dataRenderers::ItemRenderer_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::dataRenderers::ItemRenderer_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::dataRenderers::ItemRenderer_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_focusEnabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_focusEnabled,
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_focusOwner,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_focusOwner,
	( void (::hx::Object::*)(bool))&::feathers::controls::dataRenderers::ItemRenderer_obj::showFocus,
};

static ::feathers::core::IFocusManagerAware_obj _hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_core_IFocusManagerAware= {
	( ::Dynamic (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_focusManager,
	( ::Dynamic (::hx::Object::*)(::Dynamic))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_focusManager,
};

static ::feathers::layout::ILayoutIndexObject_obj _hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_layout_ILayoutIndexObject= {
	( int (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_layoutIndex,
	( int (::hx::Object::*)(int))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_layoutIndex,
};

static ::feathers::core::IDisplayObject_obj _hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_core_IDisplayObject= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::dataRenderers::ItemRenderer_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::dataRenderers::ItemRenderer_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::dataRenderers::ItemRenderer_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_visible,
};

static ::feathers::controls::dataRenderers::IDataRenderer_obj _hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_controls_dataRenderers_IDataRenderer= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::feathers::controls::dataRenderers::ItemRenderer_obj::addEventListener,
	( bool (::hx::Object::*)( ::openfl::events::Event))&::feathers::controls::dataRenderers::ItemRenderer_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::feathers::controls::dataRenderers::ItemRenderer_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::willTrigger,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_x,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_x,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_y,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_y,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_alpha,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_alpha,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_width,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_width,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_height,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_height,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_scaleX,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_scaleX,
	( Float (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_scaleY,
	( Float (::hx::Object::*)(Float))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_scaleY,
	( bool (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_visible,
	( bool (::hx::Object::*)(bool))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_visible,
	( bool (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_enabled,
	( bool (::hx::Object::*)(bool))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_enabled,
	( ::String (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_toolTip,
	( ::String (::hx::Object::*)(::String))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_toolTip,
	( void (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::initializeNow,
	(  ::Dynamic (::hx::Object::*)())&::feathers::controls::dataRenderers::ItemRenderer_obj::get_data,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::feathers::controls::dataRenderers::ItemRenderer_obj::set_data,
};

void *ItemRenderer_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x87530281: return &_hx_feathers_controls_dataRenderers_ItemRenderer__hx_openfl_events_IEventDispatcher;
		case (int)0x2cbe5668: return &_hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_core_IPointerDelegate;
		case (int)0xf7aca7c3: return &_hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_core_IFocusContainer;
		case (int)0x2696a04f: return &_hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_core_IUIControl;
		case (int)0x701686fd: return &_hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_core_IFocusObject;
		case (int)0x7031642f: return &_hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_core_IFocusManagerAware;
		case (int)0xe7561c78: return &_hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_layout_ILayoutIndexObject;
		case (int)0x3a979a67: return &_hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_core_IDisplayObject;
		case (int)0x70798096: return &_hx_feathers_controls_dataRenderers_ItemRenderer__hx_feathers_controls_dataRenderers_IDataRenderer;
	}
	return super::_hx_getInterface(inHash);
}

 ::Dynamic ItemRenderer_obj::get_data(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_70_get_data)
HXDLIN(  70)		return this->_data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,get_data,return )

 ::Dynamic ItemRenderer_obj::set_data( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_73_set_data)
HXLINE(  74)		if (::hx::IsEq( this->_data,value )) {
HXLINE(  75)			return this->_data;
            		}
HXLINE(  77)		this->_data = value;
HXLINE(  78)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE(  79)		return this->_data;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,set_data,return )

::String ItemRenderer_obj::get_secondaryText(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_111_get_secondaryText)
HXDLIN( 111)		return this->_secondaryText;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,get_secondaryText,return )

::String ItemRenderer_obj::set_secondaryText(::String value){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_114_set_secondaryText)
HXLINE( 115)		if ((this->_secondaryText == value)) {
HXLINE( 116)			return this->_secondaryText;
            		}
HXLINE( 118)		this->_secondaryText = value;
HXLINE( 119)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 120)		return this->_secondaryText;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,set_secondaryText,return )

::String ItemRenderer_obj::get_secondaryHtmlText(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_145_get_secondaryHtmlText)
HXDLIN( 145)		return this->_secondaryHtmlText;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,get_secondaryHtmlText,return )

::String ItemRenderer_obj::set_secondaryHtmlText(::String value){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_148_set_secondaryHtmlText)
HXLINE( 149)		if ((this->_secondaryHtmlText == value)) {
HXLINE( 150)			return this->_secondaryHtmlText;
            		}
HXLINE( 152)		this->_secondaryHtmlText = value;
HXLINE( 153)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 154)		return this->_secondaryHtmlText;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,set_secondaryHtmlText,return )

bool ItemRenderer_obj::get_childFocusEnabled(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_165_get_childFocusEnabled)
HXDLIN( 165)		if (this->_enabled) {
HXDLIN( 165)			return this->_childFocusEnabled;
            		}
            		else {
HXDLIN( 165)			return false;
            		}
HXDLIN( 165)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,get_childFocusEnabled,return )

bool ItemRenderer_obj::set_childFocusEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_168_set_childFocusEnabled)
HXLINE( 169)		if ((this->_childFocusEnabled == value)) {
HXLINE( 170)			return this->_childFocusEnabled;
            		}
HXLINE( 172)		this->_childFocusEnabled = value;
HXLINE( 173)		return this->_childFocusEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,set_childFocusEnabled,return )

int ItemRenderer_obj::get_layoutIndex(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_184_get_layoutIndex)
HXDLIN( 184)		return this->_layoutIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,get_layoutIndex,return )

int ItemRenderer_obj::set_layoutIndex(int value){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_187_set_layoutIndex)
HXLINE( 188)		if ((this->_layoutIndex == value)) {
HXLINE( 189)			return this->_layoutIndex;
            		}
HXLINE( 191)		this->_layoutIndex = value;
HXLINE( 192)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 193)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 194)		return this->_layoutIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,set_layoutIndex,return )

 ::openfl::display::InteractiveObject ItemRenderer_obj::get_pointerTarget(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_205_get_pointerTarget)
HXDLIN( 205)		return this->_pointerTarget;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,get_pointerTarget,return )

 ::openfl::display::InteractiveObject ItemRenderer_obj::set_pointerTarget( ::openfl::display::InteractiveObject value){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_208_set_pointerTarget)
HXLINE( 209)		if (::hx::IsInstanceEq( this->_pointerTarget,value )) {
HXLINE( 210)			return this->_pointerTarget;
            		}
HXLINE( 212)		this->_pointerTarget = value;
HXLINE( 213)		this->setInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 214)		return this->_pointerTarget;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,set_pointerTarget,return )

Float ItemRenderer_obj::get_baseline(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_349_get_baseline)
HXLINE( 350)		if (::hx::IsNull( this->textField )) {
HXLINE( 351)			return ((Float)0.0);
            		}
HXLINE( 355)		bool hasText;
HXDLIN( 355)		if (::hx::IsNotNull( this->_text )) {
HXLINE( 355)			hasText = (this->_text.length > 0);
            		}
            		else {
HXLINE( 355)			hasText = false;
            		}
HXLINE( 356)		bool hasHTMLText;
HXDLIN( 356)		if (::hx::IsNotNull( this->_htmlText )) {
HXLINE( 356)			hasHTMLText = (this->_htmlText.length > 0);
            		}
            		else {
HXLINE( 356)			hasHTMLText = false;
            		}
HXLINE( 357)		bool _hx_tmp;
HXDLIN( 357)		if (this->get_showText()) {
HXLINE( 357)			if (!(hasText)) {
HXLINE( 357)				_hx_tmp = !(hasHTMLText);
            			}
            			else {
HXLINE( 357)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 357)			_hx_tmp = true;
            		}
HXDLIN( 357)		if (_hx_tmp) {
HXLINE( 358)			Float textFieldY = this->textField->get_y();
HXLINE( 359)			bool _hx_tmp1;
HXDLIN( 359)			if (this->get_showText()) {
HXLINE( 359)				if (::hx::IsNull( this->_text )) {
HXLINE( 359)					_hx_tmp1 = ::hx::IsNull( this->_htmlText );
            				}
            				else {
HXLINE( 359)					_hx_tmp1 = false;
            				}
            			}
            			else {
HXLINE( 359)				_hx_tmp1 = true;
            			}
HXDLIN( 359)			if (_hx_tmp1) {
HXLINE( 363)				if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 364)					Float textFieldY1 = this->_currentIcon->get_y();
HXDLIN( 364)					Float textFieldY2 = this->_currentIcon->get_height();
HXDLIN( 364)					textFieldY = (textFieldY1 + ((textFieldY2 - this->_textMeasuredHeight) / ((Float)2.0)));
            				}
            				else {
HXLINE( 365)					if (::hx::IsNotNull( this->_currentBackgroundSkin )) {
HXLINE( 366)						Float textFieldY3 = this->_currentBackgroundSkin->get_height();
HXDLIN( 366)						textFieldY = ((textFieldY3 - this->_textMeasuredHeight) / ((Float)2.0));
            					}
            					else {
HXLINE( 369)						return ((Float)0.0);
            					}
            				}
            			}
HXLINE( 372)			this->textField->set_text(HX_W(u"\u200b",ed6d,00ab));
HXLINE( 373)			Float textFieldBaseline = (textFieldY + this->textField->getLineMetrics(0)->ascent);
HXLINE( 374)			this->textField->set_text(HX_("",00,00,00,00));
HXLINE( 375)			return textFieldBaseline;
            		}
HXLINE( 377)		Float _hx_tmp2 = this->textField->get_y();
HXDLIN( 377)		return (_hx_tmp2 + this->textField->getLineMetrics(0)->ascent);
            	}


 ::feathers::text::TextFormat ItemRenderer_obj::getSecondaryTextFormatForState( ::feathers::controls::ToggleButtonState state){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_397_getSecondaryTextFormatForState)
HXDLIN( 397)		return this->_stateToSecondaryTextFormat->get(state).StaticCast<  ::feathers::text::TextFormat >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,getSecondaryTextFormatForState,return )

void ItemRenderer_obj::setSecondaryTextFormatForState( ::feathers::controls::ToggleButtonState state, ::feathers::text::TextFormat textFormat){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_415_setSecondaryTextFormatForState)
HXLINE( 416)		if (!(this->setStyle(HX_("setSecondaryTextFormatForState",3e,26,8b,f1),state))) {
HXLINE( 417)			return;
            		}
HXLINE( 419)		if (::hx::IsNull( textFormat )) {
HXLINE( 420)			this->_stateToSecondaryTextFormat->remove(state);
            		}
            		else {
HXLINE( 422)			this->_stateToSecondaryTextFormat->set(state,textFormat);
            		}
HXLINE( 424)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC2(ItemRenderer_obj,setSecondaryTextFormatForState,(void))

void ItemRenderer_obj::initializeItemRendererTheme(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_429_initializeItemRendererTheme)
HXDLIN( 429)		::feathers::themes::steel::components::SteelItemRendererStyles_obj::initialize(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,initializeItemRendererTheme,(void))

void ItemRenderer_obj::initialize(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_433_initialize)
HXLINE( 434)		this->super::initialize();
HXLINE( 435)		this->_pointerToState->set_customHitTest(this->customHitTest_dyn());
HXLINE( 436)		this->_pointerTrigger->set_customHitTest(this->customHitTest_dyn());
            	}


void ItemRenderer_obj::update(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_439_update)
HXLINE( 440)		bool dataInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::DATA_dyn());
HXLINE( 441)		bool sizeInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::SIZE_dyn());
HXLINE( 442)		bool stateInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::STATE_dyn());
HXLINE( 443)		bool stylesInvalid = this->isInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 445)		this->_updatedSecondaryTextStyles = false;
HXLINE( 447)		if (dataInvalid) {
HXLINE( 448)			 ::openfl::display::InteractiveObject _hx_tmp;
HXDLIN( 448)			if (::hx::IsNotNull( this->_pointerTarget )) {
HXLINE( 448)				_hx_tmp = this->_pointerTarget;
            			}
            			else {
HXLINE( 448)				_hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
            			}
HXDLIN( 448)			this->_pointerToState->set_target(_hx_tmp);
HXLINE( 449)			this->refreshSecondaryTextField();
            		}
HXLINE( 452)		bool _hx_tmp1;
HXDLIN( 452)		bool _hx_tmp2;
HXDLIN( 452)		if (!(dataInvalid)) {
HXLINE( 452)			_hx_tmp2 = stylesInvalid;
            		}
            		else {
HXLINE( 452)			_hx_tmp2 = true;
            		}
HXDLIN( 452)		if (!(_hx_tmp2)) {
HXLINE( 452)			_hx_tmp1 = stateInvalid;
            		}
            		else {
HXLINE( 452)			_hx_tmp1 = true;
            		}
HXDLIN( 452)		if (_hx_tmp1) {
HXLINE( 453)			this->refreshSecondaryTextStyles();
            		}
HXLINE( 456)		bool _hx_tmp3;
HXDLIN( 456)		if (!(stylesInvalid)) {
HXLINE( 456)			_hx_tmp3 = stateInvalid;
            		}
            		else {
HXLINE( 456)			_hx_tmp3 = true;
            		}
HXDLIN( 456)		if (_hx_tmp3) {
HXLINE( 457)			this->refreshAccessoryView();
            		}
HXLINE( 460)		bool _hx_tmp4;
HXDLIN( 460)		bool _hx_tmp5;
HXDLIN( 460)		bool _hx_tmp6;
HXDLIN( 460)		if (!(dataInvalid)) {
HXLINE( 460)			_hx_tmp6 = stylesInvalid;
            		}
            		else {
HXLINE( 460)			_hx_tmp6 = true;
            		}
HXDLIN( 460)		if (!(_hx_tmp6)) {
HXLINE( 460)			_hx_tmp5 = stateInvalid;
            		}
            		else {
HXLINE( 460)			_hx_tmp5 = true;
            		}
HXDLIN( 460)		if (!(_hx_tmp5)) {
HXLINE( 460)			_hx_tmp4 = sizeInvalid;
            		}
            		else {
HXLINE( 460)			_hx_tmp4 = true;
            		}
HXDLIN( 460)		if (_hx_tmp4) {
HXLINE( 461)			this->refreshSecondaryText(sizeInvalid);
            		}
HXLINE( 464)		this->super::update();
            	}


void ItemRenderer_obj::refreshSecondaryTextField(){
            	HX_GC_STACKFRAME(&_hx_pos_57908de65a73485d_467_refreshSecondaryTextField)
HXLINE( 468)		bool _hx_tmp;
HXDLIN( 468)		if (::hx::IsNull( this->_secondaryText )) {
HXLINE( 468)			_hx_tmp = ::hx::IsNull( this->_secondaryHtmlText );
            		}
            		else {
HXLINE( 468)			_hx_tmp = false;
            		}
HXDLIN( 468)		if (_hx_tmp) {
HXLINE( 469)			if (::hx::IsNotNull( this->secondaryTextField )) {
HXLINE( 470)				this->removeChild(this->secondaryTextField);
HXLINE( 471)				this->secondaryTextField = null();
            			}
HXLINE( 473)			this->_previousSecondaryText = null();
HXLINE( 474)			this->_previousSecondaryHTMLText = null();
HXLINE( 475)			this->_previousSecondaryTextFormat = null();
HXLINE( 476)			this->_previousSecondarySimpleTextFormat = null();
HXLINE( 477)			return;
            		}
HXLINE( 479)		if (::hx::IsNotNull( this->secondaryTextField )) {
HXLINE( 480)			return;
            		}
HXLINE( 482)		this->secondaryTextField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 483)		this->secondaryTextField->set_selectable(false);
HXLINE( 484)		this->secondaryTextField->set_multiline(true);
HXLINE( 485)		this->addChild(this->secondaryTextField);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,refreshSecondaryTextField,(void))

void ItemRenderer_obj::refreshSecondaryTextStyles(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_488_refreshSecondaryTextStyles)
HXLINE( 489)		if (::hx::IsNull( this->secondaryTextField )) {
HXLINE( 490)			return;
            		}
HXLINE( 492)		bool _hx_tmp = this->secondaryTextField->get_embedFonts();
HXDLIN( 492)		if ((_hx_tmp != this->get_embedFonts())) {
HXLINE( 493)			 ::openfl::text::TextField _hx_tmp1 = this->secondaryTextField;
HXDLIN( 493)			_hx_tmp1->set_embedFonts(this->get_embedFonts());
HXLINE( 494)			this->_updatedSecondaryTextStyles = true;
            		}
HXLINE( 496)		 ::feathers::text::TextFormat textFormat = this->getCurrentSecondaryTextFormat();
HXLINE( 497)		 ::openfl::text::TextFormat simpleTextFormat;
HXDLIN( 497)		if (::hx::IsNotNull( textFormat )) {
HXLINE( 497)			simpleTextFormat = textFormat->toSimpleTextFormat();
            		}
            		else {
HXLINE( 497)			simpleTextFormat = null();
            		}
HXLINE( 498)		if (::hx::IsInstanceEq( simpleTextFormat,this->_previousSecondarySimpleTextFormat )) {
HXLINE( 500)			return;
            		}
HXLINE( 502)		if (::hx::IsNotNull( this->_previousSecondaryTextFormat )) {
HXLINE( 503)			this->_previousSecondaryTextFormat->removeEventListener(HX_("change",70,91,72,b7),this->itemRenderer_secondaryTextFormat_changeHandler_dyn(),null());
            		}
HXLINE( 505)		if (::hx::IsNotNull( textFormat )) {
HXLINE( 506)			textFormat->addEventListener(HX_("change",70,91,72,b7),this->itemRenderer_secondaryTextFormat_changeHandler_dyn(),false,0,true);
HXLINE( 507)			this->secondaryTextField->set_defaultTextFormat(simpleTextFormat);
HXLINE( 508)			this->_updatedSecondaryTextStyles = true;
            		}
HXLINE( 510)		this->_previousSecondaryTextFormat = textFormat;
HXLINE( 511)		this->_previousSecondarySimpleTextFormat = simpleTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,refreshSecondaryTextStyles,(void))

void ItemRenderer_obj::refreshSecondaryText(bool forceMeasurement){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_514_refreshSecondaryText)
HXLINE( 515)		if (::hx::IsNull( this->secondaryTextField )) {
HXLINE( 516)			return;
            		}
HXLINE( 518)		bool hasSecondaryText;
HXDLIN( 518)		bool hasSecondaryText1;
HXDLIN( 518)		if (this->get_showSecondaryText()) {
HXLINE( 518)			hasSecondaryText1 = ::hx::IsNotNull( this->_secondaryText );
            		}
            		else {
HXLINE( 518)			hasSecondaryText1 = false;
            		}
HXDLIN( 518)		if (hasSecondaryText1) {
HXLINE( 518)			hasSecondaryText = (this->_secondaryText.length > 0);
            		}
            		else {
HXLINE( 518)			hasSecondaryText = false;
            		}
HXLINE( 519)		bool hasSecondaryHTMLText;
HXDLIN( 519)		bool hasSecondaryHTMLText1;
HXDLIN( 519)		if (this->get_showSecondaryText()) {
HXLINE( 519)			hasSecondaryHTMLText1 = ::hx::IsNotNull( this->_secondaryHtmlText );
            		}
            		else {
HXLINE( 519)			hasSecondaryHTMLText1 = false;
            		}
HXDLIN( 519)		if (hasSecondaryHTMLText1) {
HXLINE( 519)			hasSecondaryHTMLText = (this->_secondaryHtmlText.length > 0);
            		}
            		else {
HXLINE( 519)			hasSecondaryHTMLText = false;
            		}
HXLINE( 520)		bool _hx_tmp;
HXDLIN( 520)		if (!(hasSecondaryText)) {
HXLINE( 520)			_hx_tmp = hasSecondaryHTMLText;
            		}
            		else {
HXLINE( 520)			_hx_tmp = true;
            		}
HXDLIN( 520)		this->secondaryTextField->set_visible(_hx_tmp);
HXLINE( 521)		bool _hx_tmp1;
HXDLIN( 521)		bool _hx_tmp2;
HXDLIN( 521)		bool _hx_tmp3;
HXDLIN( 521)		if ((this->_secondaryText == this->_previousSecondaryText)) {
HXLINE( 521)			_hx_tmp3 = (this->_secondaryHtmlText == this->_previousSecondaryHTMLText);
            		}
            		else {
HXLINE( 521)			_hx_tmp3 = false;
            		}
HXDLIN( 521)		if (_hx_tmp3) {
HXLINE( 521)			_hx_tmp2 = !(this->_updatedSecondaryTextStyles);
            		}
            		else {
HXLINE( 521)			_hx_tmp2 = false;
            		}
HXDLIN( 521)		if (_hx_tmp2) {
HXLINE( 521)			_hx_tmp1 = !(forceMeasurement);
            		}
            		else {
HXLINE( 521)			_hx_tmp1 = false;
            		}
HXDLIN( 521)		if (_hx_tmp1) {
HXLINE( 526)			return;
            		}
HXLINE( 530)		this->secondaryTextField->set_autoSize(1);
HXLINE( 531)		if (hasSecondaryHTMLText) {
HXLINE( 532)			this->secondaryTextField->set_htmlText(this->_secondaryHtmlText);
            		}
            		else {
HXLINE( 533)			if (hasSecondaryText) {
HXLINE( 534)				this->secondaryTextField->set_text(this->_secondaryText);
            			}
            			else {
HXLINE( 536)				this->secondaryTextField->set_text(HX_W(u"\u200b",ed6d,00ab));
            			}
            		}
HXLINE( 538)		this->_secondaryTextMeasuredWidth = this->secondaryTextField->get_width();
HXLINE( 539)		this->_secondaryTextMeasuredHeight = this->secondaryTextField->get_height();
HXLINE( 540)		this->secondaryTextField->set_autoSize(2);
HXLINE( 541)		bool _hx_tmp4;
HXDLIN( 541)		if (!(hasSecondaryText)) {
HXLINE( 541)			_hx_tmp4 = !(hasSecondaryHTMLText);
            		}
            		else {
HXLINE( 541)			_hx_tmp4 = false;
            		}
HXDLIN( 541)		if (_hx_tmp4) {
HXLINE( 542)			this->secondaryTextField->set_text(HX_("",00,00,00,00));
            		}
HXLINE( 544)		this->_previousSecondaryText = this->_secondaryText;
HXLINE( 545)		this->_previousSecondaryHTMLText = this->_secondaryHtmlText;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,refreshSecondaryText,(void))

 ::feathers::text::TextFormat ItemRenderer_obj::getCurrentSecondaryTextFormat(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_548_getCurrentSecondaryTextFormat)
HXLINE( 549)		 ::feathers::text::TextFormat result = this->_stateToSecondaryTextFormat->get(this->_currentState).StaticCast<  ::feathers::text::TextFormat >();
HXLINE( 550)		if (::hx::IsNotNull( result )) {
HXLINE( 551)			return result;
            		}
HXLINE( 553)		bool _hx_tmp;
HXDLIN( 553)		if (!(this->_enabled)) {
HXLINE( 553)			_hx_tmp = ::hx::IsNotNull( this->get_disabledSecondaryTextFormat() );
            		}
            		else {
HXLINE( 553)			_hx_tmp = false;
            		}
HXDLIN( 553)		if (_hx_tmp) {
HXLINE( 554)			return this->get_disabledSecondaryTextFormat();
            		}
HXLINE( 556)		bool _hx_tmp1;
HXDLIN( 556)		if (this->_selected) {
HXLINE( 556)			_hx_tmp1 = ::hx::IsNotNull( this->get_selectedSecondaryTextFormat() );
            		}
            		else {
HXLINE( 556)			_hx_tmp1 = false;
            		}
HXDLIN( 556)		if (_hx_tmp1) {
HXLINE( 557)			return this->get_selectedSecondaryTextFormat();
            		}
HXLINE( 559)		return this->get_secondaryTextFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,getCurrentSecondaryTextFormat,return )

void ItemRenderer_obj::refreshAccessoryView(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_562_refreshAccessoryView)
HXLINE( 563)		 ::openfl::display::DisplayObject oldView = this->_currentAccessoryView;
HXLINE( 564)		this->_currentAccessoryView = this->getCurrentAccessoryView();
HXLINE( 565)		if (::hx::IsInstanceEq( this->_currentAccessoryView,oldView )) {
HXLINE( 566)			return;
            		}
HXLINE( 568)		this->removeCurrentAccessoryView(oldView);
HXLINE( 569)		this->addCurrentAccessoryView(this->_currentAccessoryView);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,refreshAccessoryView,(void))

 ::openfl::display::DisplayObject ItemRenderer_obj::getCurrentAccessoryView(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_573_getCurrentAccessoryView)
HXDLIN( 573)		return this->get_accessoryView();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,getCurrentAccessoryView,return )

void ItemRenderer_obj::removeCurrentAccessoryView( ::openfl::display::DisplayObject view){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_576_removeCurrentAccessoryView)
HXLINE( 577)		if (::hx::IsNull( view )) {
HXLINE( 578)			return;
            		}
HXLINE( 580)		view->removeEventListener(HX_("resize",f4,59,7b,08),this->itemRenderer_accessoryView_resizeHandler_dyn(),null());
HXLINE( 581)		if (::Std_obj::isOfType(view,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE( 582)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(view,0x32a0d8d6),null());
            		}
HXLINE( 584)		if (::Std_obj::isOfType(view,::hx::ClassOf< ::feathers::core::IStateObserver >())) {
HXLINE( 585)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(view,0xb36ec70d),null());
            		}
HXLINE( 589)		this->_accessoryViewMeasurements->restore(view);
HXLINE( 590)		if (::hx::IsInstanceEq( view->parent,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 591)			this->removeChild(view);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,removeCurrentAccessoryView,(void))

void ItemRenderer_obj::addCurrentAccessoryView( ::openfl::display::DisplayObject view){
            	HX_GC_STACKFRAME(&_hx_pos_57908de65a73485d_595_addCurrentAccessoryView)
HXLINE( 596)		if (::hx::IsNull( view )) {
HXLINE( 597)			this->_accessoryViewMeasurements = null();
HXLINE( 598)			return;
            		}
HXLINE( 600)		if (::Std_obj::isOfType(view,::hx::ClassOf< ::feathers::core::IUIControl >())) {
HXLINE( 601)			::feathers::core::IUIControl_obj::initializeNow( ::hx::interface_check(view,0x2696a04f));
            		}
HXLINE( 603)		if (::hx::IsNull( this->_accessoryViewMeasurements )) {
HXLINE( 604)			this->_accessoryViewMeasurements =  ::feathers::layout::Measurements_obj::__alloc( HX_CTX ,view);
            		}
            		else {
HXLINE( 606)			this->_accessoryViewMeasurements->save(view);
            		}
HXLINE( 608)		if (::Std_obj::isOfType(view,::hx::ClassOf< ::feathers::skins::IProgrammaticSkin >())) {
HXLINE( 609)			::feathers::skins::IProgrammaticSkin_obj::set_uiContext( ::hx::interface_check(view,0x32a0d8d6),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 611)		if (::Std_obj::isOfType(view,::hx::ClassOf< ::feathers::core::IStateObserver >())) {
HXLINE( 612)			::feathers::core::IStateObserver_obj::set_stateContext( ::hx::interface_check(view,0xb36ec70d),::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 614)		view->addEventListener(HX_("resize",f4,59,7b,08),this->itemRenderer_accessoryView_resizeHandler_dyn(),false,0,true);
HXLINE( 615)		this->addChild(view);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,addCurrentAccessoryView,(void))

bool ItemRenderer_obj::customHitTest(Float stageX,Float stageY){
            	HX_GC_STACKFRAME(&_hx_pos_57908de65a73485d_618_customHitTest)
HXLINE( 619)		 ::openfl::display::DisplayObjectContainer pointerTargetContainer = ( ( ::openfl::display::DisplayObjectContainer)(::Std_obj::downcast(this->_pointerTarget,::hx::ClassOf< ::openfl::display::DisplayObjectContainer >())) );
HXLINE( 620)		if (::hx::IsNull( pointerTargetContainer )) {
HXLINE( 621)			pointerTargetContainer = ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 623)		if (::hx::IsNull( pointerTargetContainer->stage )) {
HXLINE( 624)			return false;
            		}
HXLINE( 626)		if (pointerTargetContainer->mouseChildren) {
HXLINE( 627)			 ::openfl::display::Stage pointerTargetContainer1 = pointerTargetContainer->stage;
HXDLIN( 627)			::Array< ::Dynamic> objects = pointerTargetContainer1->getObjectsUnderPoint( ::openfl::geom::Point_obj::__alloc( HX_CTX ,stageX,stageY));
HXLINE( 628)			if ((objects->length > 0)) {
HXLINE( 629)				 ::openfl::display::DisplayObject lastObject = objects->__get((objects->length - 1)).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 630)				if (pointerTargetContainer->contains(lastObject)) {
HXLINE( 631)					while(true){
HXLINE( 631)						bool _hx_tmp;
HXDLIN( 631)						if (::hx::IsNotNull( lastObject )) {
HXLINE( 631)							_hx_tmp = ::hx::IsInstanceNotEq( lastObject,pointerTargetContainer );
            						}
            						else {
HXLINE( 631)							_hx_tmp = false;
            						}
HXDLIN( 631)						if (!(_hx_tmp)) {
HXLINE( 631)							goto _hx_goto_27;
            						}
HXLINE( 632)						if (::Std_obj::isOfType(lastObject,::hx::ClassOf< ::openfl::display::InteractiveObject >())) {
HXLINE( 633)							 ::openfl::display::InteractiveObject interactive = ::hx::TCast<  ::openfl::display::InteractiveObject >::cast(lastObject);
HXLINE( 634)							if (!(interactive->mouseEnabled)) {
HXLINE( 635)								lastObject = lastObject->parent;
HXLINE( 636)								continue;
            							}
            						}
HXLINE( 639)						if (::Std_obj::isOfType(lastObject,::hx::ClassOf< ::feathers::core::IFocusObject >())) {
HXLINE( 640)							::Dynamic focusable =  ::hx::interface_check(lastObject,0x701686fd);
HXLINE( 641)							bool _hx_tmp1;
HXDLIN( 641)							if (::hx::IsInstanceNotEq( focusable->__Field(HX_("parent",2a,05,7e,ed),::hx::paccDynamic),this->_pointerTarget )) {
HXLINE( 641)								_hx_tmp1 = ::feathers::core::IFocusObject_obj::get_focusEnabled(focusable);
            							}
            							else {
HXLINE( 641)								_hx_tmp1 = false;
            							}
HXDLIN( 641)							if (_hx_tmp1) {
HXLINE( 642)								return false;
            							}
            						}
HXLINE( 645)						lastObject = lastObject->parent;
            					}
            					_hx_goto_27:;
            				}
            			}
            		}
HXLINE( 650)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ItemRenderer_obj,customHitTest,return )

void ItemRenderer_obj::refreshTextFieldDimensions(bool forMeasurement){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_653_refreshTextFieldDimensions)
HXLINE( 654)		bool oldIgnoreIconResizes = this->_ignoreIconResizes;
HXLINE( 655)		this->_ignoreIconResizes = true;
HXLINE( 656)		if (::Std_obj::isOfType(this->_currentIcon,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 657)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentIcon,0x64d4b3cd));
            		}
HXLINE( 659)		this->_ignoreIconResizes = oldIgnoreIconResizes;
HXLINE( 660)		bool oldIgnoreAccessoryResizes = this->_ignoreAccessoryResizes;
HXLINE( 661)		this->_ignoreAccessoryResizes = true;
HXLINE( 662)		if (::Std_obj::isOfType(this->_currentAccessoryView,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 663)			::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentAccessoryView,0x64d4b3cd));
            		}
HXLINE( 665)		this->_ignoreAccessoryResizes = oldIgnoreAccessoryResizes;
HXLINE( 666)		bool hasText;
HXDLIN( 666)		if (this->get_showText()) {
HXLINE( 666)			hasText = ::hx::IsNotNull( this->_text );
            		}
            		else {
HXLINE( 666)			hasText = false;
            		}
HXLINE( 667)		bool hasHTMLText;
HXDLIN( 667)		bool hasHTMLText1;
HXDLIN( 667)		if (this->get_showText()) {
HXLINE( 667)			hasHTMLText1 = ::hx::IsNotNull( this->_htmlText );
            		}
            		else {
HXLINE( 667)			hasHTMLText1 = false;
            		}
HXDLIN( 667)		if (hasHTMLText1) {
HXLINE( 667)			hasHTMLText = (this->_htmlText.length > 0);
            		}
            		else {
HXLINE( 667)			hasHTMLText = false;
            		}
HXLINE( 668)		bool _hx_tmp;
HXDLIN( 668)		if (!(hasText)) {
HXLINE( 668)			_hx_tmp = !(hasHTMLText);
            		}
            		else {
HXLINE( 668)			_hx_tmp = false;
            		}
HXDLIN( 668)		if (_hx_tmp) {
HXLINE( 669)			return;
            		}
HXLINE( 672)		Float calculatedWidth = this->actualWidth;
HXLINE( 673)		Float calculatedHeight = this->actualHeight;
HXLINE( 674)		if (forMeasurement) {
HXLINE( 675)			calculatedWidth = ((Float)0.0);
HXLINE( 676)			 ::Dynamic explicitCalculatedWidth = this->get_explicitWidth();
HXLINE( 677)			if (::hx::IsNull( explicitCalculatedWidth )) {
HXLINE( 678)				explicitCalculatedWidth = this->get_explicitMaxWidth();
            			}
HXLINE( 680)			if (::hx::IsNotNull( explicitCalculatedWidth )) {
HXLINE( 681)				calculatedWidth = ( (Float)(explicitCalculatedWidth) );
            			}
HXLINE( 683)			calculatedHeight = ((Float)0.0);
HXLINE( 684)			 ::Dynamic explicitCalculatedHeight = this->get_explicitHeight();
HXLINE( 685)			if (::hx::IsNull( explicitCalculatedHeight )) {
HXLINE( 686)				explicitCalculatedHeight = this->get_explicitMaxHeight();
            			}
HXLINE( 688)			if (::hx::IsNotNull( explicitCalculatedHeight )) {
HXLINE( 689)				calculatedHeight = ( (Float)(explicitCalculatedHeight) );
            			}
            		}
HXLINE( 692)		Float calculatedWidth1 = this->get_paddingLeft();
HXDLIN( 692)		calculatedWidth = (calculatedWidth - (calculatedWidth1 + this->get_paddingRight()));
HXLINE( 693)		Float calculatedHeight1 = this->get_paddingTop();
HXDLIN( 693)		calculatedHeight = (calculatedHeight - (calculatedHeight1 + this->get_paddingBottom()));
HXLINE( 694)		Float adjustedGap = this->get_gap();
HXLINE( 696)		if ((adjustedGap == ::hx::DivByZero(((Float)1.0)))) {
HXLINE( 697)			adjustedGap = this->get_minGap();
            		}
HXLINE( 699)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 700)			bool _hx_tmp1;
HXDLIN( 700)			if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 700)				_hx_tmp1 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            			}
            			else {
HXLINE( 700)				_hx_tmp1 = true;
            			}
HXDLIN( 700)			if (_hx_tmp1) {
HXLINE( 701)				calculatedWidth = (calculatedWidth - (this->_currentIcon->get_width() + adjustedGap));
            			}
HXLINE( 703)			bool _hx_tmp2;
HXDLIN( 703)			if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 703)				_hx_tmp2 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            			}
            			else {
HXLINE( 703)				_hx_tmp2 = true;
            			}
HXDLIN( 703)			if (_hx_tmp2) {
HXLINE( 704)				calculatedHeight = (calculatedHeight - (this->_currentIcon->get_height() + adjustedGap));
            			}
            		}
HXLINE( 707)		if (this->hasAccessoryViewInLayout()) {
HXLINE( 708)			calculatedWidth = (calculatedWidth - (this->_currentAccessoryView->get_width() + adjustedGap));
            		}
HXLINE( 710)		if (::hx::IsNotNull( this->secondaryTextField )) {
HXLINE( 711)			calculatedHeight = (calculatedHeight - (this->_secondaryTextMeasuredHeight + adjustedGap));
            		}
HXLINE( 713)		if ((calculatedWidth < ((Float)0.0))) {
HXLINE( 714)			calculatedWidth = ((Float)0.0);
            		}
HXLINE( 716)		if ((calculatedHeight < ((Float)0.0))) {
HXLINE( 717)			calculatedHeight = ((Float)0.0);
            		}
HXLINE( 719)		if ((calculatedWidth > this->_textMeasuredWidth)) {
HXLINE( 720)			calculatedWidth = this->_textMeasuredWidth;
            		}
HXLINE( 722)		if ((calculatedHeight > this->_textMeasuredHeight)) {
HXLINE( 723)			calculatedHeight = this->_textMeasuredHeight;
            		}
HXLINE( 725)		this->textField->set_width(calculatedWidth);
HXLINE( 726)		bool wordWrap = this->get_wordWrap();
HXLINE( 727)		bool _hx_tmp3;
HXDLIN( 727)		bool _hx_tmp4;
HXDLIN( 727)		if (wordWrap) {
HXLINE( 727)			_hx_tmp4 = !(this->_wrappedOnMeasure);
            		}
            		else {
HXLINE( 727)			_hx_tmp4 = false;
            		}
HXDLIN( 727)		if (_hx_tmp4) {
HXLINE( 727)			_hx_tmp3 = (calculatedWidth >= this->_textMeasuredWidth);
            		}
            		else {
HXLINE( 727)			_hx_tmp3 = false;
            		}
HXDLIN( 727)		if (_hx_tmp3) {
HXLINE( 732)			wordWrap = false;
            		}
HXLINE( 734)		if ((this->textField->get_wordWrap() != wordWrap)) {
HXLINE( 735)			this->textField->set_wordWrap(wordWrap);
            		}
HXLINE( 738)		this->textField->set_height(calculatedHeight);
            	}


 ::Dynamic ItemRenderer_obj::calculateExplicitWidthForTextMeasurement(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_741_calculateExplicitWidthForTextMeasurement)
HXLINE( 742)		 ::Dynamic textFieldExplicitWidth = this->super::calculateExplicitWidthForTextMeasurement();
HXLINE( 743)		if (::hx::IsNull( textFieldExplicitWidth )) {
HXLINE( 744)			return textFieldExplicitWidth;
            		}
HXLINE( 746)		Float adjustedGap = this->get_gap();
HXLINE( 748)		if ((adjustedGap == ::hx::DivByZero(((Float)1.0)))) {
HXLINE( 749)			adjustedGap = this->get_minGap();
            		}
HXLINE( 751)		if (this->hasAccessoryViewInLayout()) {
HXLINE( 752)			bool oldIgnoreAccessoryResizes = this->_ignoreAccessoryResizes;
HXLINE( 753)			this->_ignoreAccessoryResizes = true;
HXLINE( 754)			if (::Std_obj::isOfType(this->_currentAccessoryView,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 755)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentAccessoryView,0x64d4b3cd));
            			}
HXLINE( 757)			this->_ignoreAccessoryResizes = oldIgnoreAccessoryResizes;
HXLINE( 758)			textFieldExplicitWidth = (textFieldExplicitWidth - (this->_currentAccessoryView->get_width() + adjustedGap));
            		}
HXLINE( 760)		if (::hx::IsLess( textFieldExplicitWidth,((Float)0.0) )) {
HXLINE( 761)			textFieldExplicitWidth = ((Float)0.0);
            		}
HXLINE( 763)		return textFieldExplicitWidth;
            	}


Float ItemRenderer_obj::measureContentWidth(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_766_measureContentWidth)
HXLINE( 767)		Float adjustedGap = this->get_gap();
HXLINE( 769)		if ((adjustedGap == ::hx::DivByZero(((Float)1.0)))) {
HXLINE( 770)			adjustedGap = this->get_minGap();
            		}
HXLINE( 772)		bool hasText;
HXDLIN( 772)		if (this->get_showText()) {
HXLINE( 772)			hasText = ::hx::IsNotNull( this->_text );
            		}
            		else {
HXLINE( 772)			hasText = false;
            		}
HXLINE( 773)		bool hasHTMLText;
HXDLIN( 773)		bool hasHTMLText1;
HXDLIN( 773)		if (this->get_showText()) {
HXLINE( 773)			hasHTMLText1 = ::hx::IsNotNull( this->_htmlText );
            		}
            		else {
HXLINE( 773)			hasHTMLText1 = false;
            		}
HXDLIN( 773)		if (hasHTMLText1) {
HXLINE( 773)			hasHTMLText = (this->_htmlText.length > 0);
            		}
            		else {
HXLINE( 773)			hasHTMLText = false;
            		}
HXLINE( 774)		Float contentWidth;
HXDLIN( 774)		bool contentWidth1;
HXDLIN( 774)		if (!(hasText)) {
HXLINE( 774)			contentWidth1 = hasHTMLText;
            		}
            		else {
HXLINE( 774)			contentWidth1 = true;
            		}
HXDLIN( 774)		if (contentWidth1) {
HXLINE( 774)			contentWidth = this->_textMeasuredWidth;
            		}
            		else {
HXLINE( 774)			contentWidth = ((Float)0.0);
            		}
HXLINE( 775)		bool hasSecondaryText;
HXDLIN( 775)		if (this->get_showSecondaryText()) {
HXLINE( 775)			hasSecondaryText = ::hx::IsNotNull( this->_secondaryText );
            		}
            		else {
HXLINE( 775)			hasSecondaryText = false;
            		}
HXLINE( 776)		bool hasSecondaryHTMLText;
HXDLIN( 776)		bool hasSecondaryHTMLText1;
HXDLIN( 776)		if (this->get_showSecondaryText()) {
HXLINE( 776)			hasSecondaryHTMLText1 = ::hx::IsNotNull( this->_secondaryHtmlText );
            		}
            		else {
HXLINE( 776)			hasSecondaryHTMLText1 = false;
            		}
HXDLIN( 776)		if (hasSecondaryHTMLText1) {
HXLINE( 776)			hasSecondaryHTMLText = (this->_secondaryHtmlText.length > 0);
            		}
            		else {
HXLINE( 776)			hasSecondaryHTMLText = false;
            		}
HXLINE( 777)		bool _hx_tmp;
HXDLIN( 777)		if (!(hasSecondaryText)) {
HXLINE( 777)			_hx_tmp = hasSecondaryHTMLText;
            		}
            		else {
HXLINE( 777)			_hx_tmp = true;
            		}
HXDLIN( 777)		if (_hx_tmp) {
HXLINE( 778)			contentWidth = ::Math_obj::max(contentWidth,this->_secondaryTextMeasuredWidth);
            		}
HXLINE( 780)		if (this->hasAccessoryViewInLayout()) {
HXLINE( 781)			bool oldIgnoreAccessoryResizes = this->_ignoreAccessoryResizes;
HXLINE( 782)			this->_ignoreAccessoryResizes = true;
HXLINE( 783)			if (::Std_obj::isOfType(this->_currentAccessoryView,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 784)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentAccessoryView,0x64d4b3cd));
            			}
HXLINE( 786)			this->_ignoreAccessoryResizes = oldIgnoreAccessoryResizes;
HXLINE( 787)			bool _hx_tmp1;
HXDLIN( 787)			bool _hx_tmp2;
HXDLIN( 787)			bool _hx_tmp3;
HXDLIN( 787)			if (!(hasText)) {
HXLINE( 787)				_hx_tmp3 = hasHTMLText;
            			}
            			else {
HXLINE( 787)				_hx_tmp3 = true;
            			}
HXDLIN( 787)			if (!(_hx_tmp3)) {
HXLINE( 787)				_hx_tmp2 = hasSecondaryText;
            			}
            			else {
HXLINE( 787)				_hx_tmp2 = true;
            			}
HXDLIN( 787)			if (!(_hx_tmp2)) {
HXLINE( 787)				_hx_tmp1 = hasSecondaryHTMLText;
            			}
            			else {
HXLINE( 787)				_hx_tmp1 = true;
            			}
HXDLIN( 787)			if (_hx_tmp1) {
HXLINE( 788)				contentWidth = (contentWidth + adjustedGap);
            			}
HXLINE( 790)			contentWidth = (contentWidth + this->_currentAccessoryView->get_width());
            		}
HXLINE( 792)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 793)			bool _hx_tmp4;
HXDLIN( 793)			if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 793)				_hx_tmp4 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            			}
            			else {
HXLINE( 793)				_hx_tmp4 = true;
            			}
HXDLIN( 793)			if (_hx_tmp4) {
HXLINE( 794)				bool _hx_tmp5;
HXDLIN( 794)				bool _hx_tmp6;
HXDLIN( 794)				bool _hx_tmp7;
HXDLIN( 794)				bool _hx_tmp8;
HXDLIN( 794)				if (!(hasText)) {
HXLINE( 794)					_hx_tmp8 = hasHTMLText;
            				}
            				else {
HXLINE( 794)					_hx_tmp8 = true;
            				}
HXDLIN( 794)				if (!(_hx_tmp8)) {
HXLINE( 794)					_hx_tmp7 = hasSecondaryText;
            				}
            				else {
HXLINE( 794)					_hx_tmp7 = true;
            				}
HXDLIN( 794)				if (!(_hx_tmp7)) {
HXLINE( 794)					_hx_tmp6 = hasSecondaryHTMLText;
            				}
            				else {
HXLINE( 794)					_hx_tmp6 = true;
            				}
HXDLIN( 794)				if (!(_hx_tmp6)) {
HXLINE( 794)					_hx_tmp5 = this->hasAccessoryViewInLayout();
            				}
            				else {
HXLINE( 794)					_hx_tmp5 = true;
            				}
HXDLIN( 794)				if (_hx_tmp5) {
HXLINE( 795)					contentWidth = (contentWidth + adjustedGap);
            				}
HXLINE( 797)				contentWidth = (contentWidth + this->_currentIcon->get_width());
            			}
            			else {
HXLINE( 798)				bool _hx_tmp9;
HXDLIN( 798)				if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 798)					_hx_tmp9 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            				}
            				else {
HXLINE( 798)					_hx_tmp9 = true;
            				}
HXDLIN( 798)				if (_hx_tmp9) {
HXLINE( 799)					contentWidth = ::Math_obj::max(contentWidth,this->_currentIcon->get_width());
            				}
            			}
            		}
HXLINE( 802)		return contentWidth;
            	}


Float ItemRenderer_obj::measureContentHeight(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_805_measureContentHeight)
HXLINE( 806)		Float adjustedGap = this->get_gap();
HXLINE( 808)		if ((adjustedGap == ::hx::DivByZero(((Float)1.0)))) {
HXLINE( 809)			adjustedGap = this->get_minGap();
            		}
HXLINE( 812)		bool hasText;
HXDLIN( 812)		if (this->get_showText()) {
HXLINE( 812)			hasText = ::hx::IsNotNull( this->_text );
            		}
            		else {
HXLINE( 812)			hasText = false;
            		}
HXLINE( 813)		bool hasHTMLText;
HXDLIN( 813)		bool hasHTMLText1;
HXDLIN( 813)		if (this->get_showText()) {
HXLINE( 813)			hasHTMLText1 = ::hx::IsNotNull( this->_htmlText );
            		}
            		else {
HXLINE( 813)			hasHTMLText1 = false;
            		}
HXDLIN( 813)		if (hasHTMLText1) {
HXLINE( 813)			hasHTMLText = (this->_htmlText.length > 0);
            		}
            		else {
HXLINE( 813)			hasHTMLText = false;
            		}
HXLINE( 814)		Float contentHeight;
HXDLIN( 814)		bool contentHeight1;
HXDLIN( 814)		if (!(hasText)) {
HXLINE( 814)			contentHeight1 = hasHTMLText;
            		}
            		else {
HXLINE( 814)			contentHeight1 = true;
            		}
HXDLIN( 814)		if (contentHeight1) {
HXLINE( 814)			contentHeight = this->_textMeasuredHeight;
            		}
            		else {
HXLINE( 814)			contentHeight = ((Float)0.0);
            		}
HXLINE( 815)		bool hasSecondaryText;
HXDLIN( 815)		if (this->get_showSecondaryText()) {
HXLINE( 815)			hasSecondaryText = ::hx::IsNotNull( this->_secondaryText );
            		}
            		else {
HXLINE( 815)			hasSecondaryText = false;
            		}
HXLINE( 816)		bool hasSecondaryHTMLText;
HXDLIN( 816)		bool hasSecondaryHTMLText1;
HXDLIN( 816)		if (this->get_showSecondaryText()) {
HXLINE( 816)			hasSecondaryHTMLText1 = ::hx::IsNotNull( this->_secondaryHtmlText );
            		}
            		else {
HXLINE( 816)			hasSecondaryHTMLText1 = false;
            		}
HXDLIN( 816)		if (hasSecondaryHTMLText1) {
HXLINE( 816)			hasSecondaryHTMLText = (this->_secondaryHtmlText.length > 0);
            		}
            		else {
HXLINE( 816)			hasSecondaryHTMLText = false;
            		}
HXLINE( 817)		bool _hx_tmp;
HXDLIN( 817)		if (!(hasSecondaryText)) {
HXLINE( 817)			_hx_tmp = hasSecondaryHTMLText;
            		}
            		else {
HXLINE( 817)			_hx_tmp = true;
            		}
HXDLIN( 817)		if (_hx_tmp) {
HXLINE( 818)			contentHeight = (contentHeight + this->_secondaryTextMeasuredHeight);
HXLINE( 819)			bool _hx_tmp1;
HXDLIN( 819)			if (!(hasText)) {
HXLINE( 819)				_hx_tmp1 = hasHTMLText;
            			}
            			else {
HXLINE( 819)				_hx_tmp1 = true;
            			}
HXDLIN( 819)			if (_hx_tmp1) {
HXLINE( 820)				contentHeight = (contentHeight + adjustedGap);
            			}
            		}
HXLINE( 823)		if (this->hasAccessoryViewInLayout()) {
HXLINE( 824)			bool oldIgnoreAccessoryResizes = this->_ignoreAccessoryResizes;
HXLINE( 825)			this->_ignoreAccessoryResizes = true;
HXLINE( 826)			if (::Std_obj::isOfType(this->_currentAccessoryView,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 827)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentAccessoryView,0x64d4b3cd));
            			}
HXLINE( 829)			this->_ignoreAccessoryResizes = oldIgnoreAccessoryResizes;
HXLINE( 830)			contentHeight = ::Math_obj::max(contentHeight,this->_currentAccessoryView->get_height());
            		}
HXLINE( 832)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 833)			bool _hx_tmp2;
HXDLIN( 833)			if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 833)				_hx_tmp2 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            			}
            			else {
HXLINE( 833)				_hx_tmp2 = true;
            			}
HXDLIN( 833)			if (_hx_tmp2) {
HXLINE( 834)				bool _hx_tmp3;
HXDLIN( 834)				bool _hx_tmp4;
HXDLIN( 834)				bool _hx_tmp5;
HXDLIN( 834)				if (!(hasText)) {
HXLINE( 834)					_hx_tmp5 = hasHTMLText;
            				}
            				else {
HXLINE( 834)					_hx_tmp5 = true;
            				}
HXDLIN( 834)				if (!(_hx_tmp5)) {
HXLINE( 834)					_hx_tmp4 = hasSecondaryText;
            				}
            				else {
HXLINE( 834)					_hx_tmp4 = true;
            				}
HXDLIN( 834)				if (!(_hx_tmp4)) {
HXLINE( 834)					_hx_tmp3 = hasSecondaryHTMLText;
            				}
            				else {
HXLINE( 834)					_hx_tmp3 = true;
            				}
HXDLIN( 834)				if (_hx_tmp3) {
HXLINE( 835)					contentHeight = (contentHeight + adjustedGap);
            				}
HXLINE( 837)				contentHeight = (contentHeight + this->_currentIcon->get_height());
            			}
            			else {
HXLINE( 838)				bool _hx_tmp6;
HXDLIN( 838)				if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 838)					_hx_tmp6 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            				}
            				else {
HXLINE( 838)					_hx_tmp6 = true;
            				}
HXDLIN( 838)				if (_hx_tmp6) {
HXLINE( 839)					contentHeight = ::Math_obj::max(contentHeight,this->_currentIcon->get_height());
            				}
            			}
            		}
HXLINE( 842)		return contentHeight;
            	}


Float ItemRenderer_obj::measureContentMinWidth(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_845_measureContentMinWidth)
HXLINE( 846)		Float adjustedGap = this->get_gap();
HXLINE( 848)		if ((adjustedGap == ::hx::DivByZero(((Float)1.0)))) {
HXLINE( 849)			adjustedGap = this->get_minGap();
            		}
HXLINE( 851)		bool hasText;
HXDLIN( 851)		if (this->get_showText()) {
HXLINE( 851)			hasText = ::hx::IsNotNull( this->_text );
            		}
            		else {
HXLINE( 851)			hasText = false;
            		}
HXLINE( 852)		bool hasHTMLText;
HXDLIN( 852)		bool hasHTMLText1;
HXDLIN( 852)		if (this->get_showText()) {
HXLINE( 852)			hasHTMLText1 = ::hx::IsNotNull( this->_htmlText );
            		}
            		else {
HXLINE( 852)			hasHTMLText1 = false;
            		}
HXDLIN( 852)		if (hasHTMLText1) {
HXLINE( 852)			hasHTMLText = (this->_htmlText.length > 0);
            		}
            		else {
HXLINE( 852)			hasHTMLText = false;
            		}
HXLINE( 853)		Float contentMinWidth;
HXDLIN( 853)		bool contentMinWidth1;
HXDLIN( 853)		if (!(hasText)) {
HXLINE( 853)			contentMinWidth1 = hasHTMLText;
            		}
            		else {
HXLINE( 853)			contentMinWidth1 = true;
            		}
HXDLIN( 853)		if (contentMinWidth1) {
HXLINE( 853)			contentMinWidth = this->_textMeasuredWidth;
            		}
            		else {
HXLINE( 853)			contentMinWidth = ((Float)0.0);
            		}
HXLINE( 854)		bool hasSecondaryText;
HXDLIN( 854)		if (this->get_showSecondaryText()) {
HXLINE( 854)			hasSecondaryText = ::hx::IsNotNull( this->_secondaryText );
            		}
            		else {
HXLINE( 854)			hasSecondaryText = false;
            		}
HXLINE( 855)		bool hasSecondaryHTMLText;
HXDLIN( 855)		bool hasSecondaryHTMLText1;
HXDLIN( 855)		if (this->get_showSecondaryText()) {
HXLINE( 855)			hasSecondaryHTMLText1 = ::hx::IsNotNull( this->_secondaryHtmlText );
            		}
            		else {
HXLINE( 855)			hasSecondaryHTMLText1 = false;
            		}
HXDLIN( 855)		if (hasSecondaryHTMLText1) {
HXLINE( 855)			hasSecondaryHTMLText = (this->_secondaryHtmlText.length > 0);
            		}
            		else {
HXLINE( 855)			hasSecondaryHTMLText = false;
            		}
HXLINE( 856)		bool _hx_tmp;
HXDLIN( 856)		if (!(hasSecondaryText)) {
HXLINE( 856)			_hx_tmp = hasSecondaryHTMLText;
            		}
            		else {
HXLINE( 856)			_hx_tmp = true;
            		}
HXDLIN( 856)		if (_hx_tmp) {
HXLINE( 857)			contentMinWidth = ::Math_obj::max(contentMinWidth,this->_secondaryTextMeasuredWidth);
            		}
HXLINE( 859)		if (this->hasAccessoryViewInLayout()) {
HXLINE( 860)			bool oldIgnoreAccessoryResizes = this->_ignoreAccessoryResizes;
HXLINE( 861)			this->_ignoreAccessoryResizes = true;
HXLINE( 862)			if (::Std_obj::isOfType(this->_currentAccessoryView,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 863)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentAccessoryView,0x64d4b3cd));
            			}
HXLINE( 865)			this->_ignoreAccessoryResizes = oldIgnoreAccessoryResizes;
HXLINE( 866)			bool _hx_tmp1;
HXDLIN( 866)			bool _hx_tmp2;
HXDLIN( 866)			bool _hx_tmp3;
HXDLIN( 866)			if (!(hasText)) {
HXLINE( 866)				_hx_tmp3 = hasHTMLText;
            			}
            			else {
HXLINE( 866)				_hx_tmp3 = true;
            			}
HXDLIN( 866)			if (!(_hx_tmp3)) {
HXLINE( 866)				_hx_tmp2 = hasSecondaryText;
            			}
            			else {
HXLINE( 866)				_hx_tmp2 = true;
            			}
HXDLIN( 866)			if (!(_hx_tmp2)) {
HXLINE( 866)				_hx_tmp1 = hasSecondaryHTMLText;
            			}
            			else {
HXLINE( 866)				_hx_tmp1 = true;
            			}
HXDLIN( 866)			if (_hx_tmp1) {
HXLINE( 867)				contentMinWidth = (contentMinWidth + adjustedGap);
            			}
HXLINE( 869)			contentMinWidth = (contentMinWidth + this->_currentAccessoryView->get_width());
            		}
HXLINE( 871)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 872)			bool _hx_tmp4;
HXDLIN( 872)			if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 872)				_hx_tmp4 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            			}
            			else {
HXLINE( 872)				_hx_tmp4 = true;
            			}
HXDLIN( 872)			if (_hx_tmp4) {
HXLINE( 873)				bool _hx_tmp5;
HXDLIN( 873)				bool _hx_tmp6;
HXDLIN( 873)				bool _hx_tmp7;
HXDLIN( 873)				bool _hx_tmp8;
HXDLIN( 873)				if (!(hasText)) {
HXLINE( 873)					_hx_tmp8 = hasHTMLText;
            				}
            				else {
HXLINE( 873)					_hx_tmp8 = true;
            				}
HXDLIN( 873)				if (!(_hx_tmp8)) {
HXLINE( 873)					_hx_tmp7 = hasSecondaryText;
            				}
            				else {
HXLINE( 873)					_hx_tmp7 = true;
            				}
HXDLIN( 873)				if (!(_hx_tmp7)) {
HXLINE( 873)					_hx_tmp6 = hasSecondaryHTMLText;
            				}
            				else {
HXLINE( 873)					_hx_tmp6 = true;
            				}
HXDLIN( 873)				if (!(_hx_tmp6)) {
HXLINE( 873)					_hx_tmp5 = this->hasAccessoryViewInLayout();
            				}
            				else {
HXLINE( 873)					_hx_tmp5 = true;
            				}
HXDLIN( 873)				if (_hx_tmp5) {
HXLINE( 874)					contentMinWidth = (contentMinWidth + adjustedGap);
            				}
HXLINE( 876)				contentMinWidth = (contentMinWidth + this->_currentIcon->get_width());
            			}
            			else {
HXLINE( 877)				bool _hx_tmp9;
HXDLIN( 877)				if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 877)					_hx_tmp9 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            				}
            				else {
HXLINE( 877)					_hx_tmp9 = true;
            				}
HXDLIN( 877)				if (_hx_tmp9) {
HXLINE( 878)					contentMinWidth = ::Math_obj::max(contentMinWidth,this->_currentIcon->get_width());
            				}
            			}
            		}
HXLINE( 881)		return contentMinWidth;
            	}


Float ItemRenderer_obj::measureContentMinHeight(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_884_measureContentMinHeight)
HXLINE( 885)		Float adjustedGap = this->get_gap();
HXLINE( 887)		if ((adjustedGap == ::hx::DivByZero(((Float)1.0)))) {
HXLINE( 888)			adjustedGap = this->get_minGap();
            		}
HXLINE( 890)		bool hasText;
HXDLIN( 890)		if (this->get_showText()) {
HXLINE( 890)			hasText = ::hx::IsNotNull( this->_text );
            		}
            		else {
HXLINE( 890)			hasText = false;
            		}
HXLINE( 891)		bool hasHTMLText;
HXDLIN( 891)		bool hasHTMLText1;
HXDLIN( 891)		if (this->get_showText()) {
HXLINE( 891)			hasHTMLText1 = ::hx::IsNotNull( this->_htmlText );
            		}
            		else {
HXLINE( 891)			hasHTMLText1 = false;
            		}
HXDLIN( 891)		if (hasHTMLText1) {
HXLINE( 891)			hasHTMLText = (this->_htmlText.length > 0);
            		}
            		else {
HXLINE( 891)			hasHTMLText = false;
            		}
HXLINE( 892)		Float contentMinHeight;
HXDLIN( 892)		bool contentMinHeight1;
HXDLIN( 892)		if (!(hasText)) {
HXLINE( 892)			contentMinHeight1 = hasHTMLText;
            		}
            		else {
HXLINE( 892)			contentMinHeight1 = true;
            		}
HXDLIN( 892)		if (contentMinHeight1) {
HXLINE( 892)			contentMinHeight = this->_textMeasuredHeight;
            		}
            		else {
HXLINE( 892)			contentMinHeight = ((Float)0.0);
            		}
HXLINE( 893)		bool hasSecondaryText;
HXDLIN( 893)		if (this->get_showSecondaryText()) {
HXLINE( 893)			hasSecondaryText = ::hx::IsNotNull( this->_secondaryText );
            		}
            		else {
HXLINE( 893)			hasSecondaryText = false;
            		}
HXLINE( 894)		bool hasSecondaryHTMLText;
HXDLIN( 894)		bool hasSecondaryHTMLText1;
HXDLIN( 894)		if (this->get_showSecondaryText()) {
HXLINE( 894)			hasSecondaryHTMLText1 = ::hx::IsNotNull( this->_secondaryHtmlText );
            		}
            		else {
HXLINE( 894)			hasSecondaryHTMLText1 = false;
            		}
HXDLIN( 894)		if (hasSecondaryHTMLText1) {
HXLINE( 894)			hasSecondaryHTMLText = (this->_secondaryHtmlText.length > 0);
            		}
            		else {
HXLINE( 894)			hasSecondaryHTMLText = false;
            		}
HXLINE( 895)		bool _hx_tmp;
HXDLIN( 895)		if (!(hasSecondaryText)) {
HXLINE( 895)			_hx_tmp = hasSecondaryHTMLText;
            		}
            		else {
HXLINE( 895)			_hx_tmp = true;
            		}
HXDLIN( 895)		if (_hx_tmp) {
HXLINE( 896)			contentMinHeight = (contentMinHeight + this->_secondaryTextMeasuredHeight);
HXLINE( 897)			bool _hx_tmp1;
HXDLIN( 897)			if (!(hasText)) {
HXLINE( 897)				_hx_tmp1 = hasHTMLText;
            			}
            			else {
HXLINE( 897)				_hx_tmp1 = true;
            			}
HXDLIN( 897)			if (_hx_tmp1) {
HXLINE( 898)				contentMinHeight = (contentMinHeight + adjustedGap);
            			}
            		}
HXLINE( 901)		if (this->hasAccessoryViewInLayout()) {
HXLINE( 902)			bool oldIgnoreAccessoryResizes = this->_ignoreAccessoryResizes;
HXLINE( 903)			this->_ignoreAccessoryResizes = true;
HXLINE( 904)			if (::Std_obj::isOfType(this->_currentAccessoryView,::hx::ClassOf< ::feathers::core::IValidating >())) {
HXLINE( 905)				::feathers::core::IValidating_obj::validateNow( ::hx::interface_check(this->_currentAccessoryView,0x64d4b3cd));
            			}
HXLINE( 907)			this->_ignoreAccessoryResizes = oldIgnoreAccessoryResizes;
HXLINE( 908)			contentMinHeight = ::Math_obj::max(contentMinHeight,this->_currentAccessoryView->get_height());
            		}
HXLINE( 910)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 911)			bool _hx_tmp2;
HXDLIN( 911)			if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 911)				_hx_tmp2 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            			}
            			else {
HXLINE( 911)				_hx_tmp2 = true;
            			}
HXDLIN( 911)			if (_hx_tmp2) {
HXLINE( 912)				bool _hx_tmp3;
HXDLIN( 912)				bool _hx_tmp4;
HXDLIN( 912)				bool _hx_tmp5;
HXDLIN( 912)				if (!(hasText)) {
HXLINE( 912)					_hx_tmp5 = hasHTMLText;
            				}
            				else {
HXLINE( 912)					_hx_tmp5 = true;
            				}
HXDLIN( 912)				if (!(_hx_tmp5)) {
HXLINE( 912)					_hx_tmp4 = hasSecondaryText;
            				}
            				else {
HXLINE( 912)					_hx_tmp4 = true;
            				}
HXDLIN( 912)				if (!(_hx_tmp4)) {
HXLINE( 912)					_hx_tmp3 = hasSecondaryHTMLText;
            				}
            				else {
HXLINE( 912)					_hx_tmp3 = true;
            				}
HXDLIN( 912)				if (_hx_tmp3) {
HXLINE( 913)					contentMinHeight = (contentMinHeight + adjustedGap);
            				}
HXLINE( 915)				contentMinHeight = (contentMinHeight + this->_currentIcon->get_height());
            			}
            			else {
HXLINE( 916)				bool _hx_tmp6;
HXDLIN( 916)				if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 916)					_hx_tmp6 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            				}
            				else {
HXLINE( 916)					_hx_tmp6 = true;
            				}
HXDLIN( 916)				if (_hx_tmp6) {
HXLINE( 917)					contentMinHeight = ::Math_obj::max(contentMinHeight,this->_currentIcon->get_height());
            				}
            			}
            		}
HXLINE( 920)		return contentMinHeight;
            	}


bool ItemRenderer_obj::hasAccessoryViewInLayout(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_923_hasAccessoryViewInLayout)
HXLINE( 924)		if (::hx::IsNull( this->_currentAccessoryView )) {
HXLINE( 925)			return false;
            		}
HXLINE( 927)		if (::Std_obj::isOfType(this->_currentAccessoryView,::hx::ClassOf< ::feathers::layout::ILayoutObject >())) {
HXLINE( 928)			return ::feathers::layout::ILayoutObject_obj::get_includeInLayout( ::hx::interface_check(this->_currentAccessoryView,0xf54ca718));
            		}
HXLINE( 930)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,hasAccessoryViewInLayout,return )

 ::openfl::display::DisplayObject ItemRenderer_obj::getCurrentBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_933_getCurrentBackgroundSkin)
HXLINE( 934)		 ::openfl::display::DisplayObject result = this->_stateToSkin->get(this->_currentState).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 935)		if (::hx::IsNotNull( result )) {
HXLINE( 936)			return result;
            		}
HXLINE( 938)		bool _hx_tmp;
HXDLIN( 938)		if (this->_selected) {
HXLINE( 938)			_hx_tmp = ::hx::IsNotNull( this->get_selectedBackgroundSkin() );
            		}
            		else {
HXLINE( 938)			_hx_tmp = false;
            		}
HXDLIN( 938)		if (_hx_tmp) {
HXLINE( 939)			return this->get_selectedBackgroundSkin();
            		}
HXLINE( 941)		bool _hx_tmp1;
HXDLIN( 941)		if (::hx::IsNotNull( this->get_alternateBackgroundSkin() )) {
HXLINE( 941)			_hx_tmp1 = (::hx::Mod(this->_layoutIndex,2) == 1);
            		}
            		else {
HXLINE( 941)			_hx_tmp1 = false;
            		}
HXDLIN( 941)		if (_hx_tmp1) {
HXLINE( 942)			return this->get_alternateBackgroundSkin();
            		}
HXLINE( 944)		return this->get_backgroundSkin();
            	}


void ItemRenderer_obj::layoutChildren(){
            	HX_GC_STACKFRAME(&_hx_pos_57908de65a73485d_947_layoutChildren)
HXLINE( 948)		this->refreshTextFieldDimensions(false);
HXLINE( 950)		bool flexGap = false;
HXLINE( 951)		Float adjustedGap = this->get_gap();
HXLINE( 953)		if ((adjustedGap == ::hx::DivByZero(((Float)1.0)))) {
HXLINE( 954)			adjustedGap = this->get_minGap();
HXLINE( 955)			flexGap = true;
            		}
HXLINE( 958)		bool hasText;
HXDLIN( 958)		if (this->get_showText()) {
HXLINE( 958)			hasText = ::hx::IsNotNull( this->_text );
            		}
            		else {
HXLINE( 958)			hasText = false;
            		}
HXLINE( 959)		bool hasHTMLText;
HXDLIN( 959)		bool hasHTMLText1;
HXDLIN( 959)		if (this->get_showText()) {
HXLINE( 959)			hasHTMLText1 = ::hx::IsNotNull( this->_htmlText );
            		}
            		else {
HXLINE( 959)			hasHTMLText1 = false;
            		}
HXDLIN( 959)		if (hasHTMLText1) {
HXLINE( 959)			hasHTMLText = (this->_htmlText.length > 0);
            		}
            		else {
HXLINE( 959)			hasHTMLText = false;
            		}
HXLINE( 960)		bool hasSecondaryText;
HXDLIN( 960)		if (this->get_showSecondaryText()) {
HXLINE( 960)			hasSecondaryText = ::hx::IsNotNull( this->_secondaryText );
            		}
            		else {
HXLINE( 960)			hasSecondaryText = false;
            		}
HXLINE( 961)		bool hasSecondaryHTMLText;
HXDLIN( 961)		bool hasSecondaryHTMLText1;
HXDLIN( 961)		if (this->get_showSecondaryText()) {
HXLINE( 961)			hasSecondaryHTMLText1 = ::hx::IsNotNull( this->_secondaryHtmlText );
            		}
            		else {
HXLINE( 961)			hasSecondaryHTMLText1 = false;
            		}
HXDLIN( 961)		if (hasSecondaryHTMLText1) {
HXLINE( 961)			hasSecondaryHTMLText = (this->_secondaryHtmlText.length > 0);
            		}
            		else {
HXLINE( 961)			hasSecondaryHTMLText = false;
            		}
HXLINE( 962)		Float availableContentWidth = this->actualWidth;
HXDLIN( 962)		Float availableContentWidth1 = (availableContentWidth - this->get_paddingLeft());
HXDLIN( 962)		Float availableContentWidth2 = (availableContentWidth1 - this->get_paddingRight());
HXLINE( 963)		Float availableContentHeight = this->actualHeight;
HXDLIN( 963)		Float availableContentHeight1 = (availableContentHeight - this->get_paddingTop());
HXDLIN( 963)		Float availableContentHeight2 = (availableContentHeight1 - this->get_paddingBottom());
HXLINE( 964)		Float totalContentWidth;
HXDLIN( 964)		bool totalContentWidth1;
HXDLIN( 964)		if (!(hasText)) {
HXLINE( 964)			totalContentWidth1 = hasHTMLText;
            		}
            		else {
HXLINE( 964)			totalContentWidth1 = true;
            		}
HXDLIN( 964)		if (totalContentWidth1) {
HXLINE( 964)			totalContentWidth = this->_textMeasuredWidth;
            		}
            		else {
HXLINE( 964)			totalContentWidth = ((Float)0.0);
            		}
HXLINE( 965)		Float totalContentHeight;
HXDLIN( 965)		bool totalContentHeight1;
HXDLIN( 965)		if (!(hasText)) {
HXLINE( 965)			totalContentHeight1 = hasHTMLText;
            		}
            		else {
HXLINE( 965)			totalContentHeight1 = true;
            		}
HXDLIN( 965)		if (totalContentHeight1) {
HXLINE( 965)			totalContentHeight = this->_textMeasuredHeight;
            		}
            		else {
HXLINE( 965)			totalContentHeight = ((Float)0.0);
            		}
HXLINE( 966)		bool _hx_tmp;
HXDLIN( 966)		bool _hx_tmp1;
HXDLIN( 966)		if (!(hasSecondaryText)) {
HXLINE( 966)			_hx_tmp1 = hasSecondaryHTMLText;
            		}
            		else {
HXLINE( 966)			_hx_tmp1 = true;
            		}
HXDLIN( 966)		if (_hx_tmp1) {
HXLINE( 966)			_hx_tmp = ::hx::IsNotNull( this->secondaryTextField );
            		}
            		else {
HXLINE( 966)			_hx_tmp = false;
            		}
HXDLIN( 966)		if (_hx_tmp) {
HXLINE( 967)			totalContentWidth = ::Math_obj::max(totalContentWidth,this->_secondaryTextMeasuredWidth);
HXLINE( 968)			totalContentHeight = (totalContentHeight + (this->_secondaryTextMeasuredHeight + adjustedGap));
            		}
HXLINE( 970)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE( 971)			bool _hx_tmp2;
HXDLIN( 971)			if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 971)				_hx_tmp2 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            			}
            			else {
HXLINE( 971)				_hx_tmp2 = true;
            			}
HXDLIN( 971)			if (_hx_tmp2) {
HXLINE( 972)				totalContentWidth = (totalContentWidth + (adjustedGap + this->_currentIcon->get_width()));
            			}
HXLINE( 974)			bool _hx_tmp3;
HXDLIN( 974)			if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 974)				_hx_tmp3 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            			}
            			else {
HXLINE( 974)				_hx_tmp3 = true;
            			}
HXDLIN( 974)			if (_hx_tmp3) {
HXLINE( 975)				totalContentHeight = (totalContentHeight + (adjustedGap + this->_currentIcon->get_height()));
            			}
            		}
HXLINE( 979)		bool flexGapVertical;
HXDLIN( 979)		bool flexGapVertical1;
HXDLIN( 979)		bool flexGapVertical2;
HXDLIN( 979)		if (flexGap) {
HXLINE( 980)			bool flexGapVertical3;
HXDLIN( 980)			bool flexGapVertical4;
HXDLIN( 980)			if (!(hasText)) {
HXLINE( 980)				flexGapVertical4 = hasHTMLText;
            			}
            			else {
HXLINE( 980)				flexGapVertical4 = true;
            			}
HXDLIN( 980)			if (!(flexGapVertical4)) {
HXLINE( 980)				flexGapVertical3 = hasSecondaryText;
            			}
            			else {
HXLINE( 980)				flexGapVertical3 = true;
            			}
HXDLIN( 980)			if (!(flexGapVertical3)) {
HXLINE( 979)				flexGapVertical2 = hasSecondaryHTMLText;
            			}
            			else {
HXLINE( 979)				flexGapVertical2 = true;
            			}
            		}
            		else {
HXLINE( 979)			flexGapVertical2 = false;
            		}
HXDLIN( 979)		if (flexGapVertical2) {
HXLINE( 979)			flexGapVertical1 = ::hx::IsNotNull( this->_currentIcon );
            		}
            		else {
HXLINE( 979)			flexGapVertical1 = false;
            		}
HXDLIN( 979)		if (flexGapVertical1) {
HXLINE( 982)			if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE( 979)				flexGapVertical = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            			}
            			else {
HXLINE( 979)				flexGapVertical = true;
            			}
            		}
            		else {
HXLINE( 979)			flexGapVertical = false;
            		}
HXLINE( 983)		bool flexGapHorizontal;
HXDLIN( 983)		bool flexGapHorizontal1;
HXDLIN( 983)		bool flexGapHorizontal2;
HXDLIN( 983)		if (flexGap) {
HXLINE( 984)			bool flexGapHorizontal3;
HXDLIN( 984)			bool flexGapHorizontal4;
HXDLIN( 984)			if (!(hasText)) {
HXLINE( 984)				flexGapHorizontal4 = hasHTMLText;
            			}
            			else {
HXLINE( 984)				flexGapHorizontal4 = true;
            			}
HXDLIN( 984)			if (!(flexGapHorizontal4)) {
HXLINE( 984)				flexGapHorizontal3 = hasSecondaryText;
            			}
            			else {
HXLINE( 984)				flexGapHorizontal3 = true;
            			}
HXDLIN( 984)			if (!(flexGapHorizontal3)) {
HXLINE( 983)				flexGapHorizontal2 = hasSecondaryHTMLText;
            			}
            			else {
HXLINE( 983)				flexGapHorizontal2 = true;
            			}
            		}
            		else {
HXLINE( 983)			flexGapHorizontal2 = false;
            		}
HXDLIN( 983)		if (flexGapHorizontal2) {
HXLINE( 983)			flexGapHorizontal1 = ::hx::IsNotNull( this->_currentIcon );
            		}
            		else {
HXLINE( 983)			flexGapHorizontal1 = false;
            		}
HXDLIN( 983)		if (flexGapHorizontal1) {
HXLINE( 986)			if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE( 983)				flexGapHorizontal = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            			}
            			else {
HXLINE( 983)				flexGapHorizontal = true;
            			}
            		}
            		else {
HXLINE( 983)			flexGapHorizontal = false;
            		}
HXLINE( 988)		if (this->hasAccessoryViewInLayout()) {
HXLINE( 990)			 ::openfl::display::DisplayObject _hx_tmp4 = this->_currentAccessoryView;
HXDLIN( 990)			Float _hx_tmp5 = this->actualWidth;
HXDLIN( 990)			Float _hx_tmp6 = (_hx_tmp5 - this->get_paddingRight());
HXDLIN( 990)			_hx_tmp4->set_x((_hx_tmp6 - this->_currentAccessoryView->get_width()));
HXLINE( 991)			switch((int)(this->get_verticalAlign()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 993)					 ::openfl::display::DisplayObject _hx_tmp7 = this->_currentAccessoryView;
HXDLIN( 993)					_hx_tmp7->set_y(this->get_paddingTop());
            				}
            				break;
            				case (int)1: {
HXLINE( 997)					 ::openfl::display::DisplayObject _hx_tmp8 = this->_currentAccessoryView;
HXDLIN( 997)					Float _hx_tmp9 = this->get_paddingTop();
HXLINE( 998)					Float _hx_tmp10 = this->get_paddingTop();
HXLINE( 997)					_hx_tmp8->set_y(::Math_obj::max(_hx_tmp9,(_hx_tmp10 + ((availableContentHeight2 - this->_currentAccessoryView->get_height()) / ((Float)2.0)))));
            				}
            				break;
            				case (int)2: {
HXLINE( 995)					 ::openfl::display::DisplayObject _hx_tmp11 = this->_currentAccessoryView;
HXDLIN( 995)					Float _hx_tmp12 = this->get_paddingTop();
HXDLIN( 995)					Float _hx_tmp13 = (this->get_paddingTop() + availableContentHeight2);
HXDLIN( 995)					_hx_tmp11->set_y(::Math_obj::max(_hx_tmp12,(_hx_tmp13 - this->_currentAccessoryView->get_height())));
            				}
            				break;
            				default:{
HXLINE(1000)					HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Unknown vertical align: ",77,68,f9,89) + ::Std_obj::string(this->get_verticalAlign()))));
            				}
            			}
HXLINE(1002)			availableContentWidth2 = (availableContentWidth2 - (this->_currentAccessoryView->get_width() + adjustedGap));
            		}
HXLINE(1004)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE(1005)			bool _hx_tmp14;
HXDLIN(1005)			if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE(1005)				_hx_tmp14 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::BOTTOM_dyn() );
            			}
            			else {
HXLINE(1005)				_hx_tmp14 = true;
            			}
HXDLIN(1005)			if (_hx_tmp14) {
HXLINE(1006)				switch((int)(this->get_horizontalAlign()->_hx_getIndex())){
            					case (int)0: {
HXLINE(1008)						 ::openfl::display::DisplayObject _hx_tmp15 = this->_currentIcon;
HXDLIN(1008)						_hx_tmp15->set_x(this->get_paddingLeft());
            					}
            					break;
            					case (int)1: {
HXLINE(1012)						 ::openfl::display::DisplayObject _hx_tmp16 = this->_currentIcon;
HXDLIN(1012)						Float _hx_tmp17 = this->get_paddingLeft();
HXDLIN(1012)						Float _hx_tmp18 = this->get_paddingLeft();
HXDLIN(1012)						_hx_tmp16->set_x(::Math_obj::max(_hx_tmp17,(_hx_tmp18 + ((availableContentWidth2 - this->_currentIcon->get_height()) / ((Float)2.0)))));
            					}
            					break;
            					case (int)2: {
HXLINE(1010)						 ::openfl::display::DisplayObject _hx_tmp19 = this->_currentIcon;
HXDLIN(1010)						Float _hx_tmp20 = this->get_paddingLeft();
HXDLIN(1010)						Float _hx_tmp21 = (this->get_paddingLeft() + availableContentWidth2);
HXDLIN(1010)						_hx_tmp19->set_x(::Math_obj::max(_hx_tmp20,(_hx_tmp21 - this->_currentIcon->get_width())));
            					}
            					break;
            					default:{
HXLINE(1014)						HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Unknown horizontal align: ",65,90,55,27) + ::Std_obj::string(this->get_horizontalAlign()))));
            					}
            				}
            			}
HXLINE(1017)			bool _hx_tmp22;
HXDLIN(1017)			if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE(1017)				_hx_tmp22 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            			}
            			else {
HXLINE(1017)				_hx_tmp22 = true;
            			}
HXDLIN(1017)			if (_hx_tmp22) {
HXLINE(1018)				switch((int)(this->get_verticalAlign()->_hx_getIndex())){
            					case (int)0: {
HXLINE(1020)						 ::openfl::display::DisplayObject _hx_tmp23 = this->_currentIcon;
HXDLIN(1020)						_hx_tmp23->set_y(this->get_paddingTop());
            					}
            					break;
            					case (int)1: {
HXLINE(1024)						 ::openfl::display::DisplayObject _hx_tmp24 = this->_currentIcon;
HXDLIN(1024)						Float _hx_tmp25 = this->get_paddingTop();
HXDLIN(1024)						Float _hx_tmp26 = this->get_paddingTop();
HXDLIN(1024)						_hx_tmp24->set_y(::Math_obj::max(_hx_tmp25,(_hx_tmp26 + ((availableContentHeight2 - this->_currentIcon->get_height()) / ((Float)2.0)))));
            					}
            					break;
            					case (int)2: {
HXLINE(1022)						 ::openfl::display::DisplayObject _hx_tmp27 = this->_currentIcon;
HXDLIN(1022)						Float _hx_tmp28 = this->get_paddingTop();
HXDLIN(1022)						Float _hx_tmp29 = (this->get_paddingTop() + availableContentHeight2);
HXDLIN(1022)						_hx_tmp27->set_y(::Math_obj::max(_hx_tmp28,(_hx_tmp29 - this->_currentIcon->get_height())));
            					}
            					break;
            					default:{
HXLINE(1026)						HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Unknown vertical align: ",77,68,f9,89) + ::Std_obj::string(this->get_verticalAlign()))));
            					}
            				}
            			}
            		}
HXLINE(1031)		Float currentX = this->get_paddingLeft();
HXLINE(1032)		Float currentY = this->get_paddingTop();
HXLINE(1033)		if (flexGapHorizontal) {
HXLINE(1034)			currentX = this->get_paddingLeft();
            		}
            		else {
HXLINE(1036)			switch((int)(this->get_horizontalAlign()->_hx_getIndex())){
            				case (int)0: {
HXLINE(1038)					currentX = this->get_paddingLeft();
            				}
            				break;
            				case (int)1: {
HXLINE(1042)					Float currentX1 = this->get_paddingLeft();
HXDLIN(1042)					currentX = ::Math_obj::max(currentX1,(this->get_paddingLeft() + ((availableContentWidth2 - totalContentWidth) / ((Float)2.0))));
            				}
            				break;
            				case (int)2: {
HXLINE(1040)					Float currentX2 = this->get_paddingLeft();
HXDLIN(1040)					currentX = ::Math_obj::max(currentX2,((this->get_paddingLeft() + availableContentWidth2) - totalContentWidth));
            				}
            				break;
            				default:{
HXLINE(1044)					HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Unknown horizontal align: ",65,90,55,27) + ::Std_obj::string(this->get_horizontalAlign()))));
            				}
            			}
            		}
HXLINE(1047)		if (flexGapVertical) {
HXLINE(1048)			currentY = this->get_paddingTop();
            		}
            		else {
HXLINE(1050)			switch((int)(this->get_verticalAlign()->_hx_getIndex())){
            				case (int)0: {
HXLINE(1052)					currentY = this->get_paddingTop();
            				}
            				break;
            				case (int)1: {
HXLINE(1056)					Float currentY1 = this->get_paddingTop();
HXDLIN(1056)					currentY = ::Math_obj::max(currentY1,(this->get_paddingTop() + ((availableContentHeight2 - totalContentHeight) / ((Float)2.0))));
            				}
            				break;
            				case (int)2: {
HXLINE(1054)					Float currentY2 = this->get_paddingTop();
HXDLIN(1054)					currentY = ::Math_obj::max(currentY2,((this->get_paddingTop() + availableContentHeight2) - totalContentHeight));
            				}
            				break;
            				default:{
HXLINE(1058)					HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Unknown vertical align: ",77,68,f9,89) + ::Std_obj::string(this->get_verticalAlign()))));
            				}
            			}
            		}
HXLINE(1062)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE(1063)			if (::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE(1064)				this->_currentIcon->set_x(currentX);
HXLINE(1065)				currentX = (currentX + (adjustedGap + this->_currentIcon->get_width()));
            			}
            			else {
HXLINE(1066)				if (::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::TOP_dyn() )) {
HXLINE(1067)					this->_currentIcon->set_y(currentY);
HXLINE(1068)					currentY = (currentY + (adjustedGap + this->_currentIcon->get_height()));
            				}
            			}
            		}
HXLINE(1072)		Float totalTextWidth = ((Float)0.0);
HXLINE(1073)		Float totalTextHeight = ((Float)0.0);
HXLINE(1074)		Float availableTextWidth = availableContentWidth2;
HXLINE(1075)		bool _hx_tmp30;
HXDLIN(1075)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE(1075)			if (::hx::IsPointerNotEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::LEFT_dyn() )) {
HXLINE(1075)				_hx_tmp30 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::RIGHT_dyn() );
            			}
            			else {
HXLINE(1075)				_hx_tmp30 = true;
            			}
            		}
            		else {
HXLINE(1075)			_hx_tmp30 = false;
            		}
HXDLIN(1075)		if (_hx_tmp30) {
HXLINE(1076)			availableTextWidth = (availableTextWidth - (adjustedGap + this->_currentIcon->get_width()));
            		}
HXLINE(1078)		bool _hx_tmp31;
HXDLIN(1078)		if (!(hasText)) {
HXLINE(1078)			_hx_tmp31 = hasHTMLText;
            		}
            		else {
HXLINE(1078)			_hx_tmp31 = true;
            		}
HXDLIN(1078)		if (_hx_tmp31) {
HXLINE(1079)			this->textField->set_x(currentX);
HXLINE(1080)			this->textField->set_y(currentY);
HXLINE(1081)			currentY = (currentY + (this->_textMeasuredHeight + adjustedGap));
HXLINE(1082)			totalTextWidth = ::Math_obj::max(totalTextWidth,this->textField->get_width());
HXLINE(1083)			totalTextHeight = (totalTextHeight + this->textField->get_height());
HXLINE(1084)			bool _hx_tmp32;
HXDLIN(1084)			if (!(hasSecondaryText)) {
HXLINE(1084)				_hx_tmp32 = hasSecondaryHTMLText;
            			}
            			else {
HXLINE(1084)				_hx_tmp32 = true;
            			}
HXDLIN(1084)			if (_hx_tmp32) {
HXLINE(1085)				totalTextHeight = (totalTextHeight + adjustedGap);
            			}
            		}
HXLINE(1088)		bool _hx_tmp33;
HXDLIN(1088)		bool _hx_tmp34;
HXDLIN(1088)		if (!(hasSecondaryText)) {
HXLINE(1088)			_hx_tmp34 = hasSecondaryHTMLText;
            		}
            		else {
HXLINE(1088)			_hx_tmp34 = true;
            		}
HXDLIN(1088)		if (_hx_tmp34) {
HXLINE(1088)			_hx_tmp33 = ::hx::IsNotNull( this->secondaryTextField );
            		}
            		else {
HXLINE(1088)			_hx_tmp33 = false;
            		}
HXDLIN(1088)		if (_hx_tmp33) {
HXLINE(1089)			this->secondaryTextField->set_x(currentX);
HXLINE(1090)			this->secondaryTextField->set_y(currentY);
HXLINE(1091)			Float _hx_tmp35;
HXDLIN(1091)			if ((this->_secondaryTextMeasuredWidth < availableTextWidth)) {
HXLINE(1091)				_hx_tmp35 = this->_secondaryTextMeasuredWidth;
            			}
            			else {
HXLINE(1091)				_hx_tmp35 = availableTextWidth;
            			}
HXDLIN(1091)			this->secondaryTextField->set_width(_hx_tmp35);
HXLINE(1092)			currentY = (currentY + (this->_secondaryTextMeasuredHeight + adjustedGap));
HXLINE(1093)			totalTextWidth = ::Math_obj::max(totalTextWidth,this->secondaryTextField->get_width());
HXLINE(1094)			totalTextHeight = (totalTextHeight + this->secondaryTextField->get_height());
            		}
HXLINE(1096)		bool _hx_tmp36;
HXDLIN(1096)		if (flexGapHorizontal) {
HXLINE(1096)			_hx_tmp36 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::LEFT_dyn() );
            		}
            		else {
HXLINE(1096)			_hx_tmp36 = false;
            		}
HXDLIN(1096)		if (_hx_tmp36) {
HXLINE(1097)			bool _hx_tmp37;
HXDLIN(1097)			if (!(hasText)) {
HXLINE(1097)				_hx_tmp37 = hasHTMLText;
            			}
            			else {
HXLINE(1097)				_hx_tmp37 = true;
            			}
HXDLIN(1097)			if (_hx_tmp37) {
HXLINE(1098)				 ::openfl::text::TextField _hx_tmp38 = this->textField;
HXDLIN(1098)				Float _hx_tmp39 = this->textField->get_x();
HXDLIN(1098)				_hx_tmp38->set_x(::Math_obj::max(_hx_tmp39,((this->get_paddingLeft() + availableContentWidth2) - totalTextWidth)));
            			}
HXLINE(1100)			bool _hx_tmp40;
HXDLIN(1100)			if (!(hasSecondaryText)) {
HXLINE(1100)				_hx_tmp40 = hasSecondaryHTMLText;
            			}
            			else {
HXLINE(1100)				_hx_tmp40 = true;
            			}
HXDLIN(1100)			if (_hx_tmp40) {
HXLINE(1101)				 ::openfl::text::TextField _hx_tmp41 = this->secondaryTextField;
HXDLIN(1101)				Float _hx_tmp42 = this->secondaryTextField->get_x();
HXDLIN(1101)				_hx_tmp41->set_x(::Math_obj::max(_hx_tmp42,((this->get_paddingLeft() + availableContentWidth2) - totalTextWidth)));
            			}
            		}
            		else {
HXLINE(1103)			bool _hx_tmp43;
HXDLIN(1103)			if (flexGapVertical) {
HXLINE(1103)				_hx_tmp43 = ::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::TOP_dyn() );
            			}
            			else {
HXLINE(1103)				_hx_tmp43 = false;
            			}
HXDLIN(1103)			if (_hx_tmp43) {
HXLINE(1104)				bool _hx_tmp44;
HXDLIN(1104)				if (!(hasText)) {
HXLINE(1104)					_hx_tmp44 = hasHTMLText;
            				}
            				else {
HXLINE(1104)					_hx_tmp44 = true;
            				}
HXDLIN(1104)				if (_hx_tmp44) {
HXLINE(1105)					 ::openfl::text::TextField _hx_tmp45 = this->textField;
HXDLIN(1105)					Float _hx_tmp46 = this->textField->get_y();
HXDLIN(1105)					_hx_tmp45->set_y(::Math_obj::max(_hx_tmp46,((this->get_paddingTop() + availableContentHeight2) - totalTextHeight)));
            				}
HXLINE(1107)				bool _hx_tmp47;
HXDLIN(1107)				if (!(hasSecondaryText)) {
HXLINE(1107)					_hx_tmp47 = hasSecondaryHTMLText;
            				}
            				else {
HXLINE(1107)					_hx_tmp47 = true;
            				}
HXDLIN(1107)				if (_hx_tmp47) {
HXLINE(1108)					 ::openfl::text::TextField _hx_tmp48 = this->secondaryTextField;
HXDLIN(1108)					Float _hx_tmp49 = (this->get_paddingTop() + availableContentHeight2);
HXDLIN(1108)					_hx_tmp48->set_y((_hx_tmp49 - this->secondaryTextField->get_height()));
            				}
            			}
            		}
HXLINE(1111)		bool _hx_tmp50;
HXDLIN(1111)		bool _hx_tmp51;
HXDLIN(1111)		bool _hx_tmp52;
HXDLIN(1111)		if (!(hasText)) {
HXLINE(1111)			_hx_tmp52 = hasHTMLText;
            		}
            		else {
HXLINE(1111)			_hx_tmp52 = true;
            		}
HXDLIN(1111)		if (!(_hx_tmp52)) {
HXLINE(1111)			_hx_tmp51 = hasSecondaryText;
            		}
            		else {
HXLINE(1111)			_hx_tmp51 = true;
            		}
HXDLIN(1111)		if (!(_hx_tmp51)) {
HXLINE(1111)			_hx_tmp50 = hasSecondaryHTMLText;
            		}
            		else {
HXLINE(1111)			_hx_tmp50 = true;
            		}
HXDLIN(1111)		if (_hx_tmp50) {
HXLINE(1112)			currentX = (currentX + (totalTextWidth + adjustedGap));
            		}
HXLINE(1115)		if (::hx::IsNotNull( this->_currentIcon )) {
HXLINE(1116)			if (::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::RIGHT_dyn() )) {
HXLINE(1117)				if (flexGapHorizontal) {
HXLINE(1118)					 ::openfl::display::DisplayObject _hx_tmp53 = this->_currentIcon;
HXDLIN(1118)					Float _hx_tmp54 = (this->get_paddingLeft() + availableContentWidth2);
HXDLIN(1118)					_hx_tmp53->set_x(::Math_obj::max(currentX,(_hx_tmp54 - this->_currentIcon->get_width())));
            				}
            				else {
HXLINE(1120)					this->_currentIcon->set_x(currentX);
            				}
            			}
HXLINE(1123)			if (::hx::IsPointerEq( this->get_iconPosition(),::feathers::layout::RelativePosition_obj::BOTTOM_dyn() )) {
HXLINE(1124)				if (flexGapVertical) {
HXLINE(1125)					 ::openfl::display::DisplayObject _hx_tmp55 = this->_currentIcon;
HXDLIN(1125)					Float _hx_tmp56 = (this->get_paddingTop() + availableContentHeight2);
HXDLIN(1125)					_hx_tmp55->set_y(::Math_obj::max(currentY,(_hx_tmp56 - this->_currentIcon->get_height())));
            				}
            				else {
HXLINE(1127)					this->_currentIcon->set_y(currentY);
            				}
            			}
            		}
            	}


void ItemRenderer_obj::itemRenderer_secondaryTextFormat_changeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_1134_itemRenderer_secondaryTextFormat_changeHandler)
HXDLIN(1134)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,itemRenderer_secondaryTextFormat_changeHandler,(void))

void ItemRenderer_obj::itemRenderer_accessoryView_resizeHandler( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_1137_itemRenderer_accessoryView_resizeHandler)
HXLINE(1138)		if (this->_ignoreAccessoryResizes) {
HXLINE(1139)			return;
            		}
HXLINE(1141)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,itemRenderer_accessoryView_resizeHandler,(void))

 ::feathers::text::TextFormat ItemRenderer_obj::get_secondaryTextFormat(){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_85_get_secondaryTextFormat)
HXDLIN(  85)		return this->_hx___secondaryTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,get_secondaryTextFormat,return )

 ::feathers::text::TextFormat ItemRenderer_obj::set_secondaryTextFormat( ::feathers::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_99_set_secondaryTextFormat)
HXLINE( 106)		if (!(this->setStyle(HX_("secondaryTextFormat",58,bc,cb,61),null()))) {
HXLINE( 107)			return this->_hx___secondaryTextFormat;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___secondaryTextFormat,value )) {
HXLINE( 110)			return this->_hx___secondaryTextFormat;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_secondaryTextFormat_dyn();
HXLINE( 116)		this->_hx___secondaryTextFormat = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___secondaryTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,set_secondaryTextFormat,return )

 ::feathers::text::TextFormat ItemRenderer_obj::clearStyle_secondaryTextFormat(){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_131_clearStyle_secondaryTextFormat)
HXLINE( 132)		this->set_secondaryTextFormat(null());
HXLINE( 133)		return this->get_secondaryTextFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,clearStyle_secondaryTextFormat,return )

 ::feathers::text::TextFormat ItemRenderer_obj::get_disabledSecondaryTextFormat(){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_85_get_disabledSecondaryTextFormat)
HXDLIN(  85)		return this->_hx___disabledSecondaryTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,get_disabledSecondaryTextFormat,return )

 ::feathers::text::TextFormat ItemRenderer_obj::set_disabledSecondaryTextFormat( ::feathers::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_99_set_disabledSecondaryTextFormat)
HXLINE( 106)		if (!(this->setStyle(HX_("disabledSecondaryTextFormat",3c,50,31,7d),null()))) {
HXLINE( 107)			return this->_hx___disabledSecondaryTextFormat;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___disabledSecondaryTextFormat,value )) {
HXLINE( 110)			return this->_hx___disabledSecondaryTextFormat;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_disabledSecondaryTextFormat_dyn();
HXLINE( 116)		this->_hx___disabledSecondaryTextFormat = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___disabledSecondaryTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,set_disabledSecondaryTextFormat,return )

 ::feathers::text::TextFormat ItemRenderer_obj::clearStyle_disabledSecondaryTextFormat(){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_131_clearStyle_disabledSecondaryTextFormat)
HXLINE( 132)		this->set_disabledSecondaryTextFormat(null());
HXLINE( 133)		return this->get_disabledSecondaryTextFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,clearStyle_disabledSecondaryTextFormat,return )

 ::feathers::text::TextFormat ItemRenderer_obj::get_selectedSecondaryTextFormat(){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_85_get_selectedSecondaryTextFormat)
HXDLIN(  85)		return this->_hx___selectedSecondaryTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,get_selectedSecondaryTextFormat,return )

 ::feathers::text::TextFormat ItemRenderer_obj::set_selectedSecondaryTextFormat( ::feathers::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_99_set_selectedSecondaryTextFormat)
HXLINE( 106)		if (!(this->setStyle(HX_("selectedSecondaryTextFormat",bd,ce,a4,af),null()))) {
HXLINE( 107)			return this->_hx___selectedSecondaryTextFormat;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___selectedSecondaryTextFormat,value )) {
HXLINE( 110)			return this->_hx___selectedSecondaryTextFormat;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_selectedSecondaryTextFormat_dyn();
HXLINE( 116)		this->_hx___selectedSecondaryTextFormat = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___selectedSecondaryTextFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,set_selectedSecondaryTextFormat,return )

 ::feathers::text::TextFormat ItemRenderer_obj::clearStyle_selectedSecondaryTextFormat(){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_131_clearStyle_selectedSecondaryTextFormat)
HXLINE( 132)		this->set_selectedSecondaryTextFormat(null());
HXLINE( 133)		return this->get_selectedSecondaryTextFormat();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,clearStyle_selectedSecondaryTextFormat,return )

 ::openfl::display::DisplayObject ItemRenderer_obj::get_alternateBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_85_get_alternateBackgroundSkin)
HXDLIN(  85)		return this->_hx___alternateBackgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,get_alternateBackgroundSkin,return )

 ::openfl::display::DisplayObject ItemRenderer_obj::set_alternateBackgroundSkin( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_99_set_alternateBackgroundSkin)
HXLINE( 106)		if (!(this->setStyle(HX_("alternateBackgroundSkin",65,b4,a8,e4),null()))) {
HXLINE( 107)			return this->_hx___alternateBackgroundSkin;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___alternateBackgroundSkin,value )) {
HXLINE( 110)			return this->_hx___alternateBackgroundSkin;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_alternateBackgroundSkin_dyn();
HXLINE( 116)		this->_hx___alternateBackgroundSkin = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___alternateBackgroundSkin;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,set_alternateBackgroundSkin,return )

 ::openfl::display::DisplayObject ItemRenderer_obj::clearStyle_alternateBackgroundSkin(){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_131_clearStyle_alternateBackgroundSkin)
HXLINE( 132)		this->set_alternateBackgroundSkin(null());
HXLINE( 133)		return this->get_alternateBackgroundSkin();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,clearStyle_alternateBackgroundSkin,return )

bool ItemRenderer_obj::get_showSecondaryText(){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_85_get_showSecondaryText)
HXDLIN(  85)		return this->_hx___showSecondaryText;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,get_showSecondaryText,return )

bool ItemRenderer_obj::set_showSecondaryText(bool value){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_99_set_showSecondaryText)
HXLINE( 106)		if (!(this->setStyle(HX_("showSecondaryText",04,73,10,d0),null()))) {
HXLINE( 107)			return this->_hx___showSecondaryText;
            		}
HXLINE( 109)		if ((this->_hx___showSecondaryText == value)) {
HXLINE( 110)			return this->_hx___showSecondaryText;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_showSecondaryText_dyn();
HXLINE( 116)		this->_hx___showSecondaryText = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___showSecondaryText;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,set_showSecondaryText,return )

bool ItemRenderer_obj::clearStyle_showSecondaryText(){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_131_clearStyle_showSecondaryText)
HXLINE( 132)		this->set_showSecondaryText(true);
HXLINE( 133)		return this->get_showSecondaryText();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,clearStyle_showSecondaryText,return )

 ::openfl::display::DisplayObject ItemRenderer_obj::get_accessoryView(){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_85_get_accessoryView)
HXDLIN(  85)		return this->_hx___accessoryView;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,get_accessoryView,return )

 ::openfl::display::DisplayObject ItemRenderer_obj::set_accessoryView( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_99_set_accessoryView)
HXLINE( 106)		if (!(this->setStyle(HX_("accessoryView",57,56,99,83),null()))) {
HXLINE( 107)			return this->_hx___accessoryView;
            		}
HXLINE( 109)		if (::hx::IsInstanceEq( this->_hx___accessoryView,value )) {
HXLINE( 110)			return this->_hx___accessoryView;
            		}
HXLINE( 115)		this->_previousClearStyle = this->clearStyle_accessoryView_dyn();
HXLINE( 116)		this->_hx___accessoryView = value;
HXLINE( 117)		this->setInvalid(::feathers::core::InvalidationFlag_obj::STYLES_dyn());
HXLINE( 118)		return this->_hx___accessoryView;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ItemRenderer_obj,set_accessoryView,return )

 ::openfl::display::DisplayObject ItemRenderer_obj::clearStyle_accessoryView(){
            	HX_STACKFRAME(&_hx_pos_cdea1590a25f7680_131_clearStyle_accessoryView)
HXLINE( 132)		this->set_accessoryView(null());
HXLINE( 133)		return this->get_accessoryView();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ItemRenderer_obj,clearStyle_accessoryView,return )

::hx::Class ItemRenderer_obj::get_styleContext(){
            	HX_STACKFRAME(&_hx_pos_a7fc358dfef2f496_42_get_styleContext)
HXDLIN(  42)		return ::hx::ClassOf< ::feathers::controls::dataRenderers::ItemRenderer >();
            	}



::hx::ObjectPtr< ItemRenderer_obj > ItemRenderer_obj::__new() {
	::hx::ObjectPtr< ItemRenderer_obj > __this = new ItemRenderer_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ItemRenderer_obj > ItemRenderer_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ItemRenderer_obj *__this = (ItemRenderer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ItemRenderer_obj), true, "feathers.controls.dataRenderers.ItemRenderer"));
	*(void **)__this = ItemRenderer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ItemRenderer_obj::ItemRenderer_obj()
{
}

void ItemRenderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ItemRenderer);
	HX_MARK_MEMBER_NAME(_data,"_data");
	HX_MARK_MEMBER_NAME(secondaryTextField,"secondaryTextField");
	HX_MARK_MEMBER_NAME(_secondaryTextMeasuredWidth,"_secondaryTextMeasuredWidth");
	HX_MARK_MEMBER_NAME(_secondaryTextMeasuredHeight,"_secondaryTextMeasuredHeight");
	HX_MARK_MEMBER_NAME(_previousSecondaryText,"_previousSecondaryText");
	HX_MARK_MEMBER_NAME(_previousSecondaryHTMLText,"_previousSecondaryHTMLText");
	HX_MARK_MEMBER_NAME(_previousSecondaryTextFormat,"_previousSecondaryTextFormat");
	HX_MARK_MEMBER_NAME(_previousSecondarySimpleTextFormat,"_previousSecondarySimpleTextFormat");
	HX_MARK_MEMBER_NAME(_updatedSecondaryTextStyles,"_updatedSecondaryTextStyles");
	HX_MARK_MEMBER_NAME(_secondaryText,"_secondaryText");
	HX_MARK_MEMBER_NAME(_secondaryHtmlText,"_secondaryHtmlText");
	HX_MARK_MEMBER_NAME(_childFocusEnabled,"_childFocusEnabled");
	HX_MARK_MEMBER_NAME(_layoutIndex,"_layoutIndex");
	HX_MARK_MEMBER_NAME(_pointerTarget,"_pointerTarget");
	HX_MARK_MEMBER_NAME(_ignoreAccessoryResizes,"_ignoreAccessoryResizes");
	HX_MARK_MEMBER_NAME(_accessoryViewMeasurements,"_accessoryViewMeasurements");
	HX_MARK_MEMBER_NAME(_currentAccessoryView,"_currentAccessoryView");
	HX_MARK_MEMBER_NAME(_stateToSecondaryTextFormat,"_stateToSecondaryTextFormat");
	HX_MARK_MEMBER_NAME(_hx___secondaryTextFormat,"__secondaryTextFormat");
	HX_MARK_MEMBER_NAME(_hx___disabledSecondaryTextFormat,"__disabledSecondaryTextFormat");
	HX_MARK_MEMBER_NAME(_hx___selectedSecondaryTextFormat,"__selectedSecondaryTextFormat");
	HX_MARK_MEMBER_NAME(_hx___alternateBackgroundSkin,"__alternateBackgroundSkin");
	HX_MARK_MEMBER_NAME(_hx___showSecondaryText,"__showSecondaryText");
	HX_MARK_MEMBER_NAME(_hx___accessoryView,"__accessoryView");
	 ::feathers::controls::ToggleButton_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ItemRenderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_data,"_data");
	HX_VISIT_MEMBER_NAME(secondaryTextField,"secondaryTextField");
	HX_VISIT_MEMBER_NAME(_secondaryTextMeasuredWidth,"_secondaryTextMeasuredWidth");
	HX_VISIT_MEMBER_NAME(_secondaryTextMeasuredHeight,"_secondaryTextMeasuredHeight");
	HX_VISIT_MEMBER_NAME(_previousSecondaryText,"_previousSecondaryText");
	HX_VISIT_MEMBER_NAME(_previousSecondaryHTMLText,"_previousSecondaryHTMLText");
	HX_VISIT_MEMBER_NAME(_previousSecondaryTextFormat,"_previousSecondaryTextFormat");
	HX_VISIT_MEMBER_NAME(_previousSecondarySimpleTextFormat,"_previousSecondarySimpleTextFormat");
	HX_VISIT_MEMBER_NAME(_updatedSecondaryTextStyles,"_updatedSecondaryTextStyles");
	HX_VISIT_MEMBER_NAME(_secondaryText,"_secondaryText");
	HX_VISIT_MEMBER_NAME(_secondaryHtmlText,"_secondaryHtmlText");
	HX_VISIT_MEMBER_NAME(_childFocusEnabled,"_childFocusEnabled");
	HX_VISIT_MEMBER_NAME(_layoutIndex,"_layoutIndex");
	HX_VISIT_MEMBER_NAME(_pointerTarget,"_pointerTarget");
	HX_VISIT_MEMBER_NAME(_ignoreAccessoryResizes,"_ignoreAccessoryResizes");
	HX_VISIT_MEMBER_NAME(_accessoryViewMeasurements,"_accessoryViewMeasurements");
	HX_VISIT_MEMBER_NAME(_currentAccessoryView,"_currentAccessoryView");
	HX_VISIT_MEMBER_NAME(_stateToSecondaryTextFormat,"_stateToSecondaryTextFormat");
	HX_VISIT_MEMBER_NAME(_hx___secondaryTextFormat,"__secondaryTextFormat");
	HX_VISIT_MEMBER_NAME(_hx___disabledSecondaryTextFormat,"__disabledSecondaryTextFormat");
	HX_VISIT_MEMBER_NAME(_hx___selectedSecondaryTextFormat,"__selectedSecondaryTextFormat");
	HX_VISIT_MEMBER_NAME(_hx___alternateBackgroundSkin,"__alternateBackgroundSkin");
	HX_VISIT_MEMBER_NAME(_hx___showSecondaryText,"__showSecondaryText");
	HX_VISIT_MEMBER_NAME(_hx___accessoryView,"__accessoryView");
	 ::feathers::controls::ToggleButton_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ItemRenderer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_data() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_data") ) { return ::hx::Val( _data ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_data") ) { return ::hx::Val( get_data_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_data") ) { return ::hx::Val( set_data_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initialize") ) { return ::hx::Val( initialize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"layoutIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_layoutIndex() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_layoutIndex") ) { return ::hx::Val( _layoutIndex ); }
		if (HX_FIELD_EQ(inName,"get_baseline") ) { return ::hx::Val( get_baseline_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"secondaryText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_secondaryText() ); }
		if (HX_FIELD_EQ(inName,"pointerTarget") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_pointerTarget() ); }
		if (HX_FIELD_EQ(inName,"accessoryView") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_accessoryView() ); }
		if (HX_FIELD_EQ(inName,"customHitTest") ) { return ::hx::Val( customHitTest_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_secondaryText") ) { return ::hx::Val( _secondaryText ); }
		if (HX_FIELD_EQ(inName,"_pointerTarget") ) { return ::hx::Val( _pointerTarget ); }
		if (HX_FIELD_EQ(inName,"layoutChildren") ) { return ::hx::Val( layoutChildren_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_layoutIndex") ) { return ::hx::Val( get_layoutIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_layoutIndex") ) { return ::hx::Val( set_layoutIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"__accessoryView") ) { return ::hx::Val( _hx___accessoryView ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_styleContext") ) { return ::hx::Val( get_styleContext_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_secondaryText") ) { return ::hx::Val( get_secondaryText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_secondaryText") ) { return ::hx::Val( set_secondaryText_dyn() ); }
		if (HX_FIELD_EQ(inName,"secondaryHtmlText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_secondaryHtmlText() ); }
		if (HX_FIELD_EQ(inName,"childFocusEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_childFocusEnabled() ); }
		if (HX_FIELD_EQ(inName,"get_pointerTarget") ) { return ::hx::Val( get_pointerTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pointerTarget") ) { return ::hx::Val( set_pointerTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"showSecondaryText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_showSecondaryText() ); }
		if (HX_FIELD_EQ(inName,"get_accessoryView") ) { return ::hx::Val( get_accessoryView_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_accessoryView") ) { return ::hx::Val( set_accessoryView_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"secondaryTextField") ) { return ::hx::Val( secondaryTextField ); }
		if (HX_FIELD_EQ(inName,"_secondaryHtmlText") ) { return ::hx::Val( _secondaryHtmlText ); }
		if (HX_FIELD_EQ(inName,"_childFocusEnabled") ) { return ::hx::Val( _childFocusEnabled ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"secondaryTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_secondaryTextFormat() ); }
		if (HX_FIELD_EQ(inName,"measureContentWidth") ) { return ::hx::Val( measureContentWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"__showSecondaryText") ) { return ::hx::Val( _hx___showSecondaryText ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"refreshSecondaryText") ) { return ::hx::Val( refreshSecondaryText_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshAccessoryView") ) { return ::hx::Val( refreshAccessoryView_dyn() ); }
		if (HX_FIELD_EQ(inName,"measureContentHeight") ) { return ::hx::Val( measureContentHeight_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_secondaryHtmlText") ) { return ::hx::Val( get_secondaryHtmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_secondaryHtmlText") ) { return ::hx::Val( set_secondaryHtmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_childFocusEnabled") ) { return ::hx::Val( get_childFocusEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_childFocusEnabled") ) { return ::hx::Val( set_childFocusEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"_currentAccessoryView") ) { return ::hx::Val( _currentAccessoryView ); }
		if (HX_FIELD_EQ(inName,"__secondaryTextFormat") ) { return ::hx::Val( _hx___secondaryTextFormat ); }
		if (HX_FIELD_EQ(inName,"get_showSecondaryText") ) { return ::hx::Val( get_showSecondaryText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_showSecondaryText") ) { return ::hx::Val( set_showSecondaryText_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_previousSecondaryText") ) { return ::hx::Val( _previousSecondaryText ); }
		if (HX_FIELD_EQ(inName,"measureContentMinWidth") ) { return ::hx::Val( measureContentMinWidth_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"alternateBackgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_alternateBackgroundSkin() ); }
		if (HX_FIELD_EQ(inName,"_ignoreAccessoryResizes") ) { return ::hx::Val( _ignoreAccessoryResizes ); }
		if (HX_FIELD_EQ(inName,"getCurrentAccessoryView") ) { return ::hx::Val( getCurrentAccessoryView_dyn() ); }
		if (HX_FIELD_EQ(inName,"addCurrentAccessoryView") ) { return ::hx::Val( addCurrentAccessoryView_dyn() ); }
		if (HX_FIELD_EQ(inName,"measureContentMinHeight") ) { return ::hx::Val( measureContentMinHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_secondaryTextFormat") ) { return ::hx::Val( get_secondaryTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_secondaryTextFormat") ) { return ::hx::Val( set_secondaryTextFormat_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"hasAccessoryViewInLayout") ) { return ::hx::Val( hasAccessoryViewInLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentBackgroundSkin") ) { return ::hx::Val( getCurrentBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_accessoryView") ) { return ::hx::Val( clearStyle_accessoryView_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"refreshSecondaryTextField") ) { return ::hx::Val( refreshSecondaryTextField_dyn() ); }
		if (HX_FIELD_EQ(inName,"__alternateBackgroundSkin") ) { return ::hx::Val( _hx___alternateBackgroundSkin ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_previousSecondaryHTMLText") ) { return ::hx::Val( _previousSecondaryHTMLText ); }
		if (HX_FIELD_EQ(inName,"_accessoryViewMeasurements") ) { return ::hx::Val( _accessoryViewMeasurements ); }
		if (HX_FIELD_EQ(inName,"refreshSecondaryTextStyles") ) { return ::hx::Val( refreshSecondaryTextStyles_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeCurrentAccessoryView") ) { return ::hx::Val( removeCurrentAccessoryView_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshTextFieldDimensions") ) { return ::hx::Val( refreshTextFieldDimensions_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_secondaryTextMeasuredWidth") ) { return ::hx::Val( _secondaryTextMeasuredWidth ); }
		if (HX_FIELD_EQ(inName,"_updatedSecondaryTextStyles") ) { return ::hx::Val( _updatedSecondaryTextStyles ); }
		if (HX_FIELD_EQ(inName,"disabledSecondaryTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_disabledSecondaryTextFormat() ); }
		if (HX_FIELD_EQ(inName,"selectedSecondaryTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selectedSecondaryTextFormat() ); }
		if (HX_FIELD_EQ(inName,"_stateToSecondaryTextFormat") ) { return ::hx::Val( _stateToSecondaryTextFormat ); }
		if (HX_FIELD_EQ(inName,"initializeItemRendererTheme") ) { return ::hx::Val( initializeItemRendererTheme_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_alternateBackgroundSkin") ) { return ::hx::Val( get_alternateBackgroundSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alternateBackgroundSkin") ) { return ::hx::Val( set_alternateBackgroundSkin_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"_secondaryTextMeasuredHeight") ) { return ::hx::Val( _secondaryTextMeasuredHeight ); }
		if (HX_FIELD_EQ(inName,"_previousSecondaryTextFormat") ) { return ::hx::Val( _previousSecondaryTextFormat ); }
		if (HX_FIELD_EQ(inName,"clearStyle_showSecondaryText") ) { return ::hx::Val( clearStyle_showSecondaryText_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"getCurrentSecondaryTextFormat") ) { return ::hx::Val( getCurrentSecondaryTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"__disabledSecondaryTextFormat") ) { return ::hx::Val( _hx___disabledSecondaryTextFormat ); }
		if (HX_FIELD_EQ(inName,"__selectedSecondaryTextFormat") ) { return ::hx::Val( _hx___selectedSecondaryTextFormat ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"getSecondaryTextFormatForState") ) { return ::hx::Val( getSecondaryTextFormatForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSecondaryTextFormatForState") ) { return ::hx::Val( setSecondaryTextFormatForState_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_secondaryTextFormat") ) { return ::hx::Val( clearStyle_secondaryTextFormat_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"get_disabledSecondaryTextFormat") ) { return ::hx::Val( get_disabledSecondaryTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_disabledSecondaryTextFormat") ) { return ::hx::Val( set_disabledSecondaryTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectedSecondaryTextFormat") ) { return ::hx::Val( get_selectedSecondaryTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectedSecondaryTextFormat") ) { return ::hx::Val( set_selectedSecondaryTextFormat_dyn() ); }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"_previousSecondarySimpleTextFormat") ) { return ::hx::Val( _previousSecondarySimpleTextFormat ); }
		if (HX_FIELD_EQ(inName,"clearStyle_alternateBackgroundSkin") ) { return ::hx::Val( clearStyle_alternateBackgroundSkin_dyn() ); }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"clearStyle_disabledSecondaryTextFormat") ) { return ::hx::Val( clearStyle_disabledSecondaryTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearStyle_selectedSecondaryTextFormat") ) { return ::hx::Val( clearStyle_selectedSecondaryTextFormat_dyn() ); }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"calculateExplicitWidthForTextMeasurement") ) { return ::hx::Val( calculateExplicitWidthForTextMeasurement_dyn() ); }
		if (HX_FIELD_EQ(inName,"itemRenderer_accessoryView_resizeHandler") ) { return ::hx::Val( itemRenderer_accessoryView_resizeHandler_dyn() ); }
		break;
	case 46:
		if (HX_FIELD_EQ(inName,"itemRenderer_secondaryTextFormat_changeHandler") ) { return ::hx::Val( itemRenderer_secondaryTextFormat_changeHandler_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ItemRenderer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_data(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_data") ) { _data=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"layoutIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_layoutIndex(inValue.Cast< int >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_layoutIndex") ) { _layoutIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"secondaryText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_secondaryText(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"pointerTarget") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_pointerTarget(inValue.Cast<  ::openfl::display::InteractiveObject >()) ); }
		if (HX_FIELD_EQ(inName,"accessoryView") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_accessoryView(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_secondaryText") ) { _secondaryText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pointerTarget") ) { _pointerTarget=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__accessoryView") ) { _hx___accessoryView=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"secondaryHtmlText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_secondaryHtmlText(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"childFocusEnabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_childFocusEnabled(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"showSecondaryText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_showSecondaryText(inValue.Cast< bool >()) ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"secondaryTextField") ) { secondaryTextField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_secondaryHtmlText") ) { _secondaryHtmlText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_childFocusEnabled") ) { _childFocusEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"secondaryTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_secondaryTextFormat(inValue.Cast<  ::feathers::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"__showSecondaryText") ) { _hx___showSecondaryText=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_currentAccessoryView") ) { _currentAccessoryView=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__secondaryTextFormat") ) { _hx___secondaryTextFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_previousSecondaryText") ) { _previousSecondaryText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"alternateBackgroundSkin") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_alternateBackgroundSkin(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"_ignoreAccessoryResizes") ) { _ignoreAccessoryResizes=inValue.Cast< bool >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__alternateBackgroundSkin") ) { _hx___alternateBackgroundSkin=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_previousSecondaryHTMLText") ) { _previousSecondaryHTMLText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_accessoryViewMeasurements") ) { _accessoryViewMeasurements=inValue.Cast<  ::feathers::layout::Measurements >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_secondaryTextMeasuredWidth") ) { _secondaryTextMeasuredWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_updatedSecondaryTextStyles") ) { _updatedSecondaryTextStyles=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"disabledSecondaryTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_disabledSecondaryTextFormat(inValue.Cast<  ::feathers::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"selectedSecondaryTextFormat") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectedSecondaryTextFormat(inValue.Cast<  ::feathers::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"_stateToSecondaryTextFormat") ) { _stateToSecondaryTextFormat=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"_secondaryTextMeasuredHeight") ) { _secondaryTextMeasuredHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_previousSecondaryTextFormat") ) { _previousSecondaryTextFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__disabledSecondaryTextFormat") ) { _hx___disabledSecondaryTextFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__selectedSecondaryTextFormat") ) { _hx___selectedSecondaryTextFormat=inValue.Cast<  ::feathers::text::TextFormat >(); return inValue; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"_previousSecondarySimpleTextFormat") ) { _previousSecondarySimpleTextFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ItemRenderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_data",09,72,74,f5));
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("secondaryTextField",b9,26,96,de));
	outFields->push(HX_("_secondaryTextMeasuredWidth",fe,74,67,55));
	outFields->push(HX_("_secondaryTextMeasuredHeight",ef,61,6e,1b));
	outFields->push(HX_("_previousSecondaryText",cb,a8,20,bd));
	outFields->push(HX_("_previousSecondaryHTMLText",b6,6e,15,8e));
	outFields->push(HX_("_previousSecondaryTextFormat",62,d6,b6,96));
	outFields->push(HX_("_previousSecondarySimpleTextFormat",b4,9b,1c,67));
	outFields->push(HX_("_updatedSecondaryTextStyles",e7,34,2b,a5));
	outFields->push(HX_("_secondaryText",82,02,ae,ef));
	outFields->push(HX_("secondaryText",41,12,5c,b1));
	outFields->push(HX_("_secondaryHtmlText",0d,64,04,fe));
	outFields->push(HX_("secondaryHtmlText",4c,bf,ee,2a));
	outFields->push(HX_("_childFocusEnabled",06,8c,8a,7b));
	outFields->push(HX_("childFocusEnabled",45,e7,74,a8));
	outFields->push(HX_("_layoutIndex",09,a2,07,d5));
	outFields->push(HX_("layoutIndex",08,f4,fd,6e));
	outFields->push(HX_("_pointerTarget",2f,c4,1d,26));
	outFields->push(HX_("pointerTarget",ee,d3,cb,e7));
	outFields->push(HX_("secondaryTextFormat",58,bc,cb,61));
	outFields->push(HX_("disabledSecondaryTextFormat",3c,50,31,7d));
	outFields->push(HX_("selectedSecondaryTextFormat",bd,ce,a4,af));
	outFields->push(HX_("alternateBackgroundSkin",65,b4,a8,e4));
	outFields->push(HX_("showSecondaryText",04,73,10,d0));
	outFields->push(HX_("_ignoreAccessoryResizes",1e,94,59,92));
	outFields->push(HX_("_accessoryViewMeasurements",af,cb,70,d0));
	outFields->push(HX_("_currentAccessoryView",3d,24,c7,73));
	outFields->push(HX_("accessoryView",57,56,99,83));
	outFields->push(HX_("_stateToSecondaryTextFormat",eb,2c,d4,8e));
	outFields->push(HX_("__secondaryTextFormat",38,dd,bf,cf));
	outFields->push(HX_("__disabledSecondaryTextFormat",1c,51,81,bf));
	outFields->push(HX_("__selectedSecondaryTextFormat",9d,cf,f4,f1));
	outFields->push(HX_("__alternateBackgroundSkin",45,c5,ee,28));
	outFields->push(HX_("__showSecondaryText",e4,9b,00,83));
	outFields->push(HX_("__accessoryView",37,8f,4b,0b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ItemRenderer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ItemRenderer_obj,_data),HX_("_data",09,72,74,f5)},
	{::hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(ItemRenderer_obj,secondaryTextField),HX_("secondaryTextField",b9,26,96,de)},
	{::hx::fsFloat,(int)offsetof(ItemRenderer_obj,_secondaryTextMeasuredWidth),HX_("_secondaryTextMeasuredWidth",fe,74,67,55)},
	{::hx::fsFloat,(int)offsetof(ItemRenderer_obj,_secondaryTextMeasuredHeight),HX_("_secondaryTextMeasuredHeight",ef,61,6e,1b)},
	{::hx::fsString,(int)offsetof(ItemRenderer_obj,_previousSecondaryText),HX_("_previousSecondaryText",cb,a8,20,bd)},
	{::hx::fsString,(int)offsetof(ItemRenderer_obj,_previousSecondaryHTMLText),HX_("_previousSecondaryHTMLText",b6,6e,15,8e)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(ItemRenderer_obj,_previousSecondaryTextFormat),HX_("_previousSecondaryTextFormat",62,d6,b6,96)},
	{::hx::fsObject /*  ::openfl::text::TextFormat */ ,(int)offsetof(ItemRenderer_obj,_previousSecondarySimpleTextFormat),HX_("_previousSecondarySimpleTextFormat",b4,9b,1c,67)},
	{::hx::fsBool,(int)offsetof(ItemRenderer_obj,_updatedSecondaryTextStyles),HX_("_updatedSecondaryTextStyles",e7,34,2b,a5)},
	{::hx::fsString,(int)offsetof(ItemRenderer_obj,_secondaryText),HX_("_secondaryText",82,02,ae,ef)},
	{::hx::fsString,(int)offsetof(ItemRenderer_obj,_secondaryHtmlText),HX_("_secondaryHtmlText",0d,64,04,fe)},
	{::hx::fsBool,(int)offsetof(ItemRenderer_obj,_childFocusEnabled),HX_("_childFocusEnabled",06,8c,8a,7b)},
	{::hx::fsInt,(int)offsetof(ItemRenderer_obj,_layoutIndex),HX_("_layoutIndex",09,a2,07,d5)},
	{::hx::fsObject /*  ::openfl::display::InteractiveObject */ ,(int)offsetof(ItemRenderer_obj,_pointerTarget),HX_("_pointerTarget",2f,c4,1d,26)},
	{::hx::fsBool,(int)offsetof(ItemRenderer_obj,_ignoreAccessoryResizes),HX_("_ignoreAccessoryResizes",1e,94,59,92)},
	{::hx::fsObject /*  ::feathers::layout::Measurements */ ,(int)offsetof(ItemRenderer_obj,_accessoryViewMeasurements),HX_("_accessoryViewMeasurements",af,cb,70,d0)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(ItemRenderer_obj,_currentAccessoryView),HX_("_currentAccessoryView",3d,24,c7,73)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(ItemRenderer_obj,_stateToSecondaryTextFormat),HX_("_stateToSecondaryTextFormat",eb,2c,d4,8e)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(ItemRenderer_obj,_hx___secondaryTextFormat),HX_("__secondaryTextFormat",38,dd,bf,cf)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(ItemRenderer_obj,_hx___disabledSecondaryTextFormat),HX_("__disabledSecondaryTextFormat",1c,51,81,bf)},
	{::hx::fsObject /*  ::feathers::text::TextFormat */ ,(int)offsetof(ItemRenderer_obj,_hx___selectedSecondaryTextFormat),HX_("__selectedSecondaryTextFormat",9d,cf,f4,f1)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(ItemRenderer_obj,_hx___alternateBackgroundSkin),HX_("__alternateBackgroundSkin",45,c5,ee,28)},
	{::hx::fsBool,(int)offsetof(ItemRenderer_obj,_hx___showSecondaryText),HX_("__showSecondaryText",e4,9b,00,83)},
	{::hx::fsObject /*  ::openfl::display::DisplayObject */ ,(int)offsetof(ItemRenderer_obj,_hx___accessoryView),HX_("__accessoryView",37,8f,4b,0b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ItemRenderer_obj_sStaticStorageInfo = 0;
#endif

static ::String ItemRenderer_obj_sMemberFields[] = {
	HX_("_data",09,72,74,f5),
	HX_("get_data",b3,11,1e,c2),
	HX_("set_data",27,6b,7b,70),
	HX_("secondaryTextField",b9,26,96,de),
	HX_("_secondaryTextMeasuredWidth",fe,74,67,55),
	HX_("_secondaryTextMeasuredHeight",ef,61,6e,1b),
	HX_("_previousSecondaryText",cb,a8,20,bd),
	HX_("_previousSecondaryHTMLText",b6,6e,15,8e),
	HX_("_previousSecondaryTextFormat",62,d6,b6,96),
	HX_("_previousSecondarySimpleTextFormat",b4,9b,1c,67),
	HX_("_updatedSecondaryTextStyles",e7,34,2b,a5),
	HX_("_secondaryText",82,02,ae,ef),
	HX_("get_secondaryText",98,1d,cc,b7),
	HX_("set_secondaryText",a4,f5,39,db),
	HX_("_secondaryHtmlText",0d,64,04,fe),
	HX_("get_secondaryHtmlText",23,c2,9c,a9),
	HX_("set_secondaryHtmlText",2f,90,a5,fd),
	HX_("_childFocusEnabled",06,8c,8a,7b),
	HX_("get_childFocusEnabled",1c,ea,22,27),
	HX_("set_childFocusEnabled",28,b8,2b,7b),
	HX_("_layoutIndex",09,a2,07,d5),
	HX_("get_layoutIndex",9f,ab,df,2f),
	HX_("set_layoutIndex",ab,28,ab,2b),
	HX_("_pointerTarget",2f,c4,1d,26),
	HX_("get_pointerTarget",45,df,3b,ee),
	HX_("set_pointerTarget",51,b7,a9,11),
	HX_("_ignoreAccessoryResizes",1e,94,59,92),
	HX_("_accessoryViewMeasurements",af,cb,70,d0),
	HX_("_currentAccessoryView",3d,24,c7,73),
	HX_("get_baseline",8e,90,41,c6),
	HX_("_stateToSecondaryTextFormat",eb,2c,d4,8e),
	HX_("getSecondaryTextFormatForState",ca,15,a0,16),
	HX_("setSecondaryTextFormatForState",3e,26,8b,f1),
	HX_("initializeItemRendererTheme",43,e5,2b,4b),
	HX_("initialize",50,31,bb,ec),
	HX_("update",09,86,05,87),
	HX_("refreshSecondaryTextField",74,b7,93,af),
	HX_("refreshSecondaryTextStyles",28,26,f1,86),
	HX_("refreshSecondaryText",66,3b,1e,ce),
	HX_("getCurrentSecondaryTextFormat",d5,67,38,0e),
	HX_("refreshAccessoryView",7c,7f,5b,a0),
	HX_("getCurrentAccessoryView",14,16,94,41),
	HX_("removeCurrentAccessoryView",c2,5c,1d,55),
	HX_("addCurrentAccessoryView",1f,af,5e,e1),
	HX_("customHitTest",94,c8,8d,8c),
	HX_("refreshTextFieldDimensions",5f,dc,23,3e),
	HX_("calculateExplicitWidthForTextMeasurement",92,3b,8a,99),
	HX_("measureContentWidth",8b,e6,27,47),
	HX_("measureContentHeight",c2,4b,11,b2),
	HX_("measureContentMinWidth",af,53,1c,e0),
	HX_("measureContentMinHeight",1e,5e,fc,ee),
	HX_("hasAccessoryViewInLayout",2c,70,8a,ce),
	HX_("getCurrentBackgroundSkin",2e,6b,dc,9d),
	HX_("layoutChildren",09,3e,82,44),
	HX_("itemRenderer_secondaryTextFormat_changeHandler",8a,54,63,14),
	HX_("itemRenderer_accessoryView_resizeHandler",85,2b,4b,c9),
	HX_("__secondaryTextFormat",38,dd,bf,cf),
	HX_("get_secondaryTextFormat",ef,62,21,6a),
	HX_("set_secondaryTextFormat",fb,cb,82,6c),
	HX_("clearStyle_secondaryTextFormat",bd,c1,0a,e6),
	HX_("__disabledSecondaryTextFormat",1c,51,81,bf),
	HX_("get_disabledSecondaryTextFormat",d3,e5,01,59),
	HX_("set_disabledSecondaryTextFormat",df,3a,c5,0b),
	HX_("clearStyle_disabledSecondaryTextFormat",a1,c2,bb,c8),
	HX_("__selectedSecondaryTextFormat",9d,cf,f4,f1),
	HX_("get_selectedSecondaryTextFormat",54,64,75,8b),
	HX_("set_selectedSecondaryTextFormat",60,b9,38,3e),
	HX_("clearStyle_selectedSecondaryTextFormat",22,41,2f,fb),
	HX_("__alternateBackgroundSkin",45,c5,ee,28),
	HX_("get_alternateBackgroundSkin",7c,f2,4a,b1),
	HX_("set_alternateBackgroundSkin",88,d1,e3,f3),
	HX_("clearStyle_alternateBackgroundSkin",4a,d0,c6,1c),
	HX_("__showSecondaryText",e4,9b,00,83),
	HX_("get_showSecondaryText",db,75,be,4e),
	HX_("set_showSecondaryText",e7,43,c7,a2),
	HX_("clearStyle_showSecondaryText",29,e5,32,f1),
	HX_("__accessoryView",37,8f,4b,0b),
	HX_("get_accessoryView",ae,61,09,8a),
	HX_("set_accessoryView",ba,39,77,ad),
	HX_("clearStyle_accessoryView",fc,91,e4,7d),
	HX_("get_styleContext",47,7d,20,4b),
	::String(null()) };

::hx::Class ItemRenderer_obj::__mClass;

void ItemRenderer_obj::__register()
{
	ItemRenderer_obj _hx_dummy;
	ItemRenderer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("feathers.controls.dataRenderers.ItemRenderer",38,c9,87,83);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ItemRenderer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ItemRenderer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ItemRenderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ItemRenderer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ItemRenderer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_57908de65a73485d_38_boot)
HXDLIN(  38)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("setSecondaryTextFormatForState",3e,26,8b,f1), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("style",31,a5,1d,84),null()))))));
            	}
}

} // end namespace feathers
} // end namespace controls
} // end namespace dataRenderers
