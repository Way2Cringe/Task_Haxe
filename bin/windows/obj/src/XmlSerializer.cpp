// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_XmlSerializer
#include <XmlSerializer.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_xml_Printer
#include <haxe/xml/Printer.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_181898526cb4a4f3_12_Serialize,"XmlSerializer","Serialize",0x1458903b,"XmlSerializer.Serialize","XmlSerializer.hx",12,0x2fe50735)
HX_LOCAL_STACK_FRAME(_hx_pos_181898526cb4a4f3_44_Deserialize,"XmlSerializer","Deserialize",0x94514d5a,"XmlSerializer.Deserialize","XmlSerializer.hx",44,0x2fe50735)

void XmlSerializer_obj::__construct() { }

Dynamic XmlSerializer_obj::__CreateEmpty() { return new XmlSerializer_obj; }

void *XmlSerializer_obj::_hx_vtable = 0;

Dynamic XmlSerializer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< XmlSerializer_obj > _hx_result = new XmlSerializer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool XmlSerializer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x576a0085;
}

 ::Xml XmlSerializer_obj::Serialize( ::Dynamic obj){
            	HX_STACKFRAME(&_hx_pos_181898526cb4a4f3_12_Serialize)
HXLINE(  13)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  13)		::String _hx_tmp1 = ((HX_(" ----> Called Serialize for ",38,93,ac,87) + ::Std_obj::string(obj)) + HX_(" ----> ",02,25,a7,37));
HXDLIN(  13)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("src/XmlSerializer.hx",00,ee,56,96),13,HX_("XmlSerializer",29,db,52,ac),HX_("Serialize",c0,3d,c5,96)));
HXLINE(  14)		 ::Xml xml;
HXLINE(  16)		bool _hx_tmp2;
HXDLIN(  16)		bool _hx_tmp3;
HXDLIN(  16)		bool _hx_tmp4;
HXDLIN(  16)		if (!(::Std_obj::isOfType(obj,::hx::ClassOf< ::Float >()))) {
HXLINE(  16)			_hx_tmp4 = ::Std_obj::isOfType(obj,::hx::ClassOf< int >());
            		}
            		else {
HXLINE(  16)			_hx_tmp4 = true;
            		}
HXDLIN(  16)		if (!(_hx_tmp4)) {
HXLINE(  16)			_hx_tmp3 = ::Std_obj::isOfType(obj,::hx::ClassOf< bool >());
            		}
            		else {
HXLINE(  16)			_hx_tmp3 = true;
            		}
HXDLIN(  16)		if (!(_hx_tmp3)) {
HXLINE(  16)			_hx_tmp2 = ::Std_obj::isOfType(obj,::hx::ClassOf< ::String >());
            		}
            		else {
HXLINE(  16)			_hx_tmp2 = true;
            		}
HXDLIN(  16)		if (_hx_tmp2) {
HXLINE(  17)			::haxe::Log_obj::trace(HX_("Its a basic type",e3,13,24,19),::hx::SourceInfo(HX_("src/XmlSerializer.hx",00,ee,56,96),17,HX_("XmlSerializer",29,db,52,ac),HX_("Serialize",c0,3d,c5,96)));
HXLINE(  18)			xml = ::Xml_obj::createPCData(::Std_obj::string(obj));
            		}
            		else {
HXLINE(  19)			if (::Std_obj::isOfType(obj,::hx::ArrayBase::__mClass)) {
HXLINE(  20)				::haxe::Log_obj::trace(HX_("Its an Array",1e,83,7e,f2),::hx::SourceInfo(HX_("src/XmlSerializer.hx",00,ee,56,96),20,HX_("XmlSerializer",29,db,52,ac),HX_("Serialize",c0,3d,c5,96)));
HXLINE(  21)				xml = ::Xml_obj::createElement(HX_("Array",79,dd,bc,b8));
HXLINE(  22)				::cpp::VirtualArray arr = ( (::cpp::VirtualArray)(obj) );
HXLINE(  23)				{
HXLINE(  23)					int _g = 0;
HXDLIN(  23)					while((_g < arr->get_length())){
HXLINE(  23)						 ::Dynamic el = arr->__get(_g);
HXDLIN(  23)						_g = (_g + 1);
HXLINE(  24)						xml->addChild(::XmlSerializer_obj::Serialize(el));
            					}
            				}
            			}
            			else {
HXLINE(  27)				::haxe::Log_obj::trace(HX_("Its a class",21,59,51,9f),::hx::SourceInfo(HX_("src/XmlSerializer.hx",00,ee,56,96),27,HX_("XmlSerializer",29,db,52,ac),HX_("Serialize",c0,3d,c5,96)));
HXLINE(  28)				xml = ::Xml_obj::createElement(::Type_obj::getClassName(::Type_obj::getClass(obj)));
HXLINE(  29)				{
HXLINE(  29)					int _g1 = 0;
HXDLIN(  29)					::Array< ::String > _g2 = ::Reflect_obj::fields(obj);
HXDLIN(  29)					while((_g1 < _g2->length)){
HXLINE(  29)						::String field = _g2->__get(_g1);
HXDLIN(  29)						_g1 = (_g1 + 1);
HXLINE(  30)						 ::Xml fieldXml = ::Xml_obj::createElement(field);
HXLINE(  31)						fieldXml->addChild(::XmlSerializer_obj::Serialize(::Reflect_obj::field(obj,field)));
HXLINE(  32)						xml->addChild(fieldXml);
            					}
            				}
            			}
            		}
HXLINE(  36)		 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN(  36)		::String _hx_tmp6 = ((HX_(" <---- Returned: ",59,be,d5,4e) + ::haxe::xml::Printer_obj::print(xml,null())) + HX_(" for ",17,f1,92,b0));
HXDLIN(  36)		::String _hx_tmp7 = ((_hx_tmp6 + ::Std_obj::string(obj)) + HX_(" <---- ",c4,7f,01,37));
HXDLIN(  36)		_hx_tmp5(_hx_tmp7,::hx::SourceInfo(HX_("src/XmlSerializer.hx",00,ee,56,96),36,HX_("XmlSerializer",29,db,52,ac),HX_("Serialize",c0,3d,c5,96)));
HXLINE(  38)		return xml;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(XmlSerializer_obj,Serialize,return )

 ::Dynamic XmlSerializer_obj::Deserialize( ::Xml xml){
            	HX_GC_STACKFRAME(&_hx_pos_181898526cb4a4f3_44_Deserialize)
HXLINE(  45)		 ::Dynamic obj = null();
HXLINE(  46)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  46)		::String _hx_tmp1 = ((HX_(" ----> Called Deserialize for ",b9,6c,6e,22) + ::haxe::xml::Printer_obj::print(xml,null())) + HX_(" ----> ",02,25,a7,37));
HXDLIN(  46)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("src/XmlSerializer.hx",00,ee,56,96),46,HX_("XmlSerializer",29,db,52,ac),HX_("Deserialize",1f,26,68,0d)));
HXLINE(  47)		int xmlNodeType = xml->nodeType;
HXLINE(  48)		if ((xmlNodeType == ::Xml_obj::PCData)) {
HXLINE(  49)			::haxe::Log_obj::trace(HX_("Its a basic type",e3,13,24,19),::hx::SourceInfo(HX_("src/XmlSerializer.hx",00,ee,56,96),49,HX_("XmlSerializer",29,db,52,ac),HX_("Deserialize",1f,26,68,0d)));
HXLINE(  50)			obj = ::haxe::xml::Printer_obj::print(xml,null());
            		}
            		else {
HXLINE(  52)			if ((xml->nodeType != ::Xml_obj::Element)) {
HXLINE(  52)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            			}
HXDLIN(  52)			::String xmlNodeName = xml->nodeName;
HXLINE(  53)			if ((xmlNodeName == HX_("Array",79,dd,bc,b8))) {
HXLINE(  54)				::haxe::Log_obj::trace(HX_("Its an Array",1e,83,7e,f2),::hx::SourceInfo(HX_("src/XmlSerializer.hx",00,ee,56,96),54,HX_("XmlSerializer",29,db,52,ac),HX_("Deserialize",1f,26,68,0d)));
HXLINE(  55)				obj = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  56)				{
HXLINE(  56)					 ::Dynamic el = xml->elements();
HXDLIN(  56)					while(( (bool)(el->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  56)						 ::Xml el1 = ( ( ::Xml)(el->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  57)						 ::Dynamic obj1 =  ::Dynamic(obj->__Field(HX_("push",da,11,61,4a),::hx::paccDynamic));
HXDLIN(  57)						obj1(::XmlSerializer_obj::Deserialize(el1));
            					}
            				}
            			}
            			else {
HXLINE(  60)				::haxe::Log_obj::trace(HX_("Its a Class",01,c9,7e,32),::hx::SourceInfo(HX_("src/XmlSerializer.hx",00,ee,56,96),60,HX_("XmlSerializer",29,db,52,ac),HX_("Deserialize",1f,26,68,0d)));
HXLINE(  62)				::hx::Class cls = ::Type_obj::resolveClass(xmlNodeName);
HXLINE(  63)				if (::hx::IsNull( cls )) {
HXLINE(  64)					HX_STACK_DO_THROW( ::haxe::Exception_obj::__alloc( HX_CTX ,(HX_("Couldn't resolve class ",e2,2e,67,88) + xmlNodeName),null(),null()));
            				}
HXLINE(  67)				obj = ::Type_obj::createInstance(cls,::cpp::VirtualArray_obj::__new(0));
HXLINE(  68)				if (::hx::IsNull( obj )) {
HXLINE(  69)					HX_STACK_DO_THROW( ::haxe::Exception_obj::__alloc( HX_CTX ,(HX_("Couldn't resolve class ",e2,2e,67,88) + xmlNodeName),null(),null()));
            				}
HXLINE(  71)				::haxe::Log_obj::trace(obj,::hx::SourceInfo(HX_("src/XmlSerializer.hx",00,ee,56,96),71,HX_("XmlSerializer",29,db,52,ac),HX_("Deserialize",1f,26,68,0d)));
HXLINE(  72)				{
HXLINE(  72)					 ::Dynamic el2 = xml->elements();
HXDLIN(  72)					while(( (bool)(el2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  72)						 ::Xml el3 = ( ( ::Xml)(el2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  73)						if ((el3->nodeType != ::Xml_obj::Element)) {
HXLINE(  73)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(el3->nodeType)));
            						}
HXDLIN(  73)						::String eltNodeName = el3->nodeName;
HXLINE(  74)						bool _hx_tmp2;
HXDLIN(  74)						if ((el3->nodeType != ::Xml_obj::Document)) {
HXLINE(  74)							_hx_tmp2 = (el3->nodeType != ::Xml_obj::Element);
            						}
            						else {
HXLINE(  74)							_hx_tmp2 = false;
            						}
HXDLIN(  74)						if (_hx_tmp2) {
HXLINE(  74)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + ::_Xml::XmlType_Impl__obj::toString(el3->nodeType)));
            						}
HXDLIN(  74)						::Reflect_obj::setProperty(obj,eltNodeName,::XmlSerializer_obj::Deserialize(el3->children->__get(0).StaticCast<  ::Xml >()));
            					}
            				}
            			}
            		}
HXLINE(  79)		 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN(  79)		::String _hx_tmp4 = ((HX_(" <---- Returned: ",59,be,d5,4e) + ::Std_obj::string(obj)) + HX_(" for ",17,f1,92,b0));
HXDLIN(  79)		::String _hx_tmp5 = ((_hx_tmp4 + ::haxe::xml::Printer_obj::print(xml,null())) + HX_(" <---- ",c4,7f,01,37));
HXDLIN(  79)		_hx_tmp3(_hx_tmp5,::hx::SourceInfo(HX_("src/XmlSerializer.hx",00,ee,56,96),79,HX_("XmlSerializer",29,db,52,ac),HX_("Deserialize",1f,26,68,0d)));
HXLINE(  80)		return obj;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(XmlSerializer_obj,Deserialize,return )


XmlSerializer_obj::XmlSerializer_obj()
{
}

bool XmlSerializer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"Serialize") ) { outValue = Serialize_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"Deserialize") ) { outValue = Deserialize_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *XmlSerializer_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *XmlSerializer_obj_sStaticStorageInfo = 0;
#endif

::hx::Class XmlSerializer_obj::__mClass;

static ::String XmlSerializer_obj_sStaticFields[] = {
	HX_("Serialize",c0,3d,c5,96),
	HX_("Deserialize",1f,26,68,0d),
	::String(null())
};

void XmlSerializer_obj::__register()
{
	XmlSerializer_obj _hx_dummy;
	XmlSerializer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("XmlSerializer",29,db,52,ac);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &XmlSerializer_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(XmlSerializer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< XmlSerializer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = XmlSerializer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = XmlSerializer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

