// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_model_MyClass
#include <model/MyClass.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7ea836bb3081eab4_6_new,"model.MyClass","new",0x6d058fb9,"model.MyClass.new","model/MyClass.hx",6,0xb875f518)
namespace model{

void MyClass_obj::__construct(int varInt,::String varString){
            	HX_STACKFRAME(&_hx_pos_7ea836bb3081eab4_6_new)
HXLINE(   7)		this->varInt = varInt;
HXLINE(   8)		this->varString = varString;
            	}

Dynamic MyClass_obj::__CreateEmpty() { return new MyClass_obj; }

void *MyClass_obj::_hx_vtable = 0;

Dynamic MyClass_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MyClass_obj > _hx_result = new MyClass_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MyClass_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x28e91043;
}


MyClass_obj::MyClass_obj()
{
}

void MyClass_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MyClass);
	HX_MARK_MEMBER_NAME(varInt,"varInt");
	HX_MARK_MEMBER_NAME(varString,"varString");
	HX_MARK_END_CLASS();
}

void MyClass_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(varInt,"varInt");
	HX_VISIT_MEMBER_NAME(varString,"varString");
}

::hx::Val MyClass_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"varInt") ) { return ::hx::Val( varInt ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"varString") ) { return ::hx::Val( varString ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MyClass_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"varInt") ) { varInt=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"varString") ) { varString=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MyClass_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("varInt",48,f0,8c,53));
	outFields->push(HX_("varString",18,23,b7,b1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MyClass_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(MyClass_obj,varInt),HX_("varInt",48,f0,8c,53)},
	{::hx::fsString,(int)offsetof(MyClass_obj,varString),HX_("varString",18,23,b7,b1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MyClass_obj_sStaticStorageInfo = 0;
#endif

static ::String MyClass_obj_sMemberFields[] = {
	HX_("varInt",48,f0,8c,53),
	HX_("varString",18,23,b7,b1),
	::String(null()) };

::hx::Class MyClass_obj::__mClass;

void MyClass_obj::__register()
{
	MyClass_obj _hx_dummy;
	MyClass_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("model.MyClass",47,3f,cb,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MyClass_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MyClass_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MyClass_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MyClass_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace model
