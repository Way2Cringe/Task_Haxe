// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_model_GridButtonModel
#include <model/GridButtonModel.h>
#endif
#ifndef INCLUDED_model_GridPageModel
#include <model/GridPageModel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2f081b29fa7ce8a9_6_new,"model.GridPageModel","new",0x36293401,"model.GridPageModel.new","model/GridPageModel.hx",6,0xb5b4d890)
namespace model{

void GridPageModel_obj::__construct(int id,::Array< ::Dynamic> buttons){
            	HX_STACKFRAME(&_hx_pos_2f081b29fa7ce8a9_6_new)
HXLINE(   7)		this->id = id;
HXLINE(   8)		this->buttons = buttons;
            	}

Dynamic GridPageModel_obj::__CreateEmpty() { return new GridPageModel_obj; }

void *GridPageModel_obj::_hx_vtable = 0;

Dynamic GridPageModel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GridPageModel_obj > _hx_result = new GridPageModel_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool GridPageModel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2e1fd58b;
}


::hx::ObjectPtr< GridPageModel_obj > GridPageModel_obj::__new(int id,::Array< ::Dynamic> buttons) {
	::hx::ObjectPtr< GridPageModel_obj > __this = new GridPageModel_obj();
	__this->__construct(id,buttons);
	return __this;
}

::hx::ObjectPtr< GridPageModel_obj > GridPageModel_obj::__alloc(::hx::Ctx *_hx_ctx,int id,::Array< ::Dynamic> buttons) {
	GridPageModel_obj *__this = (GridPageModel_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GridPageModel_obj), true, "model.GridPageModel"));
	*(void **)__this = GridPageModel_obj::_hx_vtable;
	__this->__construct(id,buttons);
	return __this;
}

GridPageModel_obj::GridPageModel_obj()
{
}

void GridPageModel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GridPageModel);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(buttons,"buttons");
	HX_MARK_END_CLASS();
}

void GridPageModel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(buttons,"buttons");
}

::hx::Val GridPageModel_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"buttons") ) { return ::hx::Val( buttons ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GridPageModel_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"buttons") ) { buttons=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GridPageModel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("buttons",41,52,75,ca));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GridPageModel_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(GridPageModel_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(GridPageModel_obj,buttons),HX_("buttons",41,52,75,ca)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GridPageModel_obj_sStaticStorageInfo = 0;
#endif

static ::String GridPageModel_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("buttons",41,52,75,ca),
	::String(null()) };

::hx::Class GridPageModel_obj::__mClass;

void GridPageModel_obj::__register()
{
	GridPageModel_obj _hx_dummy;
	GridPageModel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("model.GridPageModel",8f,1f,a5,9e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GridPageModel_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GridPageModel_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GridPageModel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GridPageModel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace model
