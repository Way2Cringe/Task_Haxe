// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_DataBase
#include <DataBase.h>
#endif
#ifndef INCLUDED_controller_ScreenPageController
#include <controller/ScreenPageController.h>
#endif
#ifndef INCLUDED_model_ScreenPageModel
#include <model/ScreenPageModel.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_view_ScreenPageView
#include <view/ScreenPageView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_66165ae107e1cfee_11_new,"controller.ScreenPageController","new",0xf6cbaefb,"controller.ScreenPageController.new","controller/ScreenPageConrtoller.hx",11,0x153b4b38)
namespace controller{

void ScreenPageController_obj::__construct(int screenPageId, ::openfl::display::DisplayObjectContainer display){
            	HX_GC_STACKFRAME(&_hx_pos_66165ae107e1cfee_11_new)
HXLINE(  12)		this->model = ::DataBase_obj::GetOrLoadScreenPageModelById(screenPageId);
HXLINE(  13)		this->view =  ::view::ScreenPageView_obj::__alloc( HX_CTX ,this->model,display);
HXLINE(  14)		this->view->Draw();
            	}

Dynamic ScreenPageController_obj::__CreateEmpty() { return new ScreenPageController_obj; }

void *ScreenPageController_obj::_hx_vtable = 0;

Dynamic ScreenPageController_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ScreenPageController_obj > _hx_result = new ScreenPageController_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ScreenPageController_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x51882393;
}


::hx::ObjectPtr< ScreenPageController_obj > ScreenPageController_obj::__new(int screenPageId, ::openfl::display::DisplayObjectContainer display) {
	::hx::ObjectPtr< ScreenPageController_obj > __this = new ScreenPageController_obj();
	__this->__construct(screenPageId,display);
	return __this;
}

::hx::ObjectPtr< ScreenPageController_obj > ScreenPageController_obj::__alloc(::hx::Ctx *_hx_ctx,int screenPageId, ::openfl::display::DisplayObjectContainer display) {
	ScreenPageController_obj *__this = (ScreenPageController_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ScreenPageController_obj), true, "controller.ScreenPageController"));
	*(void **)__this = ScreenPageController_obj::_hx_vtable;
	__this->__construct(screenPageId,display);
	return __this;
}

ScreenPageController_obj::ScreenPageController_obj()
{
}

void ScreenPageController_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ScreenPageController);
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(view,"view");
	HX_MARK_END_CLASS();
}

void ScreenPageController_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(view,"view");
}

::hx::Val ScreenPageController_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"view") ) { return ::hx::Val( view ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return ::hx::Val( model ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ScreenPageController_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"view") ) { view=inValue.Cast<  ::view::ScreenPageView >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=inValue.Cast<  ::model::ScreenPageModel >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ScreenPageController_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("model",a9,23,58,0c));
	outFields->push(HX_("view",65,32,4f,4e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ScreenPageController_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::model::ScreenPageModel */ ,(int)offsetof(ScreenPageController_obj,model),HX_("model",a9,23,58,0c)},
	{::hx::fsObject /*  ::view::ScreenPageView */ ,(int)offsetof(ScreenPageController_obj,view),HX_("view",65,32,4f,4e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ScreenPageController_obj_sStaticStorageInfo = 0;
#endif

static ::String ScreenPageController_obj_sMemberFields[] = {
	HX_("model",a9,23,58,0c),
	HX_("view",65,32,4f,4e),
	::String(null()) };

::hx::Class ScreenPageController_obj::__mClass;

void ScreenPageController_obj::__register()
{
	ScreenPageController_obj _hx_dummy;
	ScreenPageController_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("controller.ScreenPageController",89,15,fc,dd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ScreenPageController_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ScreenPageController_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScreenPageController_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScreenPageController_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace controller
