// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_feathers_controls_Label
#include <feathers/controls/Label.h>
#endif
#ifndef INCLUDED_feathers_controls_ScrollContainer
#include <feathers/controls/ScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_BaseScrollContainer
#include <feathers/controls/supportClasses/BaseScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusContainer
#include <feathers/core/IFocusContainer.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusManagerAware
#include <feathers/core/IFocusManagerAware.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IHTMLTextControl
#include <feathers/core/IHTMLTextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStageFocusDelegate
#include <feathers/core/IStageFocusDelegate.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayout
#include <feathers/layout/ILayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalLayout
#include <feathers/layout/VerticalLayout.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_feathers_text_TextFormat
#include <feathers/text/TextFormat.h>
#endif
#ifndef INCLUDED_model_ScreenPageModel
#include <model/ScreenPageModel.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_view_ScreenPageView
#include <view/ScreenPageView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ef050d2e98e146d4_18_new,"view.ScreenPageView","new",0x53cb295b,"view.ScreenPageView.new","view/ScreenPageView.hx",18,0x5e886954)
HX_LOCAL_STACK_FRAME(_hx_pos_ef050d2e98e146d4_22_Draw,"view.ScreenPageView","Draw",0xe23fdac9,"view.ScreenPageView.Draw","view/ScreenPageView.hx",22,0x5e886954)
HX_LOCAL_STACK_FRAME(_hx_pos_ef050d2e98e146d4_42_onStageResize,"view.ScreenPageView","onStageResize",0xbb87792e,"view.ScreenPageView.onStageResize","view/ScreenPageView.hx",42,0x5e886954)
namespace view{

void ScreenPageView_obj::__construct( ::model::ScreenPageModel model, ::openfl::display::DisplayObjectContainer display){
            	HX_STACKFRAME(&_hx_pos_ef050d2e98e146d4_18_new)
HXLINE(  19)		this->model = model;
HXLINE(  20)		this->display = display;
            	}

Dynamic ScreenPageView_obj::__CreateEmpty() { return new ScreenPageView_obj; }

void *ScreenPageView_obj::_hx_vtable = 0;

Dynamic ScreenPageView_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ScreenPageView_obj > _hx_result = new ScreenPageView_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ScreenPageView_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x12365cad;
}

void ScreenPageView_obj::Draw(){
            	HX_GC_STACKFRAME(&_hx_pos_ef050d2e98e146d4_22_Draw)
HXLINE(  23)		this->scrollContainer =  ::feathers::controls::ScrollContainer_obj::__alloc( HX_CTX );
HXLINE(  24)		 ::feathers::controls::ScrollContainer _hx_tmp = this->scrollContainer;
HXDLIN(  24)		_hx_tmp->set_width(this->display->get_width());
HXLINE(  25)		 ::feathers::controls::ScrollContainer _hx_tmp1 = this->scrollContainer;
HXDLIN(  25)		_hx_tmp1->set_height(this->display->get_height());
HXLINE(  26)		this->display->addChild(this->scrollContainer);
HXLINE(  27)		 ::feathers::layout::VerticalLayout vl =  ::feathers::layout::VerticalLayout_obj::__alloc( HX_CTX );
HXLINE(  28)		this->scrollContainer->set_layout(vl);
HXLINE(  29)		this->title =  ::feathers::controls::Label_obj::__alloc( HX_CTX ,this->model->title);
HXLINE(  30)		 ::feathers::controls::Label _hx_tmp2 = this->title;
HXDLIN(  30)		_hx_tmp2->set_width(this->display->get_width());
HXLINE(  31)		this->title->set_wordWrap(true);
HXLINE(  32)		 ::feathers::controls::Label _hx_tmp3 = this->title;
HXDLIN(  32)		_hx_tmp3->set_textFormat( ::feathers::text::TextFormat_obj::__alloc( HX_CTX ,null(),40,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  33)		this->scrollContainer->addChild(this->title);
HXLINE(  34)		this->content =  ::feathers::controls::Label_obj::__alloc( HX_CTX ,this->model->content);
HXLINE(  35)		 ::feathers::controls::Label _hx_tmp4 = this->content;
HXDLIN(  35)		_hx_tmp4->set_width(this->display->get_width());
HXLINE(  36)		this->content->set_wordWrap(true);
HXLINE(  37)		 ::feathers::controls::Label _hx_tmp5 = this->content;
HXDLIN(  37)		_hx_tmp5->set_textFormat( ::feathers::text::TextFormat_obj::__alloc( HX_CTX ,null(),25,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  38)		this->scrollContainer->addChild(this->content);
HXLINE(  39)		this->display->addEventListener(HX_("resize",f4,59,7b,08),this->onStageResize_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScreenPageView_obj,Draw,(void))

void ScreenPageView_obj::onStageResize( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_ef050d2e98e146d4_42_onStageResize)
HXLINE(  43)		 ::feathers::controls::ScrollContainer _hx_tmp = this->scrollContainer;
HXDLIN(  43)		_hx_tmp->set_width(this->display->get_width());
HXLINE(  44)		 ::feathers::controls::ScrollContainer _hx_tmp1 = this->scrollContainer;
HXDLIN(  44)		_hx_tmp1->set_height(this->display->get_height());
HXLINE(  45)		 ::feathers::controls::Label _hx_tmp2 = this->title;
HXDLIN(  45)		_hx_tmp2->set_width(this->display->get_width());
HXLINE(  46)		 ::feathers::controls::Label _hx_tmp3 = this->content;
HXDLIN(  46)		_hx_tmp3->set_width(this->display->get_width());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScreenPageView_obj,onStageResize,(void))


::hx::ObjectPtr< ScreenPageView_obj > ScreenPageView_obj::__new( ::model::ScreenPageModel model, ::openfl::display::DisplayObjectContainer display) {
	::hx::ObjectPtr< ScreenPageView_obj > __this = new ScreenPageView_obj();
	__this->__construct(model,display);
	return __this;
}

::hx::ObjectPtr< ScreenPageView_obj > ScreenPageView_obj::__alloc(::hx::Ctx *_hx_ctx, ::model::ScreenPageModel model, ::openfl::display::DisplayObjectContainer display) {
	ScreenPageView_obj *__this = (ScreenPageView_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ScreenPageView_obj), true, "view.ScreenPageView"));
	*(void **)__this = ScreenPageView_obj::_hx_vtable;
	__this->__construct(model,display);
	return __this;
}

ScreenPageView_obj::ScreenPageView_obj()
{
}

void ScreenPageView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ScreenPageView);
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(display,"display");
	HX_MARK_MEMBER_NAME(scrollContainer,"scrollContainer");
	HX_MARK_MEMBER_NAME(title,"title");
	HX_MARK_MEMBER_NAME(content,"content");
	HX_MARK_END_CLASS();
}

void ScreenPageView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(display,"display");
	HX_VISIT_MEMBER_NAME(scrollContainer,"scrollContainer");
	HX_VISIT_MEMBER_NAME(title,"title");
	HX_VISIT_MEMBER_NAME(content,"content");
}

::hx::Val ScreenPageView_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"Draw") ) { return ::hx::Val( Draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return ::hx::Val( model ); }
		if (HX_FIELD_EQ(inName,"title") ) { return ::hx::Val( title ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { return ::hx::Val( display ); }
		if (HX_FIELD_EQ(inName,"content") ) { return ::hx::Val( content ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onStageResize") ) { return ::hx::Val( onStageResize_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"scrollContainer") ) { return ::hx::Val( scrollContainer ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ScreenPageView_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=inValue.Cast<  ::model::ScreenPageModel >(); return inValue; }
		if (HX_FIELD_EQ(inName,"title") ) { title=inValue.Cast<  ::feathers::controls::Label >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { display=inValue.Cast<  ::openfl::display::DisplayObjectContainer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"content") ) { content=inValue.Cast<  ::feathers::controls::Label >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"scrollContainer") ) { scrollContainer=inValue.Cast<  ::feathers::controls::ScrollContainer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ScreenPageView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("model",a9,23,58,0c));
	outFields->push(HX_("display",42,2a,4a,bb));
	outFields->push(HX_("scrollContainer",74,93,4e,a6));
	outFields->push(HX_("title",98,15,3b,10));
	outFields->push(HX_("content",39,8d,77,19));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ScreenPageView_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::model::ScreenPageModel */ ,(int)offsetof(ScreenPageView_obj,model),HX_("model",a9,23,58,0c)},
	{::hx::fsObject /*  ::openfl::display::DisplayObjectContainer */ ,(int)offsetof(ScreenPageView_obj,display),HX_("display",42,2a,4a,bb)},
	{::hx::fsObject /*  ::feathers::controls::ScrollContainer */ ,(int)offsetof(ScreenPageView_obj,scrollContainer),HX_("scrollContainer",74,93,4e,a6)},
	{::hx::fsObject /*  ::feathers::controls::Label */ ,(int)offsetof(ScreenPageView_obj,title),HX_("title",98,15,3b,10)},
	{::hx::fsObject /*  ::feathers::controls::Label */ ,(int)offsetof(ScreenPageView_obj,content),HX_("content",39,8d,77,19)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ScreenPageView_obj_sStaticStorageInfo = 0;
#endif

static ::String ScreenPageView_obj_sMemberFields[] = {
	HX_("model",a9,23,58,0c),
	HX_("display",42,2a,4a,bb),
	HX_("scrollContainer",74,93,4e,a6),
	HX_("title",98,15,3b,10),
	HX_("content",39,8d,77,19),
	HX_("Draw",24,58,49,2d),
	HX_("onStageResize",73,f8,5e,fe),
	::String(null()) };

::hx::Class ScreenPageView_obj::__mClass;

void ScreenPageView_obj::__register()
{
	ScreenPageView_obj _hx_dummy;
	ScreenPageView_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("view.ScreenPageView",e9,df,56,ce);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ScreenPageView_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ScreenPageView_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScreenPageView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScreenPageView_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace view
