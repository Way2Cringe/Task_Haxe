// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_DataProvider
#include <DataProvider.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_feathers_controls_BasicButton
#include <feathers/controls/BasicButton.h>
#endif
#ifndef INCLUDED_feathers_controls_Button
#include <feathers/controls/Button.h>
#endif
#ifndef INCLUDED_feathers_controls_ITriggerView
#include <feathers/controls/ITriggerView.h>
#endif
#ifndef INCLUDED_feathers_controls_LayoutGroup
#include <feathers/controls/LayoutGroup.h>
#endif
#ifndef INCLUDED_feathers_controls_ScrollContainer
#include <feathers/controls/ScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_controls_supportClasses_BaseScrollContainer
#include <feathers/controls/supportClasses/BaseScrollContainer.h>
#endif
#ifndef INCLUDED_feathers_core_FeathersControl
#include <feathers/core/FeathersControl.h>
#endif
#ifndef INCLUDED_feathers_core_IDisplayObject
#include <feathers/core/IDisplayObject.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusContainer
#include <feathers/core/IFocusContainer.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusManagerAware
#include <feathers/core/IFocusManagerAware.h>
#endif
#ifndef INCLUDED_feathers_core_IFocusObject
#include <feathers/core/IFocusObject.h>
#endif
#ifndef INCLUDED_feathers_core_IHTMLTextControl
#include <feathers/core/IHTMLTextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IMeasureObject
#include <feathers/core/IMeasureObject.h>
#endif
#ifndef INCLUDED_feathers_core_IStateContext
#include <feathers/core/IStateContext.h>
#endif
#ifndef INCLUDED_feathers_core_ITextControl
#include <feathers/core/ITextControl.h>
#endif
#ifndef INCLUDED_feathers_core_IUIControl
#include <feathers/core/IUIControl.h>
#endif
#ifndef INCLUDED_feathers_core_IValidating
#include <feathers/core/IValidating.h>
#endif
#ifndef INCLUDED_feathers_core_MeasureSprite
#include <feathers/core/MeasureSprite.h>
#endif
#ifndef INCLUDED_feathers_core_ValidatingSprite
#include <feathers/core/ValidatingSprite.h>
#endif
#ifndef INCLUDED_feathers_events_TriggerEvent
#include <feathers/events/TriggerEvent.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayout
#include <feathers/layout/ILayout.h>
#endif
#ifndef INCLUDED_feathers_layout_ILayoutObject
#include <feathers/layout/ILayoutObject.h>
#endif
#ifndef INCLUDED_feathers_layout_VerticalLayout
#include <feathers/layout/VerticalLayout.h>
#endif
#ifndef INCLUDED_feathers_style_IStyleObject
#include <feathers/style/IStyleObject.h>
#endif
#ifndef INCLUDED_feathers_style_IVariantStyleObject
#include <feathers/style/IVariantStyleObject.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_model_GridButtonModel
#include <model/GridButtonModel.h>
#endif
#ifndef INCLUDED_model_GridPageModel
#include <model/GridPageModel.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_view_GridPageView
#include <view/GridPageView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d54a6e04862abb72_27_new,"view.GridPageView","new",0xe769ff75,"view.GridPageView.new","view/GridPageView.hx",27,0x40c38eba)
HX_LOCAL_STACK_FRAME(_hx_pos_d54a6e04862abb72_33_Draw,"view.GridPageView","Draw",0x799c5b6f,"view.GridPageView.Draw","view/GridPageView.hx",33,0x40c38eba)
HX_LOCAL_STACK_FRAME(_hx_pos_d54a6e04862abb72_62_onStageResize,"view.GridPageView","onStageResize",0x44e4b3c8,"view.GridPageView.onStageResize","view/GridPageView.hx",62,0x40c38eba)
HX_LOCAL_STACK_FRAME(_hx_pos_d54a6e04862abb72_65_resize,"view.GridPageView","resize",0x520e05ff,"view.GridPageView.resize","view/GridPageView.hx",65,0x40c38eba)
HX_LOCAL_STACK_FRAME(_hx_pos_d54a6e04862abb72_80_onButtonClick,"view.GridPageView","onButtonClick",0x3f79156c,"view.GridPageView.onButtonClick","view/GridPageView.hx",80,0x40c38eba)
HX_LOCAL_STACK_FRAME(_hx_pos_d54a6e04862abb72_95_addEventListener,"view.GridPageView","addEventListener",0x9f145398,"view.GridPageView.addEventListener","view/GridPageView.hx",95,0x40c38eba)
HX_LOCAL_STACK_FRAME(_hx_pos_d54a6e04862abb72_18_boot,"view.GridPageView","boot",0x8d6e877d,"view.GridPageView.boot","view/GridPageView.hx",18,0x40c38eba)
HX_LOCAL_STACK_FRAME(_hx_pos_d54a6e04862abb72_19_boot,"view.GridPageView","boot",0x8d6e877d,"view.GridPageView.boot","view/GridPageView.hx",19,0x40c38eba)
namespace view{

void GridPageView_obj::__construct( ::model::GridPageModel model, ::openfl::display::DisplayObjectContainer display){
            	HX_GC_STACKFRAME(&_hx_pos_d54a6e04862abb72_27_new)
HXLINE(  28)		this->model = model;
HXLINE(  29)		this->display = display;
HXLINE(  30)		this->listeners =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}

Dynamic GridPageView_obj::__CreateEmpty() { return new GridPageView_obj; }

void *GridPageView_obj::_hx_vtable = 0;

Dynamic GridPageView_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GridPageView_obj > _hx_result = new GridPageView_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool GridPageView_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5c720fff;
}

void GridPageView_obj::Draw(){
            	HX_GC_STACKFRAME(&_hx_pos_d54a6e04862abb72_33_Draw)
HXLINE(  34)		this->scrollContainer =  ::feathers::controls::ScrollContainer_obj::__alloc( HX_CTX );
HXLINE(  35)		 ::feathers::controls::ScrollContainer _hx_tmp = this->scrollContainer;
HXDLIN(  35)		_hx_tmp->set_width(this->display->get_width());
HXLINE(  36)		 ::feathers::controls::ScrollContainer _hx_tmp1 = this->scrollContainer;
HXDLIN(  36)		_hx_tmp1->set_height(this->display->get_height());
HXLINE(  37)		this->display->addChild(this->scrollContainer);
HXLINE(  38)		 ::feathers::layout::VerticalLayout vl =  ::feathers::layout::VerticalLayout_obj::__alloc( HX_CTX );
HXLINE(  39)		vl->set_gap(((Float)10));
HXLINE(  40)		this->scrollContainer->set_layout(vl);
HXLINE(  41)		this->display->addEventListener(HX_("resize",f4,59,7b,08),this->onStageResize_dyn(),null(),null(),null());
HXLINE(  42)		this->buttons = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  43)		{
HXLINE(  43)			int _g = 0;
HXDLIN(  43)			::Array< ::Dynamic> _g1 = this->model->buttons;
HXDLIN(  43)			while((_g < _g1->length)){
HXLINE(  43)				::Array< ::Dynamic> line = _g1->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  43)				_g = (_g + 1);
HXLINE(  44)				::Array< ::Dynamic> buttonLine = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  45)				 ::feathers::controls::LayoutGroup layoutLine =  ::feathers::controls::LayoutGroup_obj::__alloc( HX_CTX );
HXLINE(  46)				this->scrollContainer->addChild(layoutLine);
HXLINE(  47)				{
HXLINE(  47)					int _g2 = 0;
HXDLIN(  47)					while((_g2 < line->length)){
HXLINE(  47)						 ::model::GridButtonModel but = line->__get(_g2).StaticCast<  ::model::GridButtonModel >();
HXDLIN(  47)						_g2 = (_g2 + 1);
HXLINE(  48)						 ::feathers::controls::Button button =  ::feathers::controls::Button_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  49)						button->set_icon( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::DataProvider_obj::LoadImg(but->imagePath),null(),null()));
HXLINE(  50)						button->set_height(((Float)100));
HXLINE(  51)						button->set_name(::Std_obj::string(but->screenPageId));
HXLINE(  52)						button->addEventListener(HX_("trigger",38,55,df,25),this->onButtonClick_dyn(),null(),null(),null());
HXLINE(  53)						buttonLine->push(button);
HXLINE(  54)						layoutLine->addChild(button);
            					}
            				}
HXLINE(  56)				this->buttons->push(buttonLine);
            			}
            		}
HXLINE(  58)		this->resize();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GridPageView_obj,Draw,(void))

void GridPageView_obj::onStageResize( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d54a6e04862abb72_62_onStageResize)
HXDLIN(  62)		this->resize();
            	}


HX_DEFINE_DYNAMIC_FUNC1(GridPageView_obj,onStageResize,(void))

void GridPageView_obj::resize(){
            	HX_STACKFRAME(&_hx_pos_d54a6e04862abb72_65_resize)
HXLINE(  66)		Float dwidth = this->display->get_width();
HXLINE(  67)		 ::feathers::controls::ScrollContainer _hx_tmp = this->scrollContainer;
HXDLIN(  67)		_hx_tmp->set_height(this->display->get_height());
HXLINE(  68)		this->scrollContainer->set_width(dwidth);
HXLINE(  69)		{
HXLINE(  69)			int _g = 0;
HXDLIN(  69)			int _g1 = this->buttons->length;
HXDLIN(  69)			while((_g < _g1)){
HXLINE(  69)				_g = (_g + 1);
HXDLIN(  69)				int i = (_g - 1);
HXLINE(  70)				{
HXLINE(  70)					int _g2 = 0;
HXDLIN(  70)					int _g3 = this->buttons->__get(i).StaticCast< ::Array< ::Dynamic> >()->length;
HXDLIN(  70)					while((_g2 < _g3)){
HXLINE(  70)						_g2 = (_g2 + 1);
HXDLIN(  70)						int j = (_g2 - 1);
HXLINE(  71)						Float w = ((dwidth - (((Float)10) * ( (Float)((this->buttons->__get(i).StaticCast< ::Array< ::Dynamic> >()->length - 1)) ))) / ( (Float)(this->buttons->__get(i).StaticCast< ::Array< ::Dynamic> >()->length) ));
HXLINE(  72)						this->buttons->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast<  ::feathers::controls::Button >()->set_width(w);
HXLINE(  73)						this->buttons->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast<  ::feathers::controls::Button >()->set_height(w);
HXLINE(  74)						this->buttons->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast<  ::feathers::controls::Button >()->get_icon()->set_width((w * ((Float)0.7)));
HXLINE(  75)						this->buttons->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast<  ::feathers::controls::Button >()->get_icon()->set_height((w * ((Float)0.7)));
HXLINE(  76)						this->buttons->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(j).StaticCast<  ::feathers::controls::Button >()->set_x((((dwidth + ((Float)10)) / ( (Float)(this->buttons->__get(i).StaticCast< ::Array< ::Dynamic> >()->length) )) * ( (Float)(j) )));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(GridPageView_obj,resize,(void))

void GridPageView_obj::onButtonClick( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d54a6e04862abb72_80_onButtonClick)
HXLINE(  81)		if (!(this->listeners->exists(HX_("trigger",38,55,df,25)))) {
HXLINE(  82)			return;
            		}
HXLINE(  83)		if (::hx::IsNull( this->listeners->get(HX_("trigger",38,55,df,25)) )) {
HXLINE(  84)			return;
            		}
HXLINE(  85)		 ::feathers::controls::Button target = ( ( ::feathers::controls::Button)(event->currentTarget) );
HXLINE(  86)		{
HXLINE(  86)			int _g = 0;
HXDLIN(  86)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->listeners->get(HX_("trigger",38,55,df,25))) );
HXDLIN(  86)			while((_g < _g1->length)){
HXLINE(  86)				 ::Dynamic li = _g1->__get(_g);
HXDLIN(  86)				_g = (_g + 1);
HXLINE(  87)				li(::Std_obj::parseInt(target->get_name()));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(GridPageView_obj,onButtonClick,(void))

void GridPageView_obj::addEventListener(::String eventType, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_d54a6e04862abb72_95_addEventListener)
HXDLIN(  95)		bool _hx_tmp;
HXDLIN(  95)		if (this->listeners->exists(eventType)) {
HXDLIN(  95)			_hx_tmp = ::hx::IsNull( this->listeners->get(eventType) );
            		}
            		else {
HXDLIN(  95)			_hx_tmp = true;
            		}
HXDLIN(  95)		if (_hx_tmp) {
HXLINE(  96)			this->listeners->set(eventType,::Array_obj< ::Dynamic>::__new(1)->init(0,listener));
            		}
            		else {
HXLINE(  98)			( (::Array< ::Dynamic>)(this->listeners->get(eventType)) )->push(listener);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(GridPageView_obj,addEventListener,(void))

Float GridPageView_obj::layoutGap;

Float GridPageView_obj::buttonHeight;


::hx::ObjectPtr< GridPageView_obj > GridPageView_obj::__new( ::model::GridPageModel model, ::openfl::display::DisplayObjectContainer display) {
	::hx::ObjectPtr< GridPageView_obj > __this = new GridPageView_obj();
	__this->__construct(model,display);
	return __this;
}

::hx::ObjectPtr< GridPageView_obj > GridPageView_obj::__alloc(::hx::Ctx *_hx_ctx, ::model::GridPageModel model, ::openfl::display::DisplayObjectContainer display) {
	GridPageView_obj *__this = (GridPageView_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GridPageView_obj), true, "view.GridPageView"));
	*(void **)__this = GridPageView_obj::_hx_vtable;
	__this->__construct(model,display);
	return __this;
}

GridPageView_obj::GridPageView_obj()
{
}

void GridPageView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GridPageView);
	HX_MARK_MEMBER_NAME(model,"model");
	HX_MARK_MEMBER_NAME(display,"display");
	HX_MARK_MEMBER_NAME(scrollContainer,"scrollContainer");
	HX_MARK_MEMBER_NAME(listeners,"listeners");
	HX_MARK_MEMBER_NAME(buttons,"buttons");
	HX_MARK_END_CLASS();
}

void GridPageView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(model,"model");
	HX_VISIT_MEMBER_NAME(display,"display");
	HX_VISIT_MEMBER_NAME(scrollContainer,"scrollContainer");
	HX_VISIT_MEMBER_NAME(listeners,"listeners");
	HX_VISIT_MEMBER_NAME(buttons,"buttons");
}

::hx::Val GridPageView_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"Draw") ) { return ::hx::Val( Draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { return ::hx::Val( model ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { return ::hx::Val( display ); }
		if (HX_FIELD_EQ(inName,"buttons") ) { return ::hx::Val( buttons ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listeners") ) { return ::hx::Val( listeners ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onStageResize") ) { return ::hx::Val( onStageResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"onButtonClick") ) { return ::hx::Val( onButtonClick_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"scrollContainer") ) { return ::hx::Val( scrollContainer ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addEventListener") ) { return ::hx::Val( addEventListener_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GridPageView_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"model") ) { model=inValue.Cast<  ::model::GridPageModel >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { display=inValue.Cast<  ::openfl::display::DisplayObjectContainer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buttons") ) { buttons=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"listeners") ) { listeners=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"scrollContainer") ) { scrollContainer=inValue.Cast<  ::feathers::controls::ScrollContainer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GridPageView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("model",a9,23,58,0c));
	outFields->push(HX_("display",42,2a,4a,bb));
	outFields->push(HX_("scrollContainer",74,93,4e,a6));
	outFields->push(HX_("listeners",7f,65,8e,f3));
	outFields->push(HX_("buttons",41,52,75,ca));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GridPageView_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::model::GridPageModel */ ,(int)offsetof(GridPageView_obj,model),HX_("model",a9,23,58,0c)},
	{::hx::fsObject /*  ::openfl::display::DisplayObjectContainer */ ,(int)offsetof(GridPageView_obj,display),HX_("display",42,2a,4a,bb)},
	{::hx::fsObject /*  ::feathers::controls::ScrollContainer */ ,(int)offsetof(GridPageView_obj,scrollContainer),HX_("scrollContainer",74,93,4e,a6)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(GridPageView_obj,listeners),HX_("listeners",7f,65,8e,f3)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(GridPageView_obj,buttons),HX_("buttons",41,52,75,ca)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo GridPageView_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &GridPageView_obj::layoutGap,HX_("layoutGap",8c,8c,fc,5d)},
	{::hx::fsFloat,(void *) &GridPageView_obj::buttonHeight,HX_("buttonHeight",79,df,09,aa)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String GridPageView_obj_sMemberFields[] = {
	HX_("model",a9,23,58,0c),
	HX_("display",42,2a,4a,bb),
	HX_("scrollContainer",74,93,4e,a6),
	HX_("listeners",7f,65,8e,f3),
	HX_("buttons",41,52,75,ca),
	HX_("Draw",24,58,49,2d),
	HX_("onStageResize",73,f8,5e,fe),
	HX_("resize",f4,59,7b,08),
	HX_("onButtonClick",17,5a,f3,f8),
	HX_("addEventListener",cd,0b,64,f1),
	::String(null()) };

static void GridPageView_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GridPageView_obj::layoutGap,"layoutGap");
	HX_MARK_MEMBER_NAME(GridPageView_obj::buttonHeight,"buttonHeight");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GridPageView_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GridPageView_obj::layoutGap,"layoutGap");
	HX_VISIT_MEMBER_NAME(GridPageView_obj::buttonHeight,"buttonHeight");
};

#endif

::hx::Class GridPageView_obj::__mClass;

static ::String GridPageView_obj_sStaticFields[] = {
	HX_("layoutGap",8c,8c,fc,5d),
	HX_("buttonHeight",79,df,09,aa),
	::String(null())
};

void GridPageView_obj::__register()
{
	GridPageView_obj _hx_dummy;
	GridPageView_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("view.GridPageView",03,21,56,f2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GridPageView_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GridPageView_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GridPageView_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GridPageView_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GridPageView_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GridPageView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GridPageView_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GridPageView_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d54a6e04862abb72_18_boot)
HXDLIN(  18)		layoutGap = ((Float)10);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d54a6e04862abb72_19_boot)
HXDLIN(  19)		buttonHeight = ((Float)100);
            	}
}

} // end namespace view
